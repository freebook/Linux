<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: section.version.git.xml 666 2013-08-21 10:06:25Z netkiller $ -->
<chapter id="index"><?dbhtml dir="git"?>
	<title>Git - Fast Version Control System</title>
	<subtitle>distributed revision control system</subtitle>
	<info>
		<keywordset>
			<keyword>
				ls $(git --exec-path) -1 | tr '\n ' ','
			</keyword>
			<keyword>
				git,git-add,git-add--interactive,git-am,git-annotate,git-apply,git-archive,git-bisect,git-bisect--helper,git-blame,git-branch,git-bundle,git-cat-file,git-check-attr,git-checkout,git-checkout-index,git-check-ref-format,git-cherry,git-cherry-pick,git-clean,git-clone,git-commit,git-commit-tree,git-config,git-count-objects,git-daemon,git-describe,git-diff,git-diff-files,git-diff-index,git-difftool,git-difftool--helper,git-diff-tree,git-fast-export,git-fast-import,git-fetch,git-fetch-pack,git-filter-branch,git-fmt-merge-msg,git-for-each-ref,git-format-patch,git-fsck,git-fsck-objects,git-gc,git-get-tar-commit-id,git-grep,git-hash-object,git-help,git-http-backend,git-http-fetch,git-http-push,git-imap-send,git-index-pack,git-init,git-init-db,git-instaweb,git-log,git-lost-found,git-ls-files,git-ls-remote,git-ls-tree,git-mailinfo,git-mailsplit,git-merge,git-merge-base,git-merge-file,git-merge-index,git-merge-octopus,git-merge-one-file,git-merge-ours,git-merge-recursive,git-merge-resolve,git-merge-subtree,git-mergetool,git-mergetool--lib,git-merge-tree,git-mktag,git-mktree,git-mv,git-name-rev,git-notes,git-pack-objects,git-pack-redundant,git-pack-refs,git-parse-remote,git-patch-id,git-peek-remote,git-prune,git-prune-packed,git-pull,git-push,git-quiltimport,git-read-tree,git-rebase,git-rebase--interactive,git-receive-pack,git-reflog,git-relink,git-remote,git-remote-ftp,git-remote-ftps,git-remote-http,git-remote-https,git-remote-testgit,git-repack,git-replace,git-repo-config,git-request-pull,git-rerere,git-reset,git-revert,git-rev-list,git-rev-parse,git-rm,git-send-pack,git-shell,git-shortlog,git-show,git-show-branch,git-show-index,git-show-ref,git-sh-setup,git-stage,git-stash,git-status,git-stripspace,git-submodule,git-symbolic-ref,git-tag,git-tar-tree,git-unpack-file,git-unpack-objects,git-update-index,git-update-ref,git-update-server-info,git-upload-archive,git-upload-pack,git-var,git-verify-pack,git-verify-tag,git-web--browse,git-whatchanged,git-write-tree
			</keyword>
		</keywordset>
	</info>
	<para>homepage: http://git.or.cz/index.html</para>
	<para></para>
	<procedure>
		<title>Git </title>
		<step>
			<para>install</para>
			<screen><![CDATA[
sudo apt-get install git-core
			]]></screen>
		</step>
		<step>
			<para>config</para>
			<screen>
			<![CDATA[
$ git-config --global user.name neo
$ git-config --global user.email openunix@163.com
			]]>
			</screen>
		</step>
		<step>
			<para>Initializ</para>
			<screen><![CDATA[
$ mkdir repository
$ cd repository/

/repository$ git-init-db
Initialized empty Git repository in .git/
			]]></screen>
			<para>to check .gitconfig file</para>
			<screen><![CDATA[
$ cat ~/.gitconfig
[user]
        name = chen
        email = openunix@163.com
			]]></screen>
		</step>
	</procedure>
	<!-- http://tkg.im.ncue.edu.tw/?p=755 -->
	<section id="repositories">
		<title>Repositories 仓库管理</title>
		<section id="git.init">
			<title>initial setup</title>
			<para></para>
			<screen><![CDATA[
Tell git who you are:

$ git config user.name "FirstName LastName"
$ git config user.email "user@example.com"

If you have many git repositories under your current user, you can set this for all of them


$ git config --global user.name "FirstName LastName"
$ git config --global user.email "user@example.com"

If you want pretty colors, you can setup the following for branch, status, and diff commands:

$ git config --global color.branch "auto"
$ git config --global color.status "auto"
$ git config --global color.diff "auto"

Or, to turn all color options on (with git 1.5.5+), use:

$ git config --global color.ui "auto"
To enable aut-detection for number of threads to use (good for multi-CPU or multi-core computers) for packing repositories, use:


$ git config --global pack.threads "0"
To disable the rename detection limit (which is set "pretty low" according to Linus, "just to not cause problems for people who have less memory in their machines than kernel developers tend to have"), use:

$ git config --global   diff.renamelimit "0"
		]]></screen>
		</section>
		<section id="git.clone">
			<title>克隆代码</title>
			<para>克隆到指定目录</para>
			<screen>
			<![CDATA[
➜  workspace git clone http://neo@192.168.30.5/netkiller.cn/api.netkiller.cn.git tmp.netkiller.cn			
			]]>
			</screen>
			<para>克隆单分支（非 master）</para>
			<screen>
			<![CDATA[
 git clone -b 分支名 https://xxx.git	
 git clone --branch <branchname> <remote-repo-url>		
			]]>
			</screen>
			<screen>
		<![CDATA[
$ git clone git://github.com/git/hello-world.git
$ cd hello-world
$ (edit files)
$ git add (files)
$ git commit -m 'Explain what I changed'

		]]>
			</screen>
			<section id="git.restore">
				<title>恢复文件</title>
				<screen>
				<![CDATA[
[root@grey lua]# git status
On branch grey
Your branch is up to date with 'origin/grey'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   grey.lua

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	cache.lua
	flush.lua

no changes added to commit (use "git add" and/or "git commit -a")

[root@grey lua]# git restore grey.lua
[root@grey lua]# git status
On branch grey
Your branch is up to date with 'origin/grey'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	cache.lua
	flush.lua

nothing added to commit but untracked files present (use "git add" to track)
				
				]]>
				</screen>
			</section>
		</section>
		<section id="git.checkout">
			<title>切换分支</title>
			<subtitle>git-checkout - Checkout and switch to a branch</subtitle>
			<section>
				<title>checkout master</title>
				<screen><![CDATA[
$ git checkout master
Switched to branch "master"
			]]></screen>
			</section>
			<section>
				<title>checkout 分支</title>
				<screen><![CDATA[
$ git branch
* master
  mybranch

$ git checkout mybranch
Switched to branch "mybranch"

$ git branch
  master
* mybranch
			]]></screen>
			</section>
			<section>
				<title>通过 checkout 找回丢失的文件</title>
				<para>setup.py 不经意间被删除，找到丢失那一刻的提交是 fda886b0ae1526020c366cea2b747b3ceda18ff6，通过 checkout 检出该文件</para>
				<screen>
				<![CDATA[
git checkout fda886b0ae1526020c366cea2b747b3ceda18ff6 -- setup.py
				]]>
				</screen>
				<para>重新添加到版本库中</para>
				<screen>
				<![CDATA[
git add setup.py
git commit -a -m '还原丢失文件'
git push
				]]>
				</screen>
			</section>
			<section>
				<title>checkout 所有远程分支</title>
				<screen>
				<![CDATA[
for branch in $(git branch -r | grep -v HEAD) ; do
# git checkout -b ${branch#*/} $branch;
git checkout ${branch#*/};
git pull;
done				
				]]>
				</screen>
			</section>
			<section>
				<title>使用 ours 与 theirs 解决冲突</title>
				<para>发生冲突是文件内会出现</para>
				<screen>
				<![CDATA[ 
<<<<<<<HEAD
<ours contents>
=======
<theirs contents>
>>>>>>>				
				]]>
				</screen>
				<para>使用 --ours 或 --theirs 来选择保留那一方的文件，例如：</para>
				<screen>
				<![CDATA[ 
git checkout --theirs <fileName>
				]]>
				</screen>
				<para>冲突解决步骤</para>
				<screen>
				<![CDATA[ 
$ git checkout --ours <fileName>
$ git add <fileName>   //标记该冲突已解决
$ git rebase --continue 
$ git status
$ git commit -a -m '冲突已经处理'
$ git push	
				]]>
				</screen>
				<para></para>
			</section>
		</section>

		<section id="git.add">
			<title>git-add - Add file contents to the index</title>
			<screen>
		<![CDATA[
$ echo 'hello world!!!'> newfile
$ git-add newfile
		]]>
			</screen>
		</section>
		<section id="git.commit">
			<title>Creating and Commiting</title>
			<screen><![CDATA[
$ cd (project-directory)
$ git init
$ (add some files)
$ git add .
$ git commit -m 'Initial commit'
		]]></screen>
			<section id="git-commit">
				<title>git-commit - Record changes to the repository</title>
				<screen><![CDATA[
$ git-commit -m 'add a new file' newfile
Created initial commit f6fda79: add a new file
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 newfile
		]]></screen>
			</section>
		</section>

		<section id="git.status">
			<title>Status</title>
			<screen>
		<![CDATA[
$ git clone git://10.10.0.5/example.git
Cloning into example...
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 5 (delta 1), reused 0 (delta 0)
Receiving objects: 100% (5/5), done.
Resolving deltas: 100% (1/1), done.

neo@neo-OptiPlex-380:~/tmp$ cd example/

neo@neo-OptiPlex-380:~/tmp/example$ git status
# On branch master
nothing to commit (working directory clean)

neo@neo-OptiPlex-380:~/tmp/example$ ls
test1  test2  test3  test4

neo@neo-OptiPlex-380:~/tmp/example$ echo hello > test1

neo@neo-OptiPlex-380:~/tmp/example$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   test1
#
no changes added to commit (use "git add" and/or "git commit -a")
		]]>
			</screen>

			<section id="git-status">
				<title>git-status - Show the working tree status</title>
				<screen>
		<![CDATA[
$ git-status newfile
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#
#       new file: newfile
#		]]>
				</screen>
			</section>
		</section>
		<section id="git.diff">
			<title>Diff</title>
			<screen>
		<![CDATA[
neo@neo-OptiPlex-380:~/tmp/example$ git diff
diff --git a/test1 b/test1
index e69de29..ce01362 100644
--- a/test1
+++ b/test1
@@ -0,0 +1 @@
+hello
		]]>
			</screen>
			<para>比较 nqp-cc/src/QASTCompilerMAST.nqp 文件 当前版本与 211ab0b19f25b8c81685a97540f4b1491eb17504 版本的区别</para>
			<screen><![CDATA[
git diff 211ab0b19f25b8c81685a97540f4b1491eb17504 -- nqp-cc/src/QASTCompilerMAST.nqp
		]]></screen>
			<section>
				<title>--name-only 仅显示文件名</title>
				<screen><![CDATA[
git diff --name-only
			]]></screen>
			</section>
		</section>
		
		<section id="git.push">
			<title>Push</title>
			<screen>
		<![CDATA[
$ git clone git://10.10.0.5/example.git
$ cd example
$ (edit files)
$ git add (files)
$ git commit -m 'Explain what I changed'

$ git push origin master
Counting objects: 5, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 278 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git://10.10.0.5/example.git
   27f8417..b088cc3  master -> master
		]]>
			</screen>
		</section>
		<section id="git.pull">
			<title>Pull</title>
			<screen><![CDATA[
$ git pull
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From git://10.10.0.5/example
   27f8417..b088cc3  master     -> origin/master
Updating 27f8417..b088cc3
Fast-forward
 test1 |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
		]]></screen>
		</section>
		<section id="git.fetch">
			<title>fetch</title>
			<screen><![CDATA[
$ git fetch
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 2 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (2/2), done.
From git://10.10.0.5/example
   b088cc3..7e8c17d  master     -> origin/master
		]]></screen>
		</section>
		<section id="git.patch">
			<title>Creating a Patch</title>
			<screen>
		<![CDATA[
$ git clone git://github.com/git/hello-world.git
$ cd hello-world
$ (edit files)
$ git add (files)
$ git commit -m 'Explain what I changed'
$ git format-patch origin/master
		]]>
			</screen>
		</section>
		<section id="git.reset">
			<title>reset</title>
			<para>重置到上一个版本</para>
			<screen><![CDATA[
git log
git reset --hard HEAD^
git log
git push -f
		]]></screen>
			<section>
				<title>还原文件</title>
				<screen>
				<![CDATA[
$ git checkout <commit> --filename
$ git reset filename				
				]]>
				</screen>
			</section>
		</section>
	</section>

	<section id="git.branch">
		<title>分支管理</title>
		<subtitle>Manipulating branches</subtitle>
		<para>git-branch - List, create, or delete branches</para>
		<section id="branch.list">
			<title>查看本地分支</title>
			<screen><![CDATA[
$ git branch
* master
			]]></screen>
			<para>查看远程分支</para>
			<screen>
			<![CDATA[
git branch -a			
			]]>
			</screen>
		</section>
		<section id="branch.create">
			<title>创建分支</title>
			<screen>
			<![CDATA[
$ git branch development
$ git branch
* master
  development
			]]>
			</screen>
			<para>机遇分支创建分支</para>
			<screen>
			<![CDATA[
$ git checkout -b feature develop
$ git push --set-upstream origin feature
			]]>
			</screen>
		</section>
		<section id="branch.delete">
			<title>删除分支</title>
			<screen><![CDATA[
$ git branch -d staging
Deleted branch staging.

$ git branch
* master
			]]></screen>
		</section>
		<section id="branch.switch">
			<title>切换分支</title>
			<screen><![CDATA[
$ git branch
* master
  testing

$ git checkout testing
Switched to branch "testing"

$ git branch
  master
* testing
			]]></screen>
		</section>
		<section>
			<title>重命名分支</title>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git checkout test
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git branch -m test testing
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git push --delete origin test
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git push origin testing
			]]>
			</screen>
		</section>
		<section id="git-show-branch">
			<title>git-show-branch - Show branches and their commits</title>
			<screen><![CDATA[
$ git-show-branch
! [master] add a new file
 * [mybranch] add a new file
--
+* [master] add a new file
			]]></screen>
		</section>
	</section>
	<section id="git.remote">
		<title>远程仓库</title>
		<para>添加远程仓库</para>
		<screen>
		<![CDATA[
git remote add origin git@localhost:example.git
		]]>
		</screen>
		<para>查看远程仓库</para>
		<screen>
		<![CDATA[
git remote show
origin
		]]>
		</screen>
		<para></para>
		<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~> git remote -v
origin	git@192.168.30.5:netkiller.cn/www.netkiller.cn.git (fetch)
origin	git@192.168.30.5:netkiller.cn/www.netkiller.cn.git (push)			
			]]>
		</screen>
		<para>添加多个远程仓库</para>
		<screen><![CDATA[
git remote add origin git@localhost:example.git
git remote add another https://gitcafe.com/netkiller/netkiller.gitcafe.com.git
git push origin master
git push another master
		]]></screen>
		<para>修改远程仓库</para>
		<screen>
			<![CDATA[
git remote set-url origin git@gitlab.netkiller.cn:netkiller.cn/www.netkiller.cn.git
git remote set-url origin https://gitlab.netkiller.cn/netkiller.cn/www.netkiller.cn.git
			]]>
		</screen>
		<section id="git.remote.rename">
			<title>修改 origin</title>
			<screen>
		<![CDATA[
git remote rename origin old-origin
		]]>
			</screen>
		</section>
		<section id="git.remote.remove">
			<title>删除 origin</title>
			<screen>
		<![CDATA[
git remote remove origin		
		]]>
			</screen>
			<para>删除远程仓库</para>
			<screen>
		<![CDATA[
git remote rm origin
		]]>
			</screen>
		</section>
		<section>
			<title>仓库共享</title>
			<section id="git.server">
				<title>Setting up a git server</title>
				<para>First we need to setup a user with a home folder. We will store all the repositories in this users home folder.</para>
				<screen>
		<![CDATA[
sudo adduser git
		]]>
				</screen>
				<para>Rather than giving out the password to the git user account use ssh keys to login so that you can have multiple developers connect securely and easily.</para>
				<para>Next we will make a repository. For this example we will work with a repository called example. Login as the user git and add the repository.</para>
				<para>login to remote server</para>
				<screen>
		<![CDATA[
ssh git@REMOTE_SERVER
		]]>
				</screen>
				<para>once logged in</para>
				<screen>
		<![CDATA[
sudo mkdir example.git
cd example.git
sudo git --bare init
Initialized empty Git repository in /home/git/example.git/
		]]>
				</screen>
				<para>That’s all there is to creating a repository. Notice we named our folder with a .git extension.</para>
				<para>Also notice the ‘bare’ option. By default the git repository assumes that you’ll be using it as your working directory, so git stores the actual bare repository files in a .git directory alongside all the project files. Since we are setting up a remote server we don’t need copies of the files on the filesystem. Instead, all we need are the deltas and binary objects of the repository. By setting ‘bare’ we tell git not to store the current files of the repository only the diffs. This is optional as
					you may have need to be able to browse the files on your remote server.
				</para>
				<para>Finally all you need to do is add your files to the remote repository. We will assume you don’t have any files yet.</para>
				<screen>
		<![CDATA[
mkdir example
cd example
git init
touch README
git add README
git commit -m 'first commit'
git remote add origin git@REMOTE_SERVER:example.git
git push origin master
		]]>
				</screen>
				<para>replace REMOTE_SERVER with your server name or IP</para>

			</section>

		</section>
	</section>
	<section id="git.merge">
		<title>合并分支</title>
		<section>
			<title>合并分支</title>
			<para>从 development 像 testing 分支合并</para>
			<screen>
			<![CDATA[
git checkout development
git pull
git checkout testing
git pull
git merge --no-ff "development"
git push
			]]>
			</screen>
			<para>testing 分支向 master 分支合并</para>
			<para>获取 testing 合并请求的分支</para>
			<screen>
		<![CDATA[
git fetch origin
git checkout -b "testing" "origin/testing"		
		]]>
			</screen>
			<para>如果此前已经执行过，使用下面命令切换分支即可，切换后 pull 代码，看看有什么新提交</para>
			<screen>
		<![CDATA[
git checkout "testing"
git pull
		]]>
			</screen>
			<para>切换到 master 分支</para>
			<screen>
		<![CDATA[
git fetch origin
git checkout "master"
git branch --show-current
git merge --no-ff "testing"
		]]>
			</screen>
			<para>将合并结果推送到远程</para>
			<screen>
		<![CDATA[
git push origin "master"		
		]]>
			</screen>
		</section>
		<section id="git.rebase">
			<title>rebase</title>
			<para>恢复 rebase 版本</para>
			<screen>
		<![CDATA[
git rebase
git reflog
git reset --hard 5faf0ae
git push
		]]>
			</screen>
		</section>
		<section>
			<title>合并分支解决冲突</title>
			<para>案例，例如我们从 testing 分支向 master 分支合并代码出现冲突，该如何解决呢？</para>
			<para>首先，两个分支拉取最新代码</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git checkout testing
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git pull		
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git checkout master
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git pull
			]]>
			</screen>
			<para>然后合并分支，从 testing 分支向 master 合并</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git merge --no-ff testing
自动合并 neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java
冲突（内容）：合并冲突于 neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java
自动合并失败，修正冲突然后提交修正的结果。			
			]]>
			</screen>
			<para>出现冲突，编辑冲突文件</para>
			<screen>
			<![CDATA[
vim neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java
			]]>
			</screen>
			<para>保存后重看状态</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git status
位于分支 master
您的分支与上游分支 'origin/master' 一致。

您有尚未合并的路径。
  （解决冲突并运行 "git commit"）
  （使用 "git merge --abort" 终止合并）

要提交的变更：
	修改：     neo-admin/src/main/resources/application-prod.yml
	修改：     neo-admin/src/main/resources/application-test.yml
	修改：     neo-common/src/main/java/com/neo/common/enums/IncarAttachTypeEnum.java
	修改：     neo-incar/src/main/java/com/neo/incar/service/impl/IncarAttachServiceImpl.java

未合并的路径：
  （使用 "git add <文件>..." 标记解决方案）
	双方修改：   neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java			
			]]>
			</screen>
			<para>将合并的文件添加到 git</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git add neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git status                                                                
位于分支 master
您的分支与上游分支 'origin/master' 一致。

所有冲突已解决但您仍处于合并中。
  （使用 "git commit" 结束合并）

要提交的变更：
	修改：     neo-admin/src/main/resources/application-prod.yml
	修改：     neo-admin/src/main/resources/application-test.yml
	修改：     neo-common/src/main/java/com/neo/common/enums/IncarAttachTypeEnum.java
	修改：     neo-incar/src/main/java/com/neo/incar/service/impl/IncarAttachServiceImpl.java
	修改：     neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java			
			]]>
			</screen>
			<para>提交代码</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git commit -a -m '手工合并分支 testing -> master'
[master 3652bf8e] 手工合并分支 testing -> master			
			]]>
			</screen>
			<para>推送代码</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git push
枚举对象中: 1, 完成.
对象计数中: 100% (1/1), 完成.
写入对象中: 100% (1/1), 240 字节 | 240.00 KiB/s, 完成.
总共 1（差异 0），复用 0（差异 0），包复用 0
remote: 
remote: To create a merge request for master, visit:
remote:   http://192.168.30.5/netkiller.cn/api.netkiller.cn/-/merge_requests/new?merge_request%5Bsource_branch%5D=master
remote: 
To http://192.168.30.5/netkiller.cn/api.netkiller.cn.git
   fcaefaf4..3652bf8e  master -> master
			]]>
			</screen>
		</section>
		<section>
			<title>终止合并</title>
			<screen>
			<![CDATA[
git merge --about
			]]>
			</screen>
		</section>
		<section>
			<title>合并单个文件</title>
			<para>从 development 到 testing</para>
			<screen>
			<![CDATA[
git checkout development
git pull
checkout testing
git checkout development public/doc/UserGuide.pdf 
git status
git commit -a -m '手工合并'
git push			
			]]>
			</screen>
			<para>从 testing 到 staging</para>
			<screen>
			<![CDATA[
git checkout staging
git pull
git checkout testing public/doc/UserGuide.pdf 
git commit -a -m '手工合并'
git push			
			]]>
			</screen>
			<para>从 stage 到 master</para>
			<screen>
			<![CDATA[
git checkout master
git pull
git checkout staging public/doc/UserGuide.pdf 
git commit -a -m '手工合并'
git push			
			]]>
			</screen>
		</section>
	</section>
	<section id="git.log">
		<title>git log</title>
		<screen>
		<![CDATA[
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ai) %C(bold blue)<%an>%Creset' --abbrev-commit
		]]>
		</screen>
		<section id="hash-object">
			<title>hash-object</title>
			<para>使用git命令计算文件的 sha-1 值</para>
			<screen>
		<![CDATA[
neo@MacBook-Pro ~ % echo 'test content' | git hash-object --stdin
d670460b4b4aece5915caf5c68d12f560a9fe3e4		
		]]>
			</screen>
		</section>
		<section>
			<title>一行显示 --oneline</title>
			<screen>
			<![CDATA[
Neo-iMac:test.netkiller.cn neo$ git log --name-status
commit 120f1bb6ff391c6b9b24899804f0292370873485 (HEAD -> main)
Author: 陈景峰 <neo@netkiller.cn>
Date:   Thu Dec 2 04:10:16 2021 +0000

    Initial commit

A       README.md
Neo-iMac:test.netkiller.cn neo$ git log --name-status --oneline
120f1bb (HEAD -> main) Initial commit
A       README.md			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
Neo-iMac:www.netkiller.cn neo$ git log --name-status --oneline --graph
* 7ca7fb7 (HEAD -> main, origin/main, origin/HEAD) sign
| M     README.md
* ba9a9a6 更新.gitlab-ci.yml文件
| M     .gitlab-ci.yml
* 8af932e 更新.gitlab-ci.yml文件
| M     .gitlab-ci.yml
* 6fe467b Update app.js
| M     app.js
* a019da0 更新.gitlab-ci.yml文件
| M     .gitlab-ci.yml
* 65afb8b 更新.gitlab-ci.yml文件
| M     .gitlab-ci.yml
* 061c78d 更新.gitlab-ci.yml文件
| A     .gitlab-ci.yml
* 149daf5 Add new file
| A     app.js
* e927196 更新README.md
  A     README.md			
			]]>
			</screen>
		</section>
		<section>
			<title>查看文件历史记录</title>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/devops % git log -- setup.py			
			]]>
			</screen>
			<para>diff 风格</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/devops % git log -p -- setup.py

commit abe282e68ad81e0e72cb8c700ba5c4db87c647a4
Author: neo <netkiller@msn.com>
Date:   Thu Sep 30 14:07:02 2021 +0800

    voice

diff --git a/setup.py b/setup.py
deleted file mode 100644
index 08f9d08..0000000
--- a/setup.py
+++ /dev/null
@@ -1,59 +0,0 @@
-import os,sys
-from setuptools import setup,find_packages
-sys.path.insert(0, os.path.abspath('lib'))
-from netkiller import __version__, __author__
-
-with open("README.md", "r") as fh:
-  long_description = fh.read()
-
-setup(
-       name="netkiller-devops",
-       version="0.2.4",			
			]]>
			</screen>
			<para>oneline 风格</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/devops % git log --pretty=oneline -- setup.py
abe282e68ad81e0e72cb8c700ba5c4db87c647a4 voice
fda886b0ae1526020c366cea2b747b3ceda18ff6 语音通知
cb2ca23a81b2384b79d7b32bb2e84782bb80edaf 企业微信通知
ac8e573123142a2856d44d13307dd4c46b134ceb fixed logging bug
1c609b9242c8f404ec4bba207dd8c9d836e591d4 docker 增加日志功能
			]]>
			</screen>
		</section>
	</section>
	<section id="git.reflog">
		<title>reflog</title>
		<para>reflog 类似我们软件中的 Undo/Redo ，就像使用 CMD+Z / CMD + SHIFT +Z 一样进行版本的切换和回滚。reflog 日志是保存在本地的，并不会 push 到远程，这就是他与 git log 的区别。</para>
		<para>git reflog 用法</para>
		<screen>
		<![CDATA[
Neo-iMac:test.netkiller.cn neo$ git reflog
120f1bb (HEAD -> main) HEAD@{0}: reset: moving to 120f1bb
9fcccf0 HEAD@{1}: commit: add tmp string
de5ca5d (origin/main, origin/HEAD) HEAD@{2}: reset: moving to HEAD
de5ca5d (origin/main, origin/HEAD) HEAD@{3}: pull: Fast-forward
120f1bb (HEAD -> main) HEAD@{4}: clone: from 192.168.30.5:netkiller.cn/test.netkiller.cn.git
		]]>
		</screen>
		<para>回滚到 120f1bb</para>
		<screen>
		<![CDATA[
Neo-iMac:test.netkiller.cn neo$ git reset --hard 120f1bb
HEAD is now at 120f1bb Initial commit		
		]]>
		</screen>
	</section>
	<section id="git-show">
		<title>git-show - Show various types of objects</title>
		<screen>
		<![CDATA[
$ git show
commit f6fda79f2f550ea3b2c1b483371ed5d12499ac35
Author: chen <openunix@163.com>
Date:   Sat Nov 1 08:50:45 2008 -0400

    add a new file

diff --git a/newfile b/newfile
new file mode 100644
index 0000000..b659464
--- /dev/null
+++ b/newfile
@@ -0,0 +1 @@
+hello world!!!
		]]>
		</screen>
		<section>
			<title>查看指定版本的文件内容</title>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/devops % git show fda886b0ae1526020c366cea2b747b3ceda18ff6:setup.py			
			]]>
			</screen>
		</section>
	</section>

	&section.git.submodule.xml;
	&section.git.lfs.xml;
	&section.git.config.xml;
	&section.git.other.xml;
	&section.git.faq.xml;
	
</chapter>