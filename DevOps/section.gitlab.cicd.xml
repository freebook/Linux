<?xml version="1.0" encoding="UTF-8"?>
<section id="gitlab.cicd">
	<title>CI / CD</title>
	<para>https://gitlab.com/gitlab-examples</para>
	<screen>
	<![CDATA[
Gitlab(仓库) -> Gitlab Runner（持续集成/部署） -> Remote host（远程部署主机）
	]]>
	</screen>
	<section id="gitlab.runner.user">
		<title>远程服务器配置</title>
		<para>为远程服务器创建 www 用户，我们将使用该用户远程部署，远程启动程序。</para>
		<screen>
			<![CDATA[
[root@netkiller ~]# groupadd -g 80 www
[root@netkiller ~]# adduser -o --uid 80 --gid 80 -G wheel -c "Web Application" www
[root@netkiller ~]# id www
uid=80(www) gid=80(www) groups=80(www),10(wheel)
[root@netkiller ~]# PASSWORD=$(cat /dev/urandom | tr -dc [:alnum:] | head -c 32)
[root@netkiller ~]# echo www:${PASSWORD} | chpasswd
[root@netkiller ~]# echo "www password: ${PASSWORD}"
www password: 0Uz1heY9v9KJyRKbvTi0VlAzfEoFW9GH	
			]]>
		</screen>
		<para></para>
		<screen>
		<![CDATA[
mkdir -p /opt/netkiller.cn/www.netkiller.cn
chown www:www -R /opt/netkiller.cn
		]]>
		</screen>
	</section>
	<section id="gitlab.runner.config">
		<title>配置 CI / CD</title>
		<para>进入项目设置界面，点击 Settings，再点击 CI / CD</para>
		<graphic format="png" fileref="../images/gitlab/cicd/CI-CD.png" width="1024" srccredit="neo" />
		<para>点击 Expand 按钮 展开 Runners</para>
		<graphic format="png" fileref="../images/gitlab/cicd/Runners.png" width="1024" srccredit="neo" />
		<para>这时可以看到 Set up a specific Runner manually, 后面会用到 http://192.168.1.96/ 和 zASzWwffenos6Jbbfsgu</para>
		<section>
			<title>安装 GitLab Runner</title>
			<subtitle>Install GitLab Runner</subtitle>
			<screen>
				<![CDATA[
curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh" | sudo bash
dnf install gitlab-runner

cp /etc/gitlab-runner/config.toml{,.original}

systemctl enable gitlab-runner			
				]]>
			</screen>
		</section>
		<section>
			<title>注册 gitlab-runner</title>

			<para>使用 SSH 登录 Gitlab runner 服务器，运行 gitlab-runner register</para>
			<screen>
			<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=92925 revision=ac2a293c version=11.11.2
Running in system-mode.                            
                                                   
Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):
http://192.168.1.96/
Please enter the gitlab-ci token for this runner:
zASzWwffenos6Jbbfsgu
Please enter the gitlab-ci description for this runner:
[localhost.localdomain]: 
Please enter the gitlab-ci tags for this runner (comma separated):

Registering runner... succeeded                     runner=zASzWwff
Please enter the executor: docker, docker-ssh, shell, ssh, docker-ssh+machine, parallels, virtualbox, docker+machine, kubernetes:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 
			]]>
			</screen>
			<para>返回 gitlab 查看注册状态</para>
			<graphic format="png" fileref="../images/gitlab/cicd/Runners-status.png" width="1024" srccredit="neo" />
		</section>
		<section>
			<title>并发链接数设置</title>
			<para>编辑 /etc/gitlab-runner/config.toml 配置文件，修改 concurrent 数量</para>
			<screen>
			<![CDATA[ 
[root@localhost ~]# grep con /etc/gitlab-runner/config.toml 
concurrent = 10			
			]]>
			</screen>
		</section>
	</section>

	<section id="gitlab.runner.shell">
		<title>Shell 执行器</title>
		<subtitle>Registering Runners</subtitle>
		<section>
			<title>注册 Gitlab Runner 为 Shell 执行器</title>
			<screen>
				<![CDATA[
[root@gitlab ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=1020084 revision=c1edb478 version=14.0.1
Running in system-mode.                            
                                                   
Enter the GitLab instance URL (for example, https://gitlab.com/):
http://git.netkiller.cn/
Enter the registration token:
DyKdKyaJaq5KN-irgNGz
Enter a description for the runner:
[gitlab]: 
Enter tags for the runner (comma-separated):

Registering runner... succeeded                     runner=DyKdKyaJ
Enter an executor: parallels, virtualbox, docker+machine, custom, docker, docker-ssh, shell, ssh, docker-ssh+machine, kubernetes:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 
				]]>
			</screen>
			<para>/etc/gitlab-runner/config.toml 配置文件</para>
			<screen>
				<![CDATA[
[root@gitlab ~]# cat /etc/gitlab-runner/config.toml
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800

[[runners]]
  name = "gitlab"
  url = "http://git.netkiller.cn/"
  token = "kVkzjDM74xZUN-aKbdPp"
  executor = "shell"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
    [runners.cache.azure]			
				]]>
			</screen>
		</section>
		<section>
			<title>生成 SSH 证书</title>
			<para>持续集成和部署运行在 gitlab-runner 用户下，切换到 gitlab-runner 用户</para>
			<screen>
			<![CDATA[
[root@gitlab ~]# su - gitlab-runner
Last login: Mon Jul 19 19:01:37 CST 2021			
			]]>
			</screen>
			<para>生成 SSH 证书</para>
			<screen>
				<![CDATA[
[gitlab-runner@gitlab ~]$ ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key (/home/gitlab-runner/.ssh/id_rsa): 
Created directory '/home/gitlab-runner/.ssh'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/gitlab-runner/.ssh/id_rsa.
Your public key has been saved in /home/gitlab-runner/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:l90LYBeSF9l9JHXJUHeO+IyvscCziz4C8vFNpJoKEjo gitlab-runner@gitlab
The key's randomart image is:
+---[RSA 3072]----+
|          ..o===B|
|          ..oo.**|
|          o.o . o|
|        .. = =   |
|.      oS o + +  |
|... o . .o   o . |
|E  o * o  + . o  |
|.o  + o o. + +   |
|  ..   oo.o.o    |
+----[SHA256]-----+
[gitlab-runner@gitlab ~]$ 				
				]]>
			</screen>
			<para>正常情况下，当我们链接一个 SSH 主机，会让我们输入 yes 确认继续链接。</para>
			<screen>
			<![CDATA[
[gitlab-runner@gitlab ~]$ ssh www@192.168.40.10
The authenticity of host '192.168.40.10 (192.168.40.10)' can't be established.
ECDSA key fingerprint is SHA256:xmFF266MPdXhnlAljS+QWhQsw6jOw1sOwQXRr/PHi2w.
Are you sure you want to continue connecting (yes/no/[fingerprint])?			
			]]>
			</screen>
			<para>配置 SSH</para>
			<screen>
			<![CDATA[
[gitlab-runner@gitlab ~]$ cat > ~/.ssh/config <<'EOF'
Host *
	ServerAliveInterval=30
	StrictHostKeyChecking no
	UserKnownHostsFile=/dev/null
EOF

chmod 600 -R ~/.ssh/config			
			]]>
			</screen>

			<para>授权远程执行 Shell</para>
			<screen>
			<![CDATA[
[gitlab-runner@gitlab ~]$ ssh-copy-id www@www.netkiller.cn	
			]]>
			</screen>
		</section>
		<section>
			<title>数据库环境</title>
			<para>在构建过程中，我们需要备份数据库/同步数据库，下面安装了一些所需的工具</para>
			<screen>
			<![CDATA[
[root@localhost ~]# dnf install -y mysql			
			]]>
			</screen>
			<para>设置数据库备份账号和密码，这里偷懒使用了 root 账号，生产环境请创建专用的备份账号。</para>
			<screen>
			<![CDATA[
[root@localhost ~]# su - gitlab-runner
Last login: Wed Sep  1 19:17:48 CST 2021
[gitlab-runner@localhost ~]$ vim ~/.my.cnf 
[gitlab-runner@localhost ~]$ cat ~/.my.cnf 
[mysql]
user=root
password=test

[mysqldump]
user=root
password=test			
			]]>
			</screen>
			<para>测试数据库是否畅通</para>
			<screen>
			<![CDATA[
[gitlab-runner@localhost ~]$ mysql -h mysql.netkiller.cn
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 37602
Server version: 8.0.21 Source distribution

Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> 			
			]]>
			</screen>
		</section>

		<section>
			<title>Java 环境</title>
			<para>JRE：java-11-openjdk</para>
			<para>JDK：java-11-openjdk-devel</para>
			<screen>
			<![CDATA[
[root@gitlab ~]# dnf install -y java-11-openjdk java-11-openjdk-devel
[root@gitlab ~]# dnf install -y maven
			]]>
			</screen>
			<para>修改 Maven 镜像路</para>
			<screen>
			<![CDATA[
[root@gitlab ~]# vim /etc/maven/settings.xml
  <mirrors>
    <mirror>
      <id>aliyun</id>
      <name>aliyun maven</name>
      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
      <mirrorOf>central</mirrorOf>
    </mirror>
  </mirrors>			
			]]>
			</screen>
			<section>
				<title>安装最新版 maven</title>
			
			<para>如果需要安装最新版本 maven 使用下面脚本。</para>
			<screen>
			<![CDATA[
#!/bin/bash

cd /usr/local/src/
wget https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.tar.gz
tar zxf apache-maven-3.8.2-bin.tar.gz
mv apache-maven-3.8.2 /srv/
rm -f /srv/apache-maven
ln -s /srv/apache-maven-3.8.2 /srv/apache-maven

alternatives --install /usr/local/bin/mvn apache-maven-3.8.2 /srv/apache-maven-3.8.2/bin/mvn 0	
			]]>
			</screen>
			<screen>
			<![CDATA[
[root@localhost src]# mvn -v
Apache Maven 3.8.2 (ea98e05a04480131370aa0c110b8c54cf726c06f)
Maven home: /srv/apache-maven-3.8.2
Java version: 17-ea, vendor: Red Hat, Inc., runtime: /usr/lib/jvm/java-17-openjdk-17.0.0.0.26-0.2.ea.el8.x86_64
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: "linux", version: "4.18.0-338.el8.x86_64", arch: "amd64", family: "unix"			
			]]>
			</screen>
			<para>apache-maven-3.8.2 配置</para>
			<screen>
			<![CDATA[
[root@localhost ~]# vim /srv/apache-maven/conf/settings.xml
  <mirrors>
    <!-- mirror
     | Specifies a repository mirror site to use instead of a given repository. The repository that
     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used
     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.
     |
    <mirror>
      <id>mirrorId</id>
      <mirrorOf>repositoryId</mirrorOf>
      <name>Human Readable Name for this Mirror.</name>
      <url>http://my.repository.com/repo/path</url>
    </mirror>
     -->
    <mirror>
      <id>maven-default-http-blocker</id>
      <mirrorOf>external:http:*</mirrorOf>
      <name>Pseudo repository to mirror external repositories initially using HTTP.</name>
      <url>http://0.0.0.0/</url>
      <blocked>true</blocked>
    </mirror>
  </mirrors>			
			]]>
			</screen>
			<para>apache-maven-3.8.2 默认会阻止其他镜像，需要会去掉 maven-default-http-blocker 配置</para>
			<para>切换到 gitlab-runner 用户，随便运行一下 mvn 命令，这样就会产生 ～/.m2 文件夹</para>
			<screen>
			<![CDATA[
[root@gitlab ~]# su - gitlab-runner		
[gitlab-runner@gitlab ~]$ mvn -v
			]]>
			</screen>
			</section>
			<section id="mvnd">
				<title>mvnd</title>
				<para>mvnd 是一个实验产品，用于替代 maven 编译速度比较快</para>
				<screen>
			<![CDATA[
cd /usr/local/src
wget https://github.com/apache/maven-mvnd/releases/download/0.7.1/mvnd-0.7.1-linux-amd64.zip
unzip mvnd-0.7.1-linux-amd64.zip 
mv mvnd-0.7.1-linux-amd64 /srv/mvnd-0.7.1
ln -s /srv/mvnd-0.7.1 /srv/mvnd

alternatives --remove mvnd /usr/local/bin/mvnd
alternatives --install /usr/local/bin/mvnd mvnd-0.7.1 /srv/mvnd-0.7.1/bin/mvnd 0
			]]>
				</screen>
				<para>修改配置文件 mvnd.properties 制定 JAVA_HOME</para>
				<screen>
			<![CDATA[
[root@localhost cloud.netkiller.cn]# grep java.home /srv/mvnd/conf/mvnd.properties 
java.home=/usr/lib/jvm/java	
			]]>
				</screen>
			</section>
		</section>
		<section>
			<title>NodeJS</title>
			<screen>
			<![CDATA[
[root@netkiller ~]# dnf install -y nodejs
			]]>
			</screen>
			<para>安装 cnpm</para>
			<screen>
			<![CDATA[
[root@netkiller ~]# npm config set registry https://registry.npm.taobao.org
[root@netkiller ~]# npm config get registry
https://registry.npm.taobao.org/
[root@netkiller ~]# npm install -g cnpm
			]]>
			</screen>
			<para>yarn</para>
			<screen>
		<![CDATA[
[root@netkiller ~]# curl -sL https://dl.yarnpkg.com/rpm/yarn.repo -o /etc/yum.repos.d/yarn.repo
[root@netkiller ~]# dnf install -y yarn
		]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
yarn config set registry https://registry.npm.taobao.org			
			]]>
			</screen>
			<para>pm2 进程管理</para>
			<screen>
		<![CDATA[
[root@netkiller ~]# npm install -g pm2	
		]]>
			</screen>
			<para>设置 pm2 启动开启</para>
			<screen>
		<![CDATA[
[root@netkiller ~]# pm2 startup
[root@netkiller ~]# pm2 save --force
[root@netkiller ~]# systemctl enable pm2-root
[root@netkiller ~]# systemctl start pm2-root
[root@netkiller ~]# systemctl status pm2-root
		]]>
			</screen>
		</section>
		<section>
			<title>Python 环境</title>
			<screen>
			<![CDATA[
[root@localhost ~]# dnf install -y python39			
			]]>
			</screen>
		</section>
		<section>
			<title>远程执行 sudo 提示密码</title>
			<screen>
			<![CDATA[
[gitlab-runner@gitlab api.sfzito.com]$ ssh www@192.168.40.10 "sudo ls"
Warning: Permanently added '192.168.40.10' (ECDSA) to the list of known hosts.
sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper
			]]>
			</screen>
			<para>解决方案一</para>
			<screen>
			<![CDATA[
ssh -t www@www.netkiller.cn "echo <yourpassword> |sudo -S <yourcommand>"
			]]>
			</screen>
			<para>解决方案二</para>
			<screen>
			<![CDATA[
cat > /etc/sudoers.d/www <<-EOF
www    ALL=(ALL)    NOPASSWD: ALL			
EOF
			]]>
			</screen>
		</section>
	</section>
	<section id="gitlab.runner.tags">
		<title>tags 的使用方法</title>
		<para>tags 是给 Gitlab Runner 打个标签，我的用法是多次注册，例如 shell 执行器的标签是 shell, Docker 执行器的标签是 docker，这样便可以在.gitlab-ci.yml文件中来选择使用那个执行器来触发操作。</para>
		<para>下面是 Shell 执行器</para>
		<screen>
		<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=268363 revision=58ba2b95 version=14.2.0
Running in system-mode.                            
                                                   
Enter the GitLab instance URL (for example, https://gitlab.com/):
http://git.netkiller.cn/
Enter the registration token:
k_SsvMQV397gAMaP_q1v
Enter a description for the runner:
[localhost.localdomain]: development
Enter tags for the runner (comma-separated):
shell
Registering runner... succeeded                     runner=k_SsvMQV
Enter an executor: docker, docker-ssh, virtualbox, docker-ssh+machine, kubernetes, custom, parallels, shell, ssh, docker+machine:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 		
		]]>
		</screen>
		<para>下面是 Docker 执行器</para>
		<screen>
		<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=268397 revision=58ba2b95 version=14.2.0
Running in system-mode.                            
                                                   
Enter the GitLab instance URL (for example, https://gitlab.com/):
http://git.netkiller.cn/
Enter the registration token:
k_SsvMQV397gAMaP_q1v
Enter a description for the runner:
[localhost.localdomain]: development
Enter tags for the runner (comma-separated):
docker
Registering runner... succeeded                     runner=k_SsvMQV
Enter an executor: custom, docker-ssh, parallels, shell, ssh, docker-ssh+machine, docker, virtualbox, docker+machine, kubernetes:
docker
Enter the default Docker image (for example, ruby:2.6):
maven:latest
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 		
		]]>
		</screen>
		<para>注册后的效果</para>
		<graphic format="png" fileref="../images/gitlab/cicd/gitlab-runner-tags.png" width="1024" srccredit="neo" />
		<screen>
		<![CDATA[
[root@localhost ~]# cat /etc/gitlab-runner/config.toml 
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800

[[runners]]
  name = "development"
  url = "http://git.netkiller.cn/"
  token = "EztTBypKRW5ibtC5rs2h"
  executor = "shell"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
    [runners.cache.azure]

[[runners]]
  name = "development"
  url = "http://git.netkiller.cn/"
  token = "51948sQbQsXGV-RxFMty"
  executor = "docker"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
    [runners.cache.azure]
  [runners.docker]
    tls_verify = false
    image = "maven:latest"
    privileged = false
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    volumes = ["/cache"]
    shm_size = 0		
		]]>
		</screen>
	</section>
	<section id="gitlab.runner.docker">
		<title>Docker 执行器</title>
		<para>gitlab-runner 用户需要 访问 /var/run/docker.sock 所以需要将 gitlab-runner 用户加入到 docker 组中。</para>
		<screen>
		<![CDATA[
[root@gitlab ~]# ll /var/run/docker.sock 
srw-rw---- 1 root docker 0 Nov 25 17:04 /var/run/docker.sock
		
[root@gitlab ~]# id gitlab-runner
uid=989(gitlab-runner) gid=984(gitlab-runner) groups=984(gitlab-runner)

[root@gitlab ~]# usermod -aG docker gitlab-runner

[root@gitlab ~]# id gitlab-runner
uid=989(gitlab-runner) gid=984(gitlab-runner) groups=984(gitlab-runner),991(docker)		
		]]>
		</screen>
		<para>注册 Docker 执行器</para>
		<screen>
		<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=268397 revision=58ba2b95 version=14.2.0
Running in system-mode.                            
                                                   
Enter the GitLab instance URL (for example, https://gitlab.com/):
http://git.netkiller.cn/
Enter the registration token:
k_SsvMQV397gAMaP_q1v
Enter a description for the runner:
[localhost.localdomain]: development
Enter tags for the runner (comma-separated):
docker
Registering runner... succeeded                     runner=k_SsvMQV
Enter an executor: custom, docker-ssh, parallels, shell, ssh, docker-ssh+machine, docker, virtualbox, docker+machine, kubernetes:
docker
Enter the default Docker image (for example, ruby:2.6):
maven:latest
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 		
		]]>
		</screen>
		<para>配置缓存</para>
		<screen>
		<![CDATA[
[root@localhost ~]# cat /etc/gitlab-runner/config.toml 
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800

[[runners]]
  name = "development"
  url = "http://192.168.30.5/"
  token = "EztTBypKRW5ibtC5rs2h"
  executor = "shell"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
    [runners.cache.azure]

[[runners]]
  name = "development"
  url = "http://192.168.30.5/"
  token = "GP-ozvd6uw2nDxyRohZ-"
  executor = "docker"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
    [runners.cache.azure]
  [runners.docker]
    tls_verify = false
    image = "maven:latest"
    privileged = false
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    volumes = ["/cache","/root/.m2"]
    pull_policy = ["never"]
    shm_size = 0		
		]]>
		</screen>
		<para>volumes = ["/cache","/root/.m2"] 将 Maven 仓库缓存</para>
		<para>.gitlab-ci.yaml 编排脚本</para>
		<screen>
		<![CDATA[
cache:
  untracked: true

stages:
  - build
  - test
  - deploy

build-job:
  image: maven:3.8.2-openjdk-17
  stage: build
  tags:
    - docker
  script:
    - mvn clean package -Dmaven.test.skip=true
    - ls target/*.jar    
  artifacts:
    name: "$CI_PROJECT_NAME"
    paths:
      - target/*.jar

test-job:
  image: maven:3.8.2-openjdk-17
  stage: test
  variables:
    GIT_STRATEGY: none
  tags:
    - docker    
  script:
    - mvn test

deploy-job:
  stage: deploy
  variables:
    GIT_STRATEGY: none
    HOST: 192.168.30.14
    DOCKER_HOST: unix:///var/run/docker.sock mvn clean install docker:build
  environment:
    name: development
    url: https://api.netkiller.cn
  only: 
    - development
  tags:
    - shell
  before_script:
    - mvn docker:build -DpushImage
    # - mvn docker:push
    - rm -rf *.sql.gz
    - mysqldump -hmysql.netkiller.cn test | gzip > test.$(date -u +%Y-%m-%d.%H:%M:%S).sql.gz
  artifacts:
    name: "$CI_PROJECT_NAME"
    paths:
      - ./*.sql.gz
  script:
    - scp src/main/docker/docker-compose.yaml www@$HOST:/opt/netkiller.cn/api.netkiller.cn/
    - ssh www@$HOST "sudo docker-compose -f /opt/netkiller.cn/api.netkiller.cn/docker-compose.yaml up"
    - ssh www@$HOST "sudo docker-compose -f /opt/netkiller.cn/api.netkiller.cn/docker-compose.yaml restart"		
		]]>
		</screen>
	</section>
	<section id="gitlab.runner.JaCoCo">
		<title>JaCoCo</title>
		<para>
			JaCoCo Java Code Coverage Library
			<ulink url="https://www.jacoco.org/jacoco/index.html" />
		</para>
		<para>pom.xml 中必须有单元测试依赖</para>
		<screen>
		<![CDATA[
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>		
		]]>
		</screen>
		<para>不能跳过单元测试</para>
		<screen>
		<![CDATA[
			 <plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>false</skip>
				</configuration>
			</plugin> 		
		]]>
		</screen>
		<para>添加 JaCoCo 插件</para>
		<screen>
		<![CDATA[
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>		
		]]>
		</screen>
		<para>最后运行 mvn test 调试一下，输入类似下面</para>
		<screen>
		<![CDATA[
[INFO] ------------------------< cn.netkiller:config >-------------------------
[INFO] Building config 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.7:prepare-agent (default) @ config ---
[INFO] argLine set to -javaagent:/Users/neo/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/Users/neo/workspace/microservice/config/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ config ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Using 'UTF-8' encoding to copy filtered properties files.
[INFO] Copying 1 resource
[INFO] Copying 6 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ config ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:3.2.0:testResources (default-testResources) @ config ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Using 'UTF-8' encoding to copy filtered properties files.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ config ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ config ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.7:report (report) @ config ---
[INFO] Loading execution data file /Users/neo/workspace/microservice/config/target/jacoco.exec
[INFO] Analyzed bundle 'config' with 1 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  3.335 s
[INFO] Finished at: 2021-10-22T15:52:36+08:00
[INFO] ------------------------------------------------------------------------		
		]]>
		</screen>
		<para>配置持续集成流水线 .gitlab-ci.yml 文件</para>
		<screen>
		<![CDATA[
cache:
  untracked: true

stages:
  - build
  - test
  - deploy
		
test-job:
  stage: test
  variables:
    GIT_STRATEGY: none
  only: 
    - tags
    - development
    - testing
  script:
    - mvn test
  after_script:
    - lrsync 'zito-admin/target/site/*' www@report.netkiller.cn:/opt/netkiller.cn/report.netkiller.cn
    - wechat -t 1 代码覆盖率报告 http://report.netkiller.cn/jacoco/index.html		
		]]>
		</screen>
	</section>
	<section>
		<title>数据库结构监控</title>
		<section id="what">
			<title>什么是数据库结构版本控制</title>
			<para>首先说说什么是数据库结构，什么事版本控制。</para>
			<para>数据库结构是指数据库表结构，数据库定义语言导出的DDL语句。主要由CREATE TABLE, DROP TABLE等等构成。</para>
			<para>再来说说什么事版本控制，如果你从事开发工作应该会很容易理解，版本控制就是记录每一次变化，可以随时查看历史记录，并可回撤到指定版本。</para>
		</section>
		<section id="why">
			<title>为什么要做数据库结构本版控制</title>
			<para>软件开发过程中需要常常对数据库结构作调整，这是无法避免的，甚至很多想起启动后，需求还不明确，开发人员只能按照所理解需求创建表。需求往往会发生变化，一旦变化，代码需要修改，表结构也避免不了。
				我们常常刚改好数据库结构，需求部门有发来通知，不用修改了，维持原有设计。甚至是过了几周再次回撤。
			</para>
			<para>所以我们要将数据库结构的变化进行版本控制，通常的做法是DBA人工管理，但我觉完全可以自动化的工作，没有必要浪费人力资源，且自动化不会犯错更稳定，仅仅需要人工定期查看工作状态即可。</para>
		</section>
		<section id="when">
			<title>何时做数据库结构本版控制</title>
			<para>任何时候都可以部署下面的脚本，对现有系统无任何影响。</para>
		</section>
		<section id="where">
			<title>在哪里做数据库结构本版控制</title>
			<para>可以在版本控制服务器上，建议GIT仓库push到远程。</para>
		</section>
		<section id="who">
			<title>谁来负责数据库结构本版控制</title>
			<para>DBA与配置管理员都可以做，通常DBA不接触版本库这块，建议创建一个backup用户给配置管理员。</para>
		</section>
		<section id="how">
			<title>怎样做数据库结构本版控制</title>
			<section>
				<title>安装脚本</title>
				<para>首先下载脚本 https://github.com/oscm/shell/blob/master/backup/backup.mysql.struct.sh</para>
				<screen><![CDATA[
wget https://raw.githubusercontent.com/oscm/shell/master/backup/backup.mysql.struct.sh
mv backup.mysql.struct.sh /usr/local/bin
chmod +x /usr/local/bin/backup.mysql.struct
			]]></screen>
				<para>创建备份用户</para>
				<screen><![CDATA[
CREATE USER 'backup'@'localhost' IDENTIFIED BY 'chen';
GRANT SELECT, LOCK TABLES  ON *.* TO 'backup'@'localhost';
FLUSH PRIVILEGES;
SHOW GRANTS FOR 'backup'@'localhost';
			]]></screen>
				<para>配置脚本</para>
				<screen><![CDATA[
BACKUP_HOST="localhost"			数据库主机
BACKUP_USER="backup"			备份用户
BACKUP_PASS="chen"				备份密码
BACKUP_DBNAME="neo netkiller"	版本控制那些数据库，多个数据库使用空格分隔
BACKUP_DIR=~/backup				数据库结构放在那里
GIT=git@gitlab.netkiller.cn:netkiller.cn/db.netkiller.cn.git
			]]></screen>
				<para>初始化仓库</para>
				<screen><![CDATA[
# /usr/local/bin/backup.mysql.struct init
Initialized empty Git repository in /www/database/struct/.git/
			]]></screen>
			</section>
			<section>
				<title>启动脚本，停止脚本</title>
				<screen><![CDATA[
# /usr/local/bin/backup.mysql.struct
Usage: /usr/local/bin/backup.mysql.struct {init|start|stop|status|restart}
			]]></screen>
				<para>开始脚本</para>
				<screen><![CDATA[
# /usr/local/bin/backup.mysql.struct start
			]]></screen>
				<para>查看状态</para>
				<screen><![CDATA[
# /usr/local/bin/backup.mysql.struct status
 9644 pts/1    S      0:00 /bin/bash /usr/local/bin/backup.mysql.struct start
			]]></screen>
				<para>停止脚本</para>
				<screen><![CDATA[
# /usr/local/bin/backup.mysql.struct status
			]]></screen>
			</section>
			<section>
				<title>查看历史版本</title>
				<para>通过 git log 命令查看历史版本</para>
				<screen>
			<![CDATA[
# cd /www/database/struct/
# git status
# On branch master
nothing to commit (working directory clean)
# git log
commit d38fc624c21cad0e2f55f0228bff0c1be981827c
Author: root <root@slave.example.com>
Date:   Wed Dec 17 12:33:55 2014 +0800
    2014-12-17.04:33:55			
			]]>
				</screen>
				<para>
					这里仅仅将数据库结构版本控制，关于版本控制软件更多细节，延伸阅读
					<ulink url="http://netkiller.github.io/version/index.html">《Netkiller Version 手札》</ulink>
				</para>
			</section>
		</section>
		<section>
			<title>CI/CD 配置</title>
			<screen>
			<![CDATA[
stages:
  - watch
  - backup

build-job:
  stage: watch
  script:
    - wechat -t 10 数据库结构变更通知 "http://gitlab.netkiller.cn/netkiller.cn/db.netkiller.cn/-/commit/${CI_COMMIT_SHA}"
    - wechat -t 10 "$(git diff HEAD^)"

deploy-job: 
  stage: backup
  script:
    - sqldump development			
			]]>
			</screen>
		</section>
	</section>

</section>