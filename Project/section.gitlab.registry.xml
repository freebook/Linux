<?xml version="1.0" encoding="UTF-8"?>
<section id="gitlab.registry">
	<title>软件包与镜像库</title>
	<section>
		<title>Maven 仓库</title>
		<para>项目目录下面创建 ci_settings.xml 文件</para>
		<screen>
		<![CDATA[
<settings xmlns="http://maven.apache.org/SETTINGS/1.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd">
  <servers>
    <server>
      <id>gitlab-maven</id>
      <configuration>
        <httpHeaders>
          <property>
            <name>Job-Token</name>
            <value>${env.CI_JOB_TOKEN}</value>
          </property>
        </httpHeaders>
      </configuration>
    </server>
  </servers>
</settings>		
		]]>
		</screen>
		<para>修改 pom.xml 文件添加下面内容</para>
		<screen>
		<![CDATA[
<repositories>
  <repository>
    <id>gitlab-maven</id>
    <url>${env.CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven</url>
  </repository>
</repositories>
<distributionManagement>
  <repository>
    <id>gitlab-maven</id>
    <url>${CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven</url>
  </repository>
  <snapshotRepository>
    <id>gitlab-maven</id>
    <url>${CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven</url>
  </snapshotRepository>
</distributionManagement>		
		]]>
		</screen>
		<para>修改 .gitlab-ci.yml 添加 Maven 部署命令</para>
		<para>Docker 执行器</para>
		<screen>
		<![CDATA[
deploy:
  image: maven:3.6-jdk-11
  script:
    - 'mvn deploy -s ci_settings.xml'
  only:
    - main		
		]]>
		</screen>
		<para>Shell 执行器</para>
		<screen>
		<![CDATA[
deploy:
  script:
    - 'mvn deploy -s ci_settings.xml'
  only:
    - main		
		]]>
		</screen>
		<para>Maven 部署的软件包</para>
		<graphic format="png" fileref="../images/gitlab/package/1.png" width="1024" srccredit="neo" />
		<para>进入查看详情</para>
		<graphic format="png" fileref="../images/gitlab/package/2.png" width="1024" srccredit="neo" />
	</section>
	<section>
		<title>Docker registry</title>
		<!-- https://docs.gitlab.com/ee/user/packages/container_registry/ -->
		<para>Gitlab 默认不打开 docker registry 的功能，需要修改配置打开。</para>
		<para>修改配置 /etc/gitlab/gitlab.rb 文件，将 registry_external_url 的值修改为 http://registry.netkiller.cn</para>
		<tip>注意不能使用IP地址，如果使用IP地址必须配合端口号，且端口不能跟 Gitlab 冲突。</tip>
		<screen>
		<![CDATA[
[root@gitlab ~]# grep 'registry_external_url' /etc/gitlab/gitlab.rb
# registry_external_url 'https://registry.example.com'
registry_external_url 'http://registry.netkiller.cn'		
		]]>
		</screen>
		<para>让配置生效</para>
		<screen>
		<![CDATA[
[root@gitlab ~]# gitlab-ctl reconfigure
		]]>
		</screen>
		<para>检查配置文件</para>
		<screen>
		<![CDATA[
[root@gitlab ~]# cat /var/opt/gitlab/nginx/conf/gitlab-registry.conf 
# This file is managed by gitlab-ctl. Manual changes will be
# erased! To change the contents below, edit /etc/gitlab/gitlab.rb
# and run `sudo gitlab-ctl reconfigure`.

## Lines starting with two hashes (##) are comments with information.
## Lines starting with one hash (#) are configuration parameters that can be uncommented.
##
###################################
##         configuration         ##
###################################


server {
  listen *:80;
  server_name registry.netkiller.cn;
  server_tokens off; ## Don't show the nginx version number, a security best practice

  client_max_body_size 0;
  chunked_transfer_encoding on;


  ## Real IP Module Config
  ## http://nginx.org/en/docs/http/ngx_http_realip_module.html

  ## HSTS Config
  ## https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/
  add_header Strict-Transport-Security "max-age=63072000";

  access_log  /var/log/gitlab/nginx/gitlab_registry_access.log gitlab_access;
  error_log   /var/log/gitlab/nginx/gitlab_registry_error.log error;

  location / {

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto http;

    proxy_read_timeout                  900;
    proxy_cache off;
    proxy_buffering off;
    proxy_request_buffering off;
    proxy_http_version 1.1;

    proxy_pass          http://localhost:5000;
  }

  
}		
		]]>
		</screen>
		<graphic format="png" fileref="../images/gitlab/registry/1.png" width="1024" srccredit="neo" />
		<para>配置 Docker 的 daemon.json 配置文件</para>
		<screen>
		<![CDATA[
{
  "experimental": false,
  "features": {
    "buildkit": true
  },
  "builder": {
    "gc": {
      "defaultKeepStorage": "20GB",
      "enabled": true
    }
  },
  "insecure-registries": [
    "registry.netkiller.cn"
  ]
}		
		]]>
		</screen>
		<para>重启 Docker 让 daemon.json</para>
		<screen>
		<![CDATA[
[root@gitlab ~]# systemctl restart docker		
		]]>
		</screen>
		<para>我使用的 Docker Desktop for Mac，在 GUI 中配置 daemon.json 然后重启 Docker Desktop</para>
		<para>配置 /etc/hosts 文件</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ grep 'registry' /etc/hosts
192.168.30.5	registry.netkiller.cn		
		]]>
		</screen>
		<para>Docker 登陆到 registry.netkiller.cn，登陆可以使用 gitlab 用户和密码，可以使用“个人访问令牌”和“部署令牌”，创建令牌需要给予 read_registry 和 write_registry 权限。</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ docker login registry.netkiller.cn -u neo 
Password: 
Login Succeeded	
		]]>
		</screen>
		<para>登陆成功会显示 Login Succeeded 并且会在 ~/.docker/config.json 产生配置项</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ cat ~/.docker/config.json
{
	"auths": {
		"https://index.docker.io/v1/": {},
		"registry.netkiller.cn": {}
	},
	"credsStore": "desktop"
}
		]]>
		</screen>
		<para>构建镜像</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ docker build -t registry.netkiller.cn/netkiller.cn/java .
[+] Building 4.5s (9/9) FINISHED                                                                                                                                                                                                                                          
 => [internal] load build definition from Dockerfile                                                                                                                                                                                                                 0.3s
 => => transferring dockerfile: 37B                                                                                                                                                                                                                                  0.0s
 => [internal] load .dockerignore                                                                                                                                                                                                                                    0.4s
 => => transferring context: 2B                                                                                                                                                                                                                                      0.0s
 => [internal] load metadata for docker.io/library/nginx:latest                                                                                                                                                                                                      3.1s
 => [auth] library/nginx:pull token for registry-1.docker.io                                                                                                                                                                                                         0.0s
 => [1/4] FROM docker.io/library/nginx:latest@sha256:dfef797ddddfc01645503cef9036369f03ae920cac82d344d58b637ee861fda1                                                                                                                                                0.0s
 => CACHED [2/4] RUN apt update -y && apt install -y procps                                                                                                                                                                                                          0.0s
 => CACHED [3/4] RUN apt install -y iproute2 net-tools                                                                                                                                                                                                               0.0s
 => CACHED [4/4] WORKDIR /opt                                                                                                                                                                                                                                        0.0s
 => exporting to image                                                                                                                                                                                                                                               0.4s
 => => exporting layers                                                                                                                                                                                                                                              0.0s
 => => writing image sha256:549089448b9450a2515fd4653f35c4bb828079624edcbdbc2f0607ba3656598b                                                                                                                                                                         0.0s
 => => naming to registry.netkiller.cn/netkiller.cn/java		
		]]>
		</screen>
		<para>推送镜像</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ docker push registry.netkiller.cn/netkiller.cn/java
Using default tag: latest
The push refers to repository [registry.netkiller.cn/netkiller.cn/java]
5f70bf18a086: Pushed 
2d4c9573c0b6: Pushed 
a8935bae4a3d: Pushed 
280fbd619253: Pushed 
921ee7f55927: Pushed 
fc199aaed79a: Pushed 
38aec0f8e5ed: Pushed 
ea56d6ebf7e5: Pushed 
e8b689711f21: Pushed 
latest: digest: sha256:fbb365b3dbb302bc29ef2253fbf6b9acced54fa5337fd1cb804a52713f46a0a5 size: 2199	
		]]>
		</screen>
		<para>推送完成后，前往“容器镜像库”可以看到镜像</para>
		<graphic format="png" fileref="../images/gitlab/registry/2.png" width="1024" srccredit="neo" />
		<para>查看镜像</para>
		<graphic format="png" fileref="../images/gitlab/registry/3.png" width="1024" srccredit="neo" />
	</section>
	<section>
		<title>Python Pypi 仓库</title>
		<section>
			<title>个人访问令牌</title>
			<para>创建访问令牌</para>
			<graphic format="png" fileref="../images/gitlab/package/python/1.png" width="1024" srccredit="neo" />
			<tip>需要勾选 ☑️ api, read_api, read_registry, write_registry 四个授权️</tip>
			<graphic format="png" fileref="../images/gitlab/package/python/1-1.png" width="1024" srccredit="neo" />
			<para>将令牌复制出来保存好</para>
		</section>
		<section>
			<title>手工上传包</title>
			<para>创建或编辑 ~/.pypirc 文件</para>
			<screen>
		<![CDATA[
[distutils]
index-servers =
    gitlab

[gitlab]
repository = https://gitlab.example.com/api/v4/projects/<project_id>/packages/pypi
username = <your_personal_access_token_name>
password = <your_personal_access_token>		
		]]>
			</screen>
			<para>用户和密码，可以使用个人访问令牌、部署令牌和 Gitlab 用户密码</para>
			<para></para>
			<screen>
		<![CDATA[
<project_id> 替换成你的项目URL 或者 项目 ID

例如我的项目地址是：http://192.168.30.5/netkiller.cn/python.netkiller.cn/-/packages

repository = https://gitlab.example.com/api/v4/projects/netkiller.cn%2Fpython.netkiller.cn/packages/pypi	

将 “/” 替换成 “%2F”
		]]>
			</screen>
			<para>查看项目 ID</para>
			<graphic format="png" fileref="../images/gitlab/package/python/projectid.png" width="1024" srccredit="neo" />
			<para>下面是我配置，仅供参考</para>
			<screen>
		<![CDATA[
Neo-iMac:devops neo$ cat ~/.pypirc 
[distutils]
index-servers =
    gitlab

[gitlab]
repository = http://192.168.30.5/api/v4/projects/30/packages/pypi
username=pypi
password=QFatUEzEybBR6gxxF5K2		
		]]>
			</screen>
			<para>上传命令</para>
			<screen>
		<![CDATA[
Neo-iMac:devops neo$ python3 setup.py sdist bdist_wheel
Neo-iMac:devops neo$ twine upload --repository gitlab dist/*
		]]>
			</screen>
			<para>上传演示</para>
			<screen>
		<![CDATA[
Neo-iMac:devops neo$ twine upload --repository gitlab dist/netkiller-devops-0.3.*
Uploading distributions to http://192.168.30.5/api/v4/projects/30/packages/pypi
Uploading netkiller-devops-0.3.0.tar.gz
100%|███████████████████████████████████████████████████████████████████| 37.3k/37.3k [00:00<00:00, 426kB/s]
Uploading netkiller-devops-0.3.1.tar.gz
100%|███████████████████████████████████████████████████████████████████| 37.3k/37.3k [00:00<00:00, 462kB/s]
Uploading netkiller-devops-0.3.2.tar.gz
100%|███████████████████████████████████████████████████████████████████| 37.3k/37.3k [00:00<00:00, 436kB/s]
Uploading netkiller-devops-0.3.3.tar.gz
100%|███████████████████████████████████████████████████████████████████| 37.5k/37.5k [00:00<00:00, 486kB/s]
Uploading netkiller-devops-0.3.4.tar.gz
100%|███████████████████████████████████████████████████████████████████| 37.4k/37.4k [00:00<00:00, 475kB/s]
Uploading netkiller-devops-0.3.5.tar.gz
100%|███████████████████████████████████████████████████████████████████| 37.5k/37.5k [00:00<00:00, 490kB/s]
Neo-iMac:devops neo$ 		
		]]>
			</screen>
			<para>查看软件包</para>
			<graphic format="png" fileref="../images/gitlab/package/python/2.png" width="1024" srccredit="neo" />
			<para>查看详细信息</para>
			<graphic format="png" fileref="../images/gitlab/package/python/3.png" width="1024" srccredit="neo" />
		</section>
		<section>
			<title>在持续集成中配置</title>
			<para>登陆 gitlab-runner 所在的服务器，如果只有 python 项目，建议使用 root 账号安装 twine 包</para>
			<screen>
			<![CDATA[
[root@localhost ~]# pip3 install twine
			]]>
			</screen>
			<para>如果 gitlab-runner 是公共服务器，上面还会持续部署其他项目，为了项目更好隔离，可以使用 --user 参数，本地化安装</para>
			<para>切换到 gitlab-runner，因为编译和打包，上传包都需要工作在 gitlab-runner 账号下面</para>
			<screen>
			<![CDATA[
[root@localhost ~]# su - gitlab-runner
			]]>
			</screen>
			<para>安装 twine wheel 包</para>
			<screen>
			<![CDATA[
[gitlab-runner@localhost ~]$ pip3 install --user twine wheel
			]]>
			</screen>
			<para>twine 将会被安装到 ~/.local/bin/twine 目录</para>
			<screen>
			<![CDATA[
[gitlab-runner@localhost ~]$ ls ~/.local/bin/twine 
/home/gitlab-runner/.local/bin/twine			
			]]>
			</screen>
			<para>当然也可以将 twine wheel 放在 .gitlab-ci.yml 文件中，只是每次都安装一次，会影响构建性能。</para>
			<screen>
			<![CDATA[
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - dist/
stages: 
  - build
  - test
  - deploy

build-job:
  stage: build
  tags:
    - shell
  before_script:
    - pip3 install --user netkiller-devops
    - pip3 install --user wheel twine
  script:
    - python3 setup.py sdist bdist_wheel
  # after_script:

deploy-job:
  stage: deploy
  tags:
    - shell
  before_script:
    - |
      cat > ~/.pypirc <<EOF
      [distutils]
      index-servers =
          gitlab

      [gitlab]
      repository = http://192.168.30.5/api/v4/projects/30/packages/pypi
      username=pypi
      password=TUyGJW89wkdfjdh7QWAe
      EOF
    - cat  ~/.pypirc
  script:
    - ~/.local/bin/twine upload --repository gitlab dist/*			
			]]>
			</screen>
		</section>
	</section>
	<section>
		<title>Node JS</title>
		<para>创建项目访问令牌，这里不再赘述，前面已经讲过。</para>
		<para>登陆到 gitlab-runner 服务器，安装 Node JS 环境</para>
		<screen>
		<![CDATA[
[root@localhost ~]# dnf install -y nodejs
[root@localhost ~]# npm install -g --registry=https://registry.npm.taobao.org cnpm
[root@localhost ~]# npm install -g --registry=https://registry.npm.taobao.org yarn2
		]]>
		</screen>
		<para>打开 Node JS 项目，编辑 package.json 文件，修改项目名称 加入 scope 例如 "name": "demo" 改为 "name": "@netkiller/demo"，设置一个版本号 "version": "0.0.1"，然后将  "private": true 改为  "private": false</para>
		<screen>
		<![CDATA[
{
  "name": "@netkiller/demo",
  "version": "0.0.1",
  "private": false,
  "scripts": {
    "start": "node ./bin/www",
    "test": "mocha"
  },
  "dependencies": {
    "cookie-parser": "~1.4.3",
    "debug": "~2.6.9",
    "express": "~4.16.0",
    "http-errors": "~1.6.2",
    "morgan": "~1.9.0",
    "pug": "2.0.0-beta11"
  },
  "devDependencies": {
    "mocha": "^5.1.1",
    "supertest": "^3.0.0"
  }
}
		]]>
		</screen>
		<screen>
		<![CDATA[
cache:
  paths:
    - node_modules
    - dist

stages:
  - build
  - test
  - deploy

build-job:
  stage: build
  tags:
    - shell
  script:
    - cnpm install

deploy-job:
  stage: deploy
  tags:
    - shell  
  script:
    - |
      echo -e "
      @netkiller:registry=http://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/
      //${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}
      " > .npmrc
    - cnpm publish		
		]]>
		</screen>
	</section>
</section>