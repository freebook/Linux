<?xml version="1.0" encoding="UTF-8"?>
<section id="gitlab.registry">
	<title>软件包与镜像库</title>
	<section>
		<title>Maven 仓库</title>
		<para>项目目录下面创建 ci_settings.xml 文件</para>
		<screen>
		<![CDATA[
<settings xmlns="http://maven.apache.org/SETTINGS/1.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd">
  <servers>
    <server>
      <id>gitlab-maven</id>
      <configuration>
        <httpHeaders>
          <property>
            <name>Job-Token</name>
            <value>${env.CI_JOB_TOKEN}</value>
          </property>
        </httpHeaders>
      </configuration>
    </server>
  </servers>
</settings>		
		]]>
		</screen>
		<para>修改 pom.xml 文件添加下面内容</para>
		<screen>
		<![CDATA[
<repositories>
  <repository>
    <id>gitlab-maven</id>
    <url>${env.CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven</url>
  </repository>
</repositories>
<distributionManagement>
  <repository>
    <id>gitlab-maven</id>
    <url>${CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven</url>
  </repository>
  <snapshotRepository>
    <id>gitlab-maven</id>
    <url>${CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven</url>
  </snapshotRepository>
</distributionManagement>		
		]]>
		</screen>
		<para>修改 .gitlab-ci.yml 添加 Maven 部署命令</para>
		<para>Docker 执行器</para>
		<screen>
		<![CDATA[
deploy:
  image: maven:3.6-jdk-11
  script:
    - 'mvn deploy -s ci_settings.xml'
  only:
    - main		
		]]>
		</screen>
		<para>Shell 执行器</para>
		<screen>
		<![CDATA[
deploy:
  script:
    - 'mvn deploy -s ci_settings.xml'
  only:
    - main		
		]]>
		</screen>
		<para>Maven 部署的软件包</para>
		<graphic format="png" fileref="../images/gitlab/package/1.png" width="1024" srccredit="neo" />
		<para>进入查看详情</para>
		<graphic format="png" fileref="../images/gitlab/package/2.png" width="1024" srccredit="neo" />
	</section>
	<section>
		<title>Docker registry</title>
		<!-- https://docs.gitlab.com/ee/user/packages/container_registry/ -->
		<para>Gitlab 默认不打开 docker registry 的功能，需要修改配置打开。</para>
		<para>修改配置 /etc/gitlab/gitlab.rb 文件，将 registry_external_url 的值修改为 http://registry.netkiller.cn</para>
		<tip>注意不能使用IP地址，如果使用IP地址必须配合端口号，且端口不能跟 Gitlab 冲突。</tip>
		<screen>
		<![CDATA[
[root@gitlab ~]# grep 'registry_external_url' /etc/gitlab/gitlab.rb
# registry_external_url 'https://registry.example.com'
registry_external_url 'http://registry.netkiller.cn'		
		]]>
		</screen>
		<para>让配置生效</para>
		<screen>
		<![CDATA[
[root@gitlab ~]# gitlab-ctl reconfigure
		]]>
		</screen>
		<para>检查配置文件</para>
		<screen>
		<![CDATA[
[root@gitlab ~]# cat /var/opt/gitlab/nginx/conf/gitlab-registry.conf 
# This file is managed by gitlab-ctl. Manual changes will be
# erased! To change the contents below, edit /etc/gitlab/gitlab.rb
# and run `sudo gitlab-ctl reconfigure`.

## Lines starting with two hashes (##) are comments with information.
## Lines starting with one hash (#) are configuration parameters that can be uncommented.
##
###################################
##         configuration         ##
###################################


server {
  listen *:80;
  server_name registry.netkiller.cn;
  server_tokens off; ## Don't show the nginx version number, a security best practice

  client_max_body_size 0;
  chunked_transfer_encoding on;


  ## Real IP Module Config
  ## http://nginx.org/en/docs/http/ngx_http_realip_module.html

  ## HSTS Config
  ## https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/
  add_header Strict-Transport-Security "max-age=63072000";

  access_log  /var/log/gitlab/nginx/gitlab_registry_access.log gitlab_access;
  error_log   /var/log/gitlab/nginx/gitlab_registry_error.log error;

  location / {

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto http;

    proxy_read_timeout                  900;
    proxy_cache off;
    proxy_buffering off;
    proxy_request_buffering off;
    proxy_http_version 1.1;

    proxy_pass          http://localhost:5000;
  }

  
}		
		]]>
		</screen>
		<graphic format="png" fileref="../images/gitlab/registry/1.png" width="1024" srccredit="neo" />
		<para>配置 Docker 的 daemon.json 配置文件</para>
		<screen>
		<![CDATA[
{
  "experimental": false,
  "features": {
    "buildkit": true
  },
  "builder": {
    "gc": {
      "defaultKeepStorage": "20GB",
      "enabled": true
    }
  },
  "insecure-registries": [
    "registry.netkiller.cn"
  ]
}		
		]]>
		</screen>
		<para>重启 Docker 让 daemon.json</para>
		<screen>
		<![CDATA[
[root@gitlab ~]# systemctl restart docker		
		]]>
		</screen>
		<para>我使用的 Docker Desktop for Mac，在 GUI 中配置 daemon.json 然后重启 Docker Desktop</para>
		<para>配置 /etc/hosts 文件</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ grep 'registry' /etc/hosts
192.168.30.5	registry.netkiller.cn		
		]]>
		</screen>
		<para>Docker 登陆到 registry.netkiller.cn，登陆可以使用 gitlab 用户和密码，可以使用“个人访问令牌”和“部署令牌”，创建令牌需要给予 read_registry 和 write_registry 权限。</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ docker login registry.netkiller.cn -u neo 
Password: 
Login Succeeded	
		]]>
		</screen>
		<para>登陆成功会显示 Login Succeeded 并且会在 ~/.docker/config.json 产生配置项</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ cat ~/.docker/config.json
{
	"auths": {
		"https://index.docker.io/v1/": {},
		"registry.netkiller.cn": {}
	},
	"credsStore": "desktop"
}
		]]>
		</screen>
		<para>构建镜像</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ docker build -t registry.netkiller.cn/netkiller.cn/java .
[+] Building 4.5s (9/9) FINISHED                                                                                                                                                                                                                                          
 => [internal] load build definition from Dockerfile                                                                                                                                                                                                                 0.3s
 => => transferring dockerfile: 37B                                                                                                                                                                                                                                  0.0s
 => [internal] load .dockerignore                                                                                                                                                                                                                                    0.4s
 => => transferring context: 2B                                                                                                                                                                                                                                      0.0s
 => [internal] load metadata for docker.io/library/nginx:latest                                                                                                                                                                                                      3.1s
 => [auth] library/nginx:pull token for registry-1.docker.io                                                                                                                                                                                                         0.0s
 => [1/4] FROM docker.io/library/nginx:latest@sha256:dfef797ddddfc01645503cef9036369f03ae920cac82d344d58b637ee861fda1                                                                                                                                                0.0s
 => CACHED [2/4] RUN apt update -y && apt install -y procps                                                                                                                                                                                                          0.0s
 => CACHED [3/4] RUN apt install -y iproute2 net-tools                                                                                                                                                                                                               0.0s
 => CACHED [4/4] WORKDIR /opt                                                                                                                                                                                                                                        0.0s
 => exporting to image                                                                                                                                                                                                                                               0.4s
 => => exporting layers                                                                                                                                                                                                                                              0.0s
 => => writing image sha256:549089448b9450a2515fd4653f35c4bb828079624edcbdbc2f0607ba3656598b                                                                                                                                                                         0.0s
 => => naming to registry.netkiller.cn/netkiller.cn/java		
		]]>
		</screen>
		<para>推送镜像</para>
		<screen>
		<![CDATA[
Neo-iMac:nginx neo$ docker push registry.netkiller.cn/netkiller.cn/java
Using default tag: latest
The push refers to repository [registry.netkiller.cn/netkiller.cn/java]
5f70bf18a086: Pushed 
2d4c9573c0b6: Pushed 
a8935bae4a3d: Pushed 
280fbd619253: Pushed 
921ee7f55927: Pushed 
fc199aaed79a: Pushed 
38aec0f8e5ed: Pushed 
ea56d6ebf7e5: Pushed 
e8b689711f21: Pushed 
latest: digest: sha256:fbb365b3dbb302bc29ef2253fbf6b9acced54fa5337fd1cb804a52713f46a0a5 size: 2199	
		]]>
		</screen>
		<para>推送完成后，前往“容器镜像库”可以看到镜像</para>
		<graphic format="png" fileref="../images/gitlab/registry/2.png" width="1024" srccredit="neo" />
		<para>查看镜像</para>
		<graphic format="png" fileref="../images/gitlab/registry/3.png" width="1024" srccredit="neo" />
	</section>
</section>