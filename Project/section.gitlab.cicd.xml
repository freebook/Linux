<?xml version="1.0" encoding="UTF-8"?>
<section id="gitlab.cicd">
	<title>CI / CD</title>
	<para>https://gitlab.com/gitlab-examples</para>
	<screen>
	<![CDATA[
Gitlab(仓库) -> Gitlab Runner（持续集成/部署） -> Remote host（远程部署主机）
	]]>
	</screen>
	<section>
		<title>远程服务器配置</title>
		<para>为远程服务器创建 www 用户，我们将使用该用户远程部署，远程启动程序。</para>
		<screen>
			<![CDATA[
[root@netkiller ~]# groupadd -g 80 www
[root@netkiller ~]# adduser -o --uid 80 --gid 80 -G wheel -c "Web Application" www
[root@netkiller ~]# id www
uid=80(www) gid=80(www) groups=80(www),10(wheel)
[root@netkiller ~]# PASSWORD=$(cat /dev/urandom | tr -dc [:alnum:] | head -c 32)
[root@netkiller ~]# echo www:${PASSWORD} | chpasswd
[root@netkiller ~]# echo "www password: ${PASSWORD}"
www password: 0Uz1heY9v9KJyRKbvTi0VlAzfEoFW9GH	
			]]>
		</screen>
		<para></para>
		<screen>
		<![CDATA[
mkdir -p /opt/netkiller.cn/www.netkiller.cn
chown www:www -R /opt/netkiller.cn
		]]>
		</screen>
	</section>
	<section>
		<title>配置 CI / CD</title>
		<para>进入项目设置界面，点击 Settings，再点击 CI / CD</para>
		<graphic format="png" fileref="../images/gitlab/cicd/CI-CD.png" width="1024" srccredit="neo" />
		<para>点击 Expand 按钮 展开 Runners</para>
		<graphic format="png" fileref="../images/gitlab/cicd/Runners.png" width="1024" srccredit="neo" />
		<para>这时可以看到 Set up a specific Runner manually, 后面会用到 http://192.168.1.96/ 和 zASzWwffenos6Jbbfsgu</para>
		<section>
			<title>安装 GitLab Runner</title>
			<subtitle>Install GitLab Runner</subtitle>
			<screen>
				<![CDATA[
curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh" | sudo bash
dnf install gitlab-runner

cp /etc/gitlab-runner/config.toml{,.original}

systemctl enable gitlab-runner			
				]]>
			</screen>
		</section>
		<section>
			<title>注册 gitlab-runner</title>

			<para>使用 SSH 登录 Gitlab runner 服务器，运行 gitlab-runner register</para>
			<screen>
			<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=92925 revision=ac2a293c version=11.11.2
Running in system-mode.                            
                                                   
Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):
http://192.168.1.96/
Please enter the gitlab-ci token for this runner:
zASzWwffenos6Jbbfsgu
Please enter the gitlab-ci description for this runner:
[localhost.localdomain]: 
Please enter the gitlab-ci tags for this runner (comma separated):

Registering runner... succeeded                     runner=zASzWwff
Please enter the executor: docker, docker-ssh, shell, ssh, docker-ssh+machine, parallels, virtualbox, docker+machine, kubernetes:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 
			]]>
			</screen>
			<para>返回 gitlab 查看注册状态</para>
			<graphic format="png" fileref="../images/gitlab/cicd/Runners-status.png" width="1024" srccredit="neo" />
		</section>

	</section>

	<section id="gitlab.runner.shell">
		<title>Shell 执行器</title>
		<subtitle>Registering Runners</subtitle>
		<section>
			<title>注册 Gitlab Runner 为 Shell 执行器</title>
			<screen>
				<![CDATA[
[root@gitlab ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=1020084 revision=c1edb478 version=14.0.1
Running in system-mode.                            
                                                   
Enter the GitLab instance URL (for example, https://gitlab.com/):
http://git.netkiller.cn/
Enter the registration token:
DyKdKyaJaq5KN-irgNGz
Enter a description for the runner:
[gitlab]: 
Enter tags for the runner (comma-separated):

Registering runner... succeeded                     runner=DyKdKyaJ
Enter an executor: parallels, virtualbox, docker+machine, custom, docker, docker-ssh, shell, ssh, docker-ssh+machine, kubernetes:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 
				]]>
			</screen>
			<para>/etc/gitlab-runner/config.toml 配置文件</para>
			<screen>
				<![CDATA[
[root@gitlab ~]# cat /etc/gitlab-runner/config.toml
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800

[[runners]]
  name = "gitlab"
  url = "http://git.netkiller.cn/"
  token = "kVkzjDM74xZUN-aKbdPp"
  executor = "shell"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
    [runners.cache.azure]			
				]]>
			</screen>
		</section>
		<section>
			<title>生成 SSH 证书</title>
			<para>持续集成和部署运行在 gitlab-runner 用户下，切换到 gitlab-runner 用户</para>
			<screen>
			<![CDATA[
[root@gitlab ~]# su - gitlab-runner
Last login: Mon Jul 19 19:01:37 CST 2021			
			]]>
			</screen>
			<para>生成 SSH 证书</para>
			<screen>
				<![CDATA[
[gitlab-runner@gitlab ~]$ ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key (/home/gitlab-runner/.ssh/id_rsa): 
Created directory '/home/gitlab-runner/.ssh'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/gitlab-runner/.ssh/id_rsa.
Your public key has been saved in /home/gitlab-runner/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:l90LYBeSF9l9JHXJUHeO+IyvscCziz4C8vFNpJoKEjo gitlab-runner@gitlab
The key's randomart image is:
+---[RSA 3072]----+
|          ..o===B|
|          ..oo.**|
|          o.o . o|
|        .. = =   |
|.      oS o + +  |
|... o . .o   o . |
|E  o * o  + . o  |
|.o  + o o. + +   |
|  ..   oo.o.o    |
+----[SHA256]-----+
[gitlab-runner@gitlab ~]$ 				
				]]>
			</screen>
			<para>正常情况下，当我们链接一个 SSH 主机，会让我们输入 yes 确认继续链接。</para>
			<screen>
			<![CDATA[
[gitlab-runner@gitlab ~]$ ssh www@192.168.40.10
The authenticity of host '192.168.40.10 (192.168.40.10)' can't be established.
ECDSA key fingerprint is SHA256:xmFF266MPdXhnlAljS+QWhQsw6jOw1sOwQXRr/PHi2w.
Are you sure you want to continue connecting (yes/no/[fingerprint])?			
			]]>
			</screen>
			<para>配置 SSH</para>
			<screen>
			<![CDATA[
[gitlab-runner@gitlab ~]$ cat > ~/.ssh/config <<'EOF'
Host *
	ServerAliveInterval=30
	StrictHostKeyChecking no
	UserKnownHostsFile=/dev/null
EOF

chmod 600 -R ~/.ssh/config			
			]]>
			</screen>

			<para>授权远程执行 Shell</para>
			<screen>
			<![CDATA[
[gitlab-runner@gitlab ~]$ ssh-copy-id www@www.netkiller.cn	
			]]>
			</screen>
		</section>
		<section>
			<title>数据库环境</title>
			<para>在构建过程中，我们需要备份数据库/同步数据库，下面安装了一些所需的工具</para>
			<screen>
			<![CDATA[
[root@localhost ~]# dnf install -y mysql			
			]]>
			</screen>
			<para>设置数据库备份账号和密码，这里偷懒使用了 root 账号，生产环境请创建专用的备份账号。</para>
			<screen>
			<![CDATA[
[root@localhost ~]# su - gitlab-runner
Last login: Wed Sep  1 19:17:48 CST 2021
[gitlab-runner@localhost ~]$ vim ~/.my.cnf 
[gitlab-runner@localhost ~]$ cat ~/.my.cnf 
[mysql]
user=root
password=test

[mysqldump]
user=root
password=test			
			]]>
			</screen>
			<para>测试数据库是否畅通</para>
			<screen>
			<![CDATA[
[gitlab-runner@localhost ~]$ mysql -h mysql.netkiller.cn
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 37602
Server version: 8.0.21 Source distribution

Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> 			
			]]>
			</screen>
		</section>
		
		<section>
			<title>Java 环境</title>
			<para>JRE：java-11-openjdk</para>
			<para>JDK：java-11-openjdk-devel</para>
			<screen>
			<![CDATA[
[root@gitlab ~]# dnf install -y java-11-openjdk java-11-openjdk-devel
[root@gitlab ~]# dnf install -y maven
			]]>
			</screen>
			<para>修改 Maven 镜像路</para>
			<screen>
			<![CDATA[
[root@gitlab ~]# vim /etc/maven/settings.xml
  <mirrors>
    <mirror>
      <id>aliyun</id>
      <name>aliyun maven</name>
      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
      <mirrorOf>central</mirrorOf>
    </mirror>
  </mirrors>			
			]]>
			</screen>
			<para>如果需要安装最新版本 maven 使用下面脚本。</para>
			<screen>
			<![CDATA[
#!/bin/bash

cd /usr/local/src/
wget https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.tar.gz
tar zxf apache-maven-3.8.2-bin.tar.gz
mv apache-maven-3.8.2 /srv/
rm -f /srv/apache-maven
ln -s /srv/apache-maven-3.8.2 /srv/apache-maven

alternatives --install /usr/local/bin/mvn apache-maven-3.8.2 /srv/apache-maven-3.8.2/bin/mvn 0	
			]]>
			</screen>
			<screen>
			<![CDATA[
[root@localhost src]# mvn -v
Apache Maven 3.8.2 (ea98e05a04480131370aa0c110b8c54cf726c06f)
Maven home: /srv/apache-maven-3.8.2
Java version: 17-ea, vendor: Red Hat, Inc., runtime: /usr/lib/jvm/java-17-openjdk-17.0.0.0.26-0.2.ea.el8.x86_64
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: "linux", version: "4.18.0-338.el8.x86_64", arch: "amd64", family: "unix"			
			]]>
			</screen>
			<para>apache-maven-3.8.2 配置</para>
			<screen>
			<![CDATA[
[root@localhost ~]# vim /srv/apache-maven/conf/settings.xml
  <mirrors>
    <!-- mirror
     | Specifies a repository mirror site to use instead of a given repository. The repository that
     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used
     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.
     |
    <mirror>
      <id>mirrorId</id>
      <mirrorOf>repositoryId</mirrorOf>
      <name>Human Readable Name for this Mirror.</name>
      <url>http://my.repository.com/repo/path</url>
    </mirror>
     -->
    <mirror>
      <id>maven-default-http-blocker</id>
      <mirrorOf>external:http:*</mirrorOf>
      <name>Pseudo repository to mirror external repositories initially using HTTP.</name>
      <url>http://0.0.0.0/</url>
      <blocked>true</blocked>
    </mirror>
  </mirrors>			
			]]>
			</screen>
			<para>apache-maven-3.8.2 默认会阻止其他镜像，需要会去掉 maven-default-http-blocker 配置</para>
			<para>切换到 gitlab-runner 用户，随便运行一下 mvn 命令，这样就会产生 ～/.m2 文件夹</para>
			<screen>
			<![CDATA[
[root@gitlab ~]# su - gitlab-runner		
[gitlab-runner@gitlab ~]$ mvn -v
			]]>
			</screen>
		</section>
		<section>
			<title>NodeJS</title>
			<screen>
			<![CDATA[
[root@netkiller ~]# dnf install -y nodejs
			]]>
			</screen>
			<para>安装 cnpm</para>
			<screen>
			<![CDATA[
[root@netkiller ~]# npm config set registry https://registry.npm.taobao.org
[root@netkiller ~]# npm config get registry
https://registry.npm.taobao.org/
[root@netkiller ~]# npm install -g cnpm		
			]]>
			</screen>
			<para>yarn</para>
			<screen>
		<![CDATA[
[root@netkiller ~]# curl -sL https://dl.yarnpkg.com/rpm/yarn.repo -o /etc/yum.repos.d/yarn.repo
[root@netkiller ~]# dnf install -y yarn
		]]>
			</screen>
			<para>pm2 进程管理</para>
			<screen>
		<![CDATA[
[root@netkiller ~]# npm install -g pm2	
		]]>
			</screen>
			<para>设置 pm2 启动开启</para>
			<screen>
		<![CDATA[
[root@netkiller ~]# pm2 startup
[root@netkiller ~]# pm2 save --force
[root@netkiller ~]# systemctl enable pm2-root
[root@netkiller ~]# systemctl start pm2-root
[root@netkiller ~]# systemctl status pm2-root
		]]>
			</screen>
		</section>
		<section>
			<title>远程执行 sudo 提示密码</title>
			<screen>
			<![CDATA[
[gitlab-runner@gitlab api.sfzito.com]$ ssh www@192.168.40.10 "sudo ls"
Warning: Permanently added '192.168.40.10' (ECDSA) to the list of known hosts.
sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper
			]]>
			</screen>
			<para>解决方案一</para>
			<screen>
			<![CDATA[
ssh -t www@www.netkiller.cn "echo <yourpassword> |sudo -S <yourcommand>"
			]]>
			</screen>
			<para>解决方案二</para>
			<screen>
			<![CDATA[
cat > /etc/sudoers.d/www <<-EOF
www    ALL=(ALL)    NOPASSWD: ALL			
EOF
			]]>
			</screen>
		</section>
	</section>
	<section id="gitlab.runner.tags">
		<title>tags 的使用方法</title>
		<para>tags 是给 Gitlab Runner 打个标签，我的用法是多次注册，例如 shell 执行器的标签是 shell, Docker 执行器的标签是 docker，这样便可以在.gitlab-ci.yml文件中来选择使用那个执行器来触发操作。</para>
		<para>下面是 Shell 执行器</para>
		<screen>
		<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=268363 revision=58ba2b95 version=14.2.0
Running in system-mode.                            
                                                   
Enter the GitLab instance URL (for example, https://gitlab.com/):
http://git.netkiller.cn/
Enter the registration token:
k_SsvMQV397gAMaP_q1v
Enter a description for the runner:
[localhost.localdomain]: development
Enter tags for the runner (comma-separated):
shell
Registering runner... succeeded                     runner=k_SsvMQV
Enter an executor: docker, docker-ssh, virtualbox, docker-ssh+machine, kubernetes, custom, parallels, shell, ssh, docker+machine:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 		
		]]>
		</screen>
		<para>下面是 Docker 执行器</para>
		<screen>
		<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=268397 revision=58ba2b95 version=14.2.0
Running in system-mode.                            
                                                   
Enter the GitLab instance URL (for example, https://gitlab.com/):
http://git.netkiller.cn/
Enter the registration token:
k_SsvMQV397gAMaP_q1v
Enter a description for the runner:
[localhost.localdomain]: development
Enter tags for the runner (comma-separated):
docker
Registering runner... succeeded                     runner=k_SsvMQV
Enter an executor: custom, docker-ssh, parallels, shell, ssh, docker-ssh+machine, docker, virtualbox, docker+machine, kubernetes:
docker
Enter the default Docker image (for example, ruby:2.6):
maven:latest
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 		
		]]>
		</screen>
		<para>注册后的效果</para>
		<graphic format="png" fileref="../images/gitlab/cicd/gitlab-runner-tags.png" width="1024" srccredit="neo" />
		<screen>
		<![CDATA[
[root@localhost ~]# cat /etc/gitlab-runner/config.toml 
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800

[[runners]]
  name = "development"
  url = "http://git.netkiller.cn/"
  token = "EztTBypKRW5ibtC5rs2h"
  executor = "shell"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
    [runners.cache.azure]

[[runners]]
  name = "development"
  url = "http://git.netkiller.cn/"
  token = "51948sQbQsXGV-RxFMty"
  executor = "docker"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
    [runners.cache.azure]
  [runners.docker]
    tls_verify = false
    image = "maven:latest"
    privileged = false
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    volumes = ["/cache"]
    shm_size = 0		
		]]>
		</screen>
	</section>
	<section id="gitlab.runner.docker">
		<title>Docker 执行器</title>
		<para>注册 Docker 执行器</para>
		<screen>
		<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=268397 revision=58ba2b95 version=14.2.0
Running in system-mode.                            
                                                   
Enter the GitLab instance URL (for example, https://gitlab.com/):
http://git.netkiller.cn/
Enter the registration token:
k_SsvMQV397gAMaP_q1v
Enter a description for the runner:
[localhost.localdomain]: development
Enter tags for the runner (comma-separated):
docker
Registering runner... succeeded                     runner=k_SsvMQV
Enter an executor: custom, docker-ssh, parallels, shell, ssh, docker-ssh+machine, docker, virtualbox, docker+machine, kubernetes:
docker
Enter the default Docker image (for example, ruby:2.6):
maven:latest
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 		
		]]>
		</screen>

	</section>
</section>