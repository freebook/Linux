<?xml version="1.0" encoding="UTF-8"?>
<chapter id="jenkins">
	<title>Jenkins</title>
	<section id="jenkins.setup">
		<title>安装 Jenkins</title>
		<section>
			<title>Mac</title>
			<para>使用 pkg 方式安装，默认路径是 /Applications/Jenkins/jenkins.war</para>
			<screen>
			<![CDATA[
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home
java -jar jenkins.war --httpPort=8080
			]]>
			</screen>
			<para>浏览器访问：http://localhost:8080</para>
			<para>查看默认密码 /Users/neo/.jenkins/secrets/initialAdminPassword </para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~ % cat /Users/neo/.jenkins/secrets/initialAdminPassword
6c7369afc6c1414586b6644657dd655a		
			]]>
			</screen>
			<para>下载 cloudbees 插件</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~ % cd ~/.jenkins/plugins
neo@MacBook-Pro ~/.jenkins/plugins % wget ftp://ftp.icm.edu.pl/packages/jenkins/plugins/cloudbees-folder//6.7/cloudbees-folder.hpi			
			]]>
			</screen>
			<para>重启 Jenkens http://localhost:8080/restart</para>
			<para>复制上面的密码，粘贴到浏览器中。</para>
			<para>卸载 Jenkens </para>
			<screen>
			<![CDATA[
sudo rm -rf /var/root/.jenkins ~/.jenkins
sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
sudo rm /Library/LaunchDaemons/org.jenkins-ci.plist
sudo rm -rf /Applications/Jenkins "/Library/Application Support/Jenkins" /Library/Documentation/Jenkins

sudo rm -rf /Users/Shared/Jenkins
sudo dscl . -delete /Users/jenkins
sudo dscl . -delete /Groups/jenkins
sudo rm -f /etc/newsyslog.d/jenkins.conf
pkgutil --pkgs | grep 'org\.jenkins-ci\.' | xargs -n 1 sudo pkgutil --forget			
			]]>
			</screen>
			<para>由于我的Mac 模式是 JDK 11，所以需要制定 JAVA_HOME 到 JDK 1.8，否则提示</para>
			<screen>
			<![CDATA[
Dec 27, 2018 9:20:33 AM Main main
SEVERE: Running with Java class version 55.0, but 52.0 is required.Run with the --enable-future-java flag to enable such behavior. See https://jenkins.io/redirect/java-support/
java.lang.UnsupportedClassVersionError: 55.0
	at Main.main(Main.java:139)

Jenkins requires Java 8, but you are running 11+28 from /Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home
java.lang.UnsupportedClassVersionError: 55.0
	at Main.main(Main.java:139)		
			]]>
			</screen>
		</section>
		<section>
			<title>CentOS</title>
			<screen>
			<![CDATA[
wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key

yum install -y jenkins			
			]]>
			</screen>
			<screen>
			<![CDATA[
## Path:        Development/Jenkins
## Description: Jenkins Automation Server
## Type:        string
## Default:     "/var/lib/jenkins"
## ServiceRestart: jenkins
#
# Directory where Jenkins store its configuration and working
# files (checkouts, build reports, artifacts, ...).
#
JENKINS_HOME="/var/lib/jenkins"

## Type:        string
## Default:     ""
## ServiceRestart: jenkins
#
# Java executable to run Jenkins
# When left empty, we'll try to find the suitable Java.
#
JENKINS_JAVA_CMD=""

## Type:        string
## Default:     "jenkins"
## ServiceRestart: jenkins
#
# Unix user account that runs the Jenkins daemon
# Be careful when you change this, as you need to update
# permissions of $JENKINS_HOME and /var/log/jenkins.
#
JENKINS_USER="jenkins"

## Type:        string
## Default: "false"
## ServiceRestart: jenkins
#
# Whether to skip potentially long-running chown at the
# $JENKINS_HOME location. Do not enable this, "true", unless
# you know what you're doing. See JENKINS-23273.
#
#JENKINS_INSTALL_SKIP_CHOWN="false"

## Type: string
## Default:     "-Djava.awt.headless=true"
## ServiceRestart: jenkins
#
# Options to pass to java when running Jenkins.
#
JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true"

## Type:        integer(0:65535)
## Default:     8080
## ServiceRestart: jenkins
#
# Port Jenkins is listening on.
# Set to -1 to disable
#
JENKINS_PORT="8080"

## Type:        string
## Default:     ""
## ServiceRestart: jenkins
#
# IP address Jenkins listens on for HTTP requests.
# Default is all interfaces (0.0.0.0).
#
JENKINS_LISTEN_ADDRESS=""

## Type:        integer(0:65535)
## Default:     ""
## ServiceRestart: jenkins
#
# HTTPS port Jenkins is listening on.
# Default is disabled.
#
JENKINS_HTTPS_PORT=""

## Type:        string
## Default:     ""
## ServiceRestart: jenkins
#
# Path to the keystore in JKS format (as created by the JDK 'keytool').
# Default is disabled.
#
JENKINS_HTTPS_KEYSTORE=""

## Type:        string
## Default:     ""
## ServiceRestart: jenkins
#
# Password to access the keystore defined in JENKINS_HTTPS_KEYSTORE.
# Default is disabled.
#
JENKINS_HTTPS_KEYSTORE_PASSWORD=""

## Type:        string
## Default:     ""
## ServiceRestart: jenkins
#
# IP address Jenkins listens on for HTTPS requests.
# Default is disabled.
#
JENKINS_HTTPS_LISTEN_ADDRESS=""


## Type:        integer(1:9)
## Default:     5
## ServiceRestart: jenkins
#
# Debug level for logs -- the higher the value, the more verbose.
# 5 is INFO.
#
JENKINS_DEBUG_LEVEL="5"

## Type:        yesno
## Default:     no
## ServiceRestart: jenkins
#
# Whether to enable access logging or not.
#
JENKINS_ENABLE_ACCESS_LOG="no"

## Type:        integer
## Default:     100
## ServiceRestart: jenkins
#
# Maximum number of HTTP worker threads.
#
JENKINS_HANDLER_MAX="100"

## Type:        integer
## Default:     20
## ServiceRestart: jenkins
#
# Maximum number of idle HTTP worker threads.
#
JENKINS_HANDLER_IDLE="20"

## Type:        string
## Default:     ""
## ServiceRestart: jenkins
#
# Pass arbitrary arguments to Jenkins.
# Full option list: java -jar jenkins.war --help
#
JENKINS_ARGS=""
			]]>
			</screen>
			<para>Nginx 配置</para>
			<screen>
			<![CDATA[
[root@netkiller ~]# cat /etc/nginx/conf.d/jk.netkiller.cn.conf 
server {
    listen       80;
    server_name  jk.netkiller.cn;

    charset utf-8;

    location / {
    	proxy_pass   http://127.0.0.1:8080;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
			]]>
			</screen>
			<para>查看管理员密码</para>
			<screen>
			<![CDATA[
cat /var/lib/jenkins/secrets/initialAdminPassword			
			]]>
			</screen>
		</section>
	</section>
	<section id="jenkens.config">
		<title>配置 Jenkens</title>
		
		<graphic format="png" fileref="images/jenkens/Getting-Started-1.png" width="" srccredit="neo" />
		<graphic format="png" fileref="images/jenkens/Getting-Started-2.png" width="" srccredit="neo" />
		<graphic format="png" fileref="images/jenkens/Getting-Started-3.png" width="" srccredit="neo" />
		<graphic format="png" fileref="images/jenkens/Getting-Started-4.png" width="" srccredit="neo" />
		<graphic format="png" fileref="images/jenkens/Getting-Started-5.png" width="" srccredit="neo" />
		<graphic format="png" fileref="images/jenkens/Getting-Started-6.png" width="" srccredit="neo" />
		<graphic format="png" fileref="images/jenkens/Getting-Started-7.png" width="" srccredit="neo" />
		
	</section>
	<section id="Jenkinsfile">
		<title>Jenkinsfile</title>
		<section id="pipeline.agent">
			<title>agent</title>
			<section id="agent.label">
				<title>label</title>
				<screen>
				<![CDATA[
	agent {
        // java-8,python-2.7,python-3.5,build-essential,ruby-2.3,go-1.10
        label "java-8"
    }
				]]>
				</screen>
			</section>
			<section id="agent.docker">
				<title>docker</title>
				<screen>
				<![CDATA[
pipeline {
    agent { docker { image 'maven:3.3.3' } }
    stages {
        stage('build') {
            steps {
                sh 'mvn --version'
            }
        }
    }
}
				]]>
				</screen>
				<screen>
				<![CDATA[
pipeline {
    agent { docker { image 'php' } }
    stages {
        stage('build') {
            steps {
                sh 'php --version'
            }
        }
    }
}				
				]]>
				</screen>
			</section>
		</section>
		<section id="pipeline.stages">
			<title>stages</title>
			<screen>
			<![CDATA[
pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}			
			]]>
			</screen>
		</section>

		<section>
			<title></title>
			<screen>
			<![CDATA[
// Jenkinsfile (Scripted Pipeline)
node {
    stage('Build') {
        echo 'Building....'
    }
    stage('Test') {
        echo 'Building....'
    }
    stage('Deploy') {
        echo 'Deploying....'
    }
}			
			]]>
			</screen>
		</section>
		<section id="pipeline.echo">
			<title>echo</title>
			<screen>
			<![CDATA[
    stage('Deploy') {
        echo 'Deploying....'
    }
			]]>
			</screen>
		</section>
		<section id="pipeline.sh">
			<title>sh</title>
			<screen>
			<![CDATA[
		stage("build") {
            steps {
                sh "mvn package -Dmaven.test.skip=true"
            }
        }
			]]>
			</screen>
			<screen>
			<![CDATA[
		steps {
        	script{
            	sh 'find /etc/'
			}
		}
			]]>
			</screen>
		</section>
		<section id="pipeline.junit">
			<title>junit</title>
		</section>
	</section>
	<section id="github-plugin">
		<title>github-plugin 插件</title>
		<para><ulink url="https://github.com/jenkinsci/github-plugin" /></para>
		<para></para>
		<screen>
		<![CDATA[
git clone https://github.com/jenkinsci/github-plugin.git
mkdir target/classes
		]]>
		</screen>
		<para>修改 rest-assured 去掉 exclusions 配置项</para>
		<screen>
		<![CDATA[
        <dependency>
            <groupId>com.jayway.restassured</groupId>
            <artifactId>rest-assured</artifactId>
            <!--1.7.2 is the last version that use a compatible groovy version-->
            <version>1.7.2</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.httpcomponents</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>		
		]]>
		</screen>
		<para> 编译插件 </para>
		<screen>
		<![CDATA[
[root@netkiller github-plugin]# mvn hpi:hpi
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building GitHub plugin 1.29.4-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-hpi-plugin:1.120:hpi (default-cli) @ github ---
[INFO] Generating /srv/github-plugin/target/github/META-INF/MANIFEST.MF
[INFO] Checking for attached .jar artifact ...
[INFO] Generating jar /srv/github-plugin/target/github.jar
[INFO] Building jar: /srv/github-plugin/target/github.jar
[INFO] Exploding webapp...
[INFO] Copy webapp webResources to /srv/github-plugin/target/github
[INFO] Assembling webapp github in /srv/github-plugin/target/github
[INFO] Generating hpi /srv/github-plugin/target/github.hpi
[INFO] Building jar: /srv/github-plugin/target/github.hpi
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4.161s
[INFO] Finished at: Mon Jan 07 12:03:45 CST 2019
[INFO] Final Memory: 29M/290M
[INFO] ------------------------------------------------------------------------

		]]>
		</screen>
		<para>进入 github --> Settings --> Developer settings --> Personal Access Token --> Generate new token</para>
		<para>repo 和 admin:repo_hook</para>
		<para>Settings -> Webhooks -> Add webhook</para>
		<para>系统管理 --> 系统设置 --> GitHub --> Add GitHub Sever</para>		
	</section>
</chapter>
<chapter id="teamcity">
	<title>TeamCity</title>
</chapter>