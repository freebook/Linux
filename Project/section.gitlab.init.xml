<?xml version="1.0" encoding="UTF-8"?>
<section id="gitlab.init">
	<title>初始化 Gitlab</title>
	<para>Gitlab 安装完成之后，我们需要对它做一个初始化操作。</para>
	<section id="gitlab.user">
		<title>创建用户</title>
		<para>初始化GitLab，进入Admin area，单击左侧菜单Users，在这里为gitlab添加用户</para>
		<section id="user">
			<title>创建用户</title>
			<procedure>
				<title>企业内部使用的 Gitlab 初始化</title>
				<step>
					<para>关闭在线用户注册</para>
				</step>
				<step>
					<para>Step 3.</para>
					<substeps>
						<step>
							<para>Substep a.</para>
						</step>
						<step>
							<para>Substep b.</para>
						</step>
					</substeps>
				</step>
			</procedure>
		</section>
	</section>
	<section id="gitlab.group">
		<title>初始化组</title>
		<para>为什么要使用组？</para>
		<para>组可以共享标记、里程碑、议题、会员权限和Gitlab Runner 执行器，如果不实用组，就只能一个项目一个项目的去配置。</para>
		<para>初始化GitLab组，我比较喜欢使用“域名”作为组名，例如example.com</para>
		<para>下面是创建组与项目的具体操作步骤</para>
		<procedure>
			<title>Gitlab 初始化 - 创建组</title>
			<step>
				<para>点击 New Group 按钮新建一个组，我习惯每个域一个组，所以我使用 netkiller.cn 作为组名称
				</para>
				<graphic format="png" fileref="../images/gitlab/group.png" width="" srccredit="neo" />
			</step>
			<step>
				<para>输入 netkiller.cn 然后单击 Create group</para>
				<graphic format="png" fileref="../images/gitlab/group.new.png" width="" srccredit="neo" />
			</step>
			<step>
				<para>组创建完毕</para>
				<graphic format="png" fileref="../images/gitlab/groups.png" width="" srccredit="neo" />
			</step>
		</procedure>
		<para>创建组后接下来创建项目</para>
		<para>创建项目，我通常会在组下面创建项目，每个域名对应一个项目,例如www.example.com,images.example.com</para>
		<para>版本库URL如下</para>
		<screen>
		<![CDATA[
http: http://192.168.0.1/example.com/www.example.com.git
ssh: git@192.168.0.1:example.com/www.example.com.git
		]]>
		</screen>
		<procedure>
			<title>Gitlab 初始化 - 创建项目</title>
			<step>
				<para>单击 New Project 创建项目</para>
				<graphic format="png" fileref="../images/gitlab/projects.png" width="" srccredit="neo" />
			</step>
			<step>
				<para>输入 www.netkiller.cn 并点击 Create project 按钮创建项目</para>
				<graphic format="png" fileref="../images/gitlab/projects.new.png" width="" srccredit="neo" />
			</step>
			<step>
				<para>项目创建完毕</para>
				<graphic format="png" fileref="../images/gitlab/projects.created.png" width="" srccredit="neo" />
			</step>
		</procedure>

	</section>
	<section>
		<title>初始化标签</title>
		<para>参考 github 设置</para>
		<literallayout>
			<![CDATA[
bug					Something isn't working
documentation		Improvements or additions to documentation
duplicate			This issue or pull request already exists
enhancement			New feature or request
good first issue	Good for newcomers
help wanted			Extra attention is needed
invalid				This doesn't seem right
question			Further information is requested
wontfix				This will not be worked on
			]]>
		</literallayout>
		<para></para>
		<para>通常定义四个状态，开发，测试，升级，完成</para>
	</section>
	<section id="gitlab.branch">
		<title>初始化分支</title>
		<para>起初我们应对并行开发在Subversion上创建分支，每个任务一个分支，每个Bug一个分支，完成任务或修复bug后合并到开发分支(development)内部测试，然后再进入测试分支(testing)提交给测试组，测试组完成测试，最后进入主干(trunk)。对于Subverion来说每一个分支都是一份拷贝，SVN版本库膨胀的非常快。
		</para>
		<para>Git 解决了Svn 先天不足的分支管理功能，分支在GIT类似快照，同时GIT还提供了 pull request 功能。
		</para>
		<para>我们怎样使用git 的分支功能呢？ 首先我们不再为每个任务创建一个分支，将任务分支放在用户自己的仓库下面，通过 pull
			request 合并，同时合并过程顺便code review。
		</para>
		<para>master：是主干，只有开发部主管/经理级别拥有权限，只能合并来自testing的代码</para>
		<para>testing: 测试分支，测试部拥有权限，此分支不能修改，只能从开发分支合并代码。</para>
		<para>development：开发组的分支，Team拥有修改权限，可以合并，可以接受pull request, 可以提交代码</para>
		<para>tag 是 Release 本版，开发部主管/经理拥有权限</para>

		<para>分支的权限管理：</para>
		<para>master: 保护 </para>
		<para>testing：保护 </para>
		<para>development：保护 </para>

		<procedure>
			<title>Gitlab 分支应用 - 创建分支</title>
			<step>
				<para>首先，点击左侧 Commits 按钮，然后点击 Branches 按钮进入分支管理</para>
				<graphic format="png" fileref="../images/gitlab/branches.png" width="" srccredit="neo" />
			</step>

			<step>
				<para>点击 New branch 创建分支</para>
				<graphic format="png" fileref="../images/gitlab/branches.new.png" width="" srccredit="neo" />
				<para>在 Branch name 中输入分支名称，然后点击 Create branch 创建分支 </para>
			</step>
			<step>
				<para>分支已经创建</para>
				<graphic format="png" fileref="../images/gitlab/branches.created.png" width="" srccredit="neo" />
			</step>
		</procedure>
		<para>重复上面步骤，完成development分支的创建。</para>
		<para>保护分支：锁定分支，只允允许合并，不允许提交</para>
		<procedure>
			<title>保护分支</title>
			<step>
				<para>master</para>
				<para>testing</para>
			</step>

			<step>
				<para>Step 2.</para>

				<substeps>
					<step>

					</step>
					<step>
						<para>Substep b.</para>
					</step>
				</substeps>
			</step>
		</procedure>
	</section>
	<section id="部署环境">
		<title>部署环境</title>

	</section>
</section>	