<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: section.version.git.xml 666 2013-08-21 10:06:25Z netkiller $ -->
<chapter id="index"><?dbhtml dir="git"?>
	<title>Git - Fast Version Control System</title>
	<subtitle>distributed revision control system</subtitle>
	<info>
		<keywordset>
			<keyword>
				ls $(git --exec-path) -1 | tr '\n ' ','
			</keyword>
			<keyword>
				git,git-add,git-add--interactive,git-am,git-annotate,git-apply,git-archive,git-bisect,git-bisect--helper,git-blame,git-branch,git-bundle,git-cat-file,git-check-attr,git-checkout,git-checkout-index,git-check-ref-format,git-cherry,git-cherry-pick,git-clean,git-clone,git-commit,git-commit-tree,git-config,git-count-objects,git-daemon,git-describe,git-diff,git-diff-files,git-diff-index,git-difftool,git-difftool--helper,git-diff-tree,git-fast-export,git-fast-import,git-fetch,git-fetch-pack,git-filter-branch,git-fmt-merge-msg,git-for-each-ref,git-format-patch,git-fsck,git-fsck-objects,git-gc,git-get-tar-commit-id,git-grep,git-hash-object,git-help,git-http-backend,git-http-fetch,git-http-push,git-imap-send,git-index-pack,git-init,git-init-db,git-instaweb,git-log,git-lost-found,git-ls-files,git-ls-remote,git-ls-tree,git-mailinfo,git-mailsplit,git-merge,git-merge-base,git-merge-file,git-merge-index,git-merge-octopus,git-merge-one-file,git-merge-ours,git-merge-recursive,git-merge-resolve,git-merge-subtree,git-mergetool,git-mergetool--lib,git-merge-tree,git-mktag,git-mktree,git-mv,git-name-rev,git-notes,git-pack-objects,git-pack-redundant,git-pack-refs,git-parse-remote,git-patch-id,git-peek-remote,git-prune,git-prune-packed,git-pull,git-push,git-quiltimport,git-read-tree,git-rebase,git-rebase--interactive,git-receive-pack,git-reflog,git-relink,git-remote,git-remote-ftp,git-remote-ftps,git-remote-http,git-remote-https,git-remote-testgit,git-repack,git-replace,git-repo-config,git-request-pull,git-rerere,git-reset,git-revert,git-rev-list,git-rev-parse,git-rm,git-send-pack,git-shell,git-shortlog,git-show,git-show-branch,git-show-index,git-show-ref,git-sh-setup,git-stage,git-stash,git-status,git-stripspace,git-submodule,git-symbolic-ref,git-tag,git-tar-tree,git-unpack-file,git-unpack-objects,git-update-index,git-update-ref,git-update-server-info,git-upload-archive,git-upload-pack,git-var,git-verify-pack,git-verify-tag,git-web--browse,git-whatchanged,git-write-tree
			</keyword>
		</keywordset>
	</info>
	<para>homepage: http://git.or.cz/index.html</para>
	<para></para>
	<procedure>
		<title>Git </title>
		<step>
			<para>install</para>
			<screen><![CDATA[
sudo apt-get install git-core
			]]></screen>
		</step>
		<step>
			<para>config</para>
			<screen>
			<![CDATA[
$ git-config --global user.name neo
$ git-config --global user.email openunix@163.com
			]]>
			</screen>
		</step>
		<step>
			<para>Initializ</para>
			<screen><![CDATA[
$ mkdir repository
$ cd repository/

/repository$ git-init-db
Initialized empty Git repository in .git/
			]]></screen>
			<para>to check .gitconfig file</para>
			<screen><![CDATA[
$ cat ~/.gitconfig
[user]
        name = chen
        email = openunix@163.com
			]]></screen>
		</step>
	</procedure>
	<!-- http://tkg.im.ncue.edu.tw/?p=755 -->
	<section id="repositories">
		<title>Repositories 仓库管理</title>
		<section>
			<title>initial setup</title>
			<para></para>
			<screen><![CDATA[
Tell git who you are:

$ git config user.name "FirstName LastName"
$ git config user.email "user@example.com"

If you have many git repositories under your current user, you can set this for all of them


$ git config --global user.name "FirstName LastName"
$ git config --global user.email "user@example.com"

If you want pretty colors, you can setup the following for branch, status, and diff commands:

$ git config --global color.branch "auto"
$ git config --global color.status "auto"
$ git config --global color.diff "auto"

Or, to turn all color options on (with git 1.5.5+), use:

$ git config --global color.ui "auto"
To enable aut-detection for number of threads to use (good for multi-CPU or multi-core computers) for packing repositories, use:


$ git config --global pack.threads "0"
To disable the rename detection limit (which is set "pretty low" according to Linus, "just to not cause problems for people who have less memory in their machines than kernel developers tend to have"), use:

$ git config --global   diff.renamelimit "0"
		]]></screen>
		</section>
		<section>
			<title>克隆代码</title>
			<para>克隆到指定目录</para>
			<screen>
			<![CDATA[
➜  workspace git clone http://neo@192.168.30.5/netkiller.cn/api.netkiller.cn.git tmp.netkiller.cn			
			]]>
			</screen>
		</section>
		<section id="git-checkout">
			<title>git-checkout - Checkout and switch to a branch</title>
			<section>
				<title>checkout master</title>
				<screen><![CDATA[
$ git checkout master
Switched to branch "master"
			]]></screen>
			</section>
			<section>
				<title>checkout 分支</title>
				<screen><![CDATA[
$ git branch
* master
  mybranch

$ git checkout mybranch
Switched to branch "mybranch"

$ git branch
  master
* mybranch
			]]></screen>
			</section>
			<section>
				<title>通过 checkout 找回丢失的文件</title>
				<para>setup.py 不经意间被删除，找到丢失那一刻的提交是 fda886b0ae1526020c366cea2b747b3ceda18ff6，通过 checkout 检出该文件</para>
				<screen>
				<![CDATA[
git checkout fda886b0ae1526020c366cea2b747b3ceda18ff6 -- setup.py
				]]>
				</screen>
				<para>重新添加到版本库中</para>
				<screen>
				<![CDATA[
git add setup.py
git commit -a -m '还原丢失文件'
git push
				]]>
				</screen>
			</section>
		</section>

		<section id="commit">
			<title>Creating and Commiting</title>
			<screen><![CDATA[
$ cd (project-directory)
$ git init
$ (add some files)
$ git add .
$ git commit -m 'Initial commit'
		]]></screen>
		</section>
		<section id="remote">
			<title>Manager remote</title>
			<para>remote add</para>
			<screen>
		<![CDATA[
git remote add origin git@localhost:example.git
		]]>
			</screen>
			<para>remote show</para>
			<screen>
		<![CDATA[
git remote show
origin
		]]>
			</screen>
			<para>remote rm</para>
			<screen>
		<![CDATA[
git remote rm origin
		]]>
			</screen>
			<para>添加多个远程仓库</para>
			<screen><![CDATA[
git remote add origin git@localhost:example.git
git remote add another https://gitcafe.com/netkiller/netkiller.gitcafe.com.git
git push origin master
git push another master
		]]></screen>
		</section>
		<section id="status">
			<title>Status</title>
			<screen>
		<![CDATA[
$ git clone git://10.10.0.5/example.git
Cloning into example...
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 5 (delta 1), reused 0 (delta 0)
Receiving objects: 100% (5/5), done.
Resolving deltas: 100% (1/1), done.

neo@neo-OptiPlex-380:~/tmp$ cd example/

neo@neo-OptiPlex-380:~/tmp/example$ git status
# On branch master
nothing to commit (working directory clean)

neo@neo-OptiPlex-380:~/tmp/example$ ls
test1  test2  test3  test4

neo@neo-OptiPlex-380:~/tmp/example$ echo hello > test1

neo@neo-OptiPlex-380:~/tmp/example$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   test1
#
no changes added to commit (use "git add" and/or "git commit -a")
		]]>
			</screen>

		</section>
		<section id="diff">
			<title>Diff</title>
			<screen>
		<![CDATA[
neo@neo-OptiPlex-380:~/tmp/example$ git diff
diff --git a/test1 b/test1
index e69de29..ce01362 100644
--- a/test1
+++ b/test1
@@ -0,0 +1 @@
+hello
		]]>
			</screen>
			<para>比较 nqp-cc/src/QASTCompilerMAST.nqp 文件 当前版本与 211ab0b19f25b8c81685a97540f4b1491eb17504 版本的区别</para>
			<screen><![CDATA[
git diff 211ab0b19f25b8c81685a97540f4b1491eb17504 -- nqp-cc/src/QASTCompilerMAST.nqp
		]]></screen>
			<section>
				<title>--name-only 仅显示文件名</title>
				<screen><![CDATA[
git diff --name-only
			]]></screen>
			</section>
		</section>
		<section id="clone">
			<title>Cloning</title>
			<screen>
		<![CDATA[
$ git clone git://github.com/git/hello-world.git
$ cd hello-world
$ (edit files)
$ git add (files)
$ git commit -m 'Explain what I changed'
		]]>
			</screen>
		</section>
		<section id="push">
			<title>Push</title>
			<screen>
		<![CDATA[
$ git clone git://10.10.0.5/example.git
$ cd example
$ (edit files)
$ git add (files)
$ git commit -m 'Explain what I changed'

$ git push origin master
Counting objects: 5, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 278 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git://10.10.0.5/example.git
   27f8417..b088cc3  master -> master
		]]>
			</screen>
		</section>
		<section id="pull">
			<title>Pull</title>
			<screen><![CDATA[
$ git pull
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From git://10.10.0.5/example
   27f8417..b088cc3  master     -> origin/master
Updating 27f8417..b088cc3
Fast-forward
 test1 |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
		]]></screen>
		</section>
		<section id="fetch">
			<title>fetch</title>
			<screen><![CDATA[
$ git fetch
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 2 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (2/2), done.
From git://10.10.0.5/example
   b088cc3..7e8c17d  master     -> origin/master
		]]></screen>
		</section>
		<section id="patch">
			<title>Creating a Patch</title>
			<screen>
		<![CDATA[
$ git clone git://github.com/git/hello-world.git
$ cd hello-world
$ (edit files)
$ git add (files)
$ git commit -m 'Explain what I changed'
$ git format-patch origin/master
		]]>
			</screen>
		</section>
		<section id="reset">
			<title>reset</title>
			<para>重置到上一个版本</para>
			<screen><![CDATA[
git log
git reset --hard HEAD^
git log
git push -f
		]]></screen>
			<section>
				<title>还原文件</title>
				<screen>
				<![CDATA[
$ git checkout <commit> --filename
$ git reset filename				
				]]>
				</screen>
			</section>
		</section>
	</section>

	<section id="git-branch">
		<title>分支管理</title>
		<subtitle>Manipulating branches</subtitle>
		<para>git-branch - List, create, or delete branches</para>
		<section id="branch.list">
			<title>查看本地分支</title>
			<screen><![CDATA[
$ git branch
* master
			]]></screen>
			<para>查看远程分支</para>
			<screen>
			<![CDATA[
git branch -a			
			]]>
			</screen>
		</section>
		<section id="branch.create">
			<title>创建分支</title>
			<screen><![CDATA[
$ git branch development
$ git branch
* master
  development
			]]></screen>
		</section>
		<section id="branch.delete">
			<title>删除分支</title>
			<screen><![CDATA[
$ git branch -d staging
Deleted branch staging.

$ git branch
* master
			]]></screen>
		</section>
		<section id="branch.switch">
			<title>切换分支</title>
			<screen><![CDATA[
$ git branch
* master
  testing

$ git checkout testing
Switched to branch "testing"

$ git branch
  master
* testing
			]]></screen>
		</section>
		<section>
			<title>重命名分支</title>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git checkout test
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git branch -m test testing
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git push --delete origin test
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git push origin testing
			]]>
			</screen>
		</section>
		<section id="git-show-branch">
			<title>git-show-branch - Show branches and their commits</title>
			<screen><![CDATA[
$ git-show-branch
! [master] add a new file
 * [mybranch] add a new file
--
+* [master] add a new file
			]]></screen>
		</section>
	</section>


	<section id="git.remote">
		<title>Sharing Repositories with others</title>
		<section id="git.server">
			<title>Setting up a git server</title>
			<para>First we need to setup a user with a home folder. We will store all the repositories in this users home folder.</para>
			<screen>
		<![CDATA[
sudo adduser git
		]]>
			</screen>
			<para>Rather than giving out the password to the git user account use ssh keys to login so that you can have multiple developers connect securely and easily.</para>
			<para>Next we will make a repository. For this example we will work with a repository called example. Login as the user git and add the repository.</para>
			<para>login to remote server</para>
			<screen>
		<![CDATA[
ssh git@REMOTE_SERVER
		]]>
			</screen>
			<para>once logged in</para>
			<screen>
		<![CDATA[
sudo mkdir example.git
cd example.git
sudo git --bare init
Initialized empty Git repository in /home/git/example.git/
		]]>
			</screen>
			<para>That’s all there is to creating a repository. Notice we named our folder with a .git extension.</para>
			<para>Also notice the ‘bare’ option. By default the git repository assumes that you’ll be using it as your working directory, so git stores the actual bare repository files in a .git directory alongside all the project files. Since we are setting up a remote server we don’t need copies of the files on the filesystem. Instead, all we need are the deltas and binary objects of the repository. By setting ‘bare’ we tell git not to store the current files of the repository only the diffs. This is optional as
				you may have need to be able to browse the files on your remote server.
			</para>
			<para>Finally all you need to do is add your files to the remote repository. We will assume you don’t have any files yet.</para>
			<screen>
		<![CDATA[
mkdir example
cd example
git init
touch README
git add README
git commit -m 'first commit'
git remote add origin git@REMOTE_SERVER:example.git
git push origin master
		]]>
			</screen>
			<para>replace REMOTE_SERVER with your server name or IP</para>

		</section>
		<section id="git.remote.rename">
			<title>修改 origin</title>
			<screen>
		<![CDATA[
git remote rename origin old-origin
		]]>
			</screen>
		</section>
		<section id="git.remote.remove">
			<title>删除 origin</title>
			<screen>
		<![CDATA[
git remote remove origin		
		]]>
			</screen>
		</section>
	</section>
	<section id="git.merge">
		<title>合并分支</title>
		<section>
			<title>合并分支</title>
			<para>从 development 像 testing 分支合并</para>
			<screen>
			<![CDATA[
git checkout development
git pull
git checkout testing
git pull
git merge --no-ff "development"
git push
			]]>
			</screen>
			<para>testing 分支向 master 分支合并</para>
			<para>获取 testing 合并请求的分支</para>
			<screen>
		<![CDATA[
git fetch origin
git checkout -b "testing" "origin/testing"		
		]]>
			</screen>
			<para>如果此前已经执行过，使用下面命令切换分支即可，切换后 pull 代码，看看有什么新提交</para>
			<screen>
		<![CDATA[
git checkout "testing"
git pull
		]]>
			</screen>
			<para>切换到 master 分支</para>
			<screen>
		<![CDATA[
git fetch origin
git checkout "master"
git branch --show-current
git merge --no-ff "testing"
		]]>
			</screen>
			<para>将合并结果推送到远程</para>
			<screen>
		<![CDATA[
git push origin "master"		
		]]>
			</screen>
		</section>
		<section id="git.rebase">
			<title>rebase</title>
			<para>恢复 rebase 版本</para>
			<screen>
		<![CDATA[
git rebase
git reflog
git reset --hard 5faf0ae
git push
		]]>
			</screen>
		</section>
		<section>
			<title>合并分支解决冲突</title>
			<para>案例，例如我们从 testing 分支向 master 分支合并代码出现冲突，该如何解决呢？</para>
			<para>首先，两个分支拉取最新代码</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git checkout testing
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git pull		
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git checkout master
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git pull
			]]>
			</screen>
			<para>然后合并分支，从 testing 分支向 master 合并</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git merge --no-ff testing
自动合并 neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java
冲突（内容）：合并冲突于 neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java
自动合并失败，修正冲突然后提交修正的结果。			
			]]>
			</screen>
			<para>出现冲突，编辑冲突文件</para>
			<screen>
			<![CDATA[
vim neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java
			]]>
			</screen>
			<para>保存后重看状态</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git status
位于分支 master
您的分支与上游分支 'origin/master' 一致。

您有尚未合并的路径。
  （解决冲突并运行 "git commit"）
  （使用 "git merge --abort" 终止合并）

要提交的变更：
	修改：     neo-admin/src/main/resources/application-prod.yml
	修改：     neo-admin/src/main/resources/application-test.yml
	修改：     neo-common/src/main/java/com/neo/common/enums/IncarAttachTypeEnum.java
	修改：     neo-incar/src/main/java/com/neo/incar/service/impl/IncarAttachServiceImpl.java

未合并的路径：
  （使用 "git add <文件>..." 标记解决方案）
	双方修改：   neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java			
			]]>
			</screen>
			<para>将合并的文件添加到 git</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git add neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git status                                                                
位于分支 master
您的分支与上游分支 'origin/master' 一致。

所有冲突已解决但您仍处于合并中。
  （使用 "git commit" 结束合并）

要提交的变更：
	修改：     neo-admin/src/main/resources/application-prod.yml
	修改：     neo-admin/src/main/resources/application-test.yml
	修改：     neo-common/src/main/java/com/neo/common/enums/IncarAttachTypeEnum.java
	修改：     neo-incar/src/main/java/com/neo/incar/service/impl/IncarAttachServiceImpl.java
	修改：     neo-incar/src/main/java/com/neo/incar/utils/PaperlessConfig.java			
			]]>
			</screen>
			<para>提交代码</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git commit -a -m '手工合并分支 testing -> master'
[master 3652bf8e] 手工合并分支 testing -> master			
			]]>
			</screen>
			<para>推送代码</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/api.netkiller.cn % git push
枚举对象中: 1, 完成.
对象计数中: 100% (1/1), 完成.
写入对象中: 100% (1/1), 240 字节 | 240.00 KiB/s, 完成.
总共 1（差异 0），复用 0（差异 0），包复用 0
remote: 
remote: To create a merge request for master, visit:
remote:   http://192.168.30.5/netkiller.cn/api.netkiller.cn/-/merge_requests/new?merge_request%5Bsource_branch%5D=master
remote: 
To http://192.168.30.5/netkiller.cn/api.netkiller.cn.git
   fcaefaf4..3652bf8e  master -> master
			]]>
			</screen>
		</section>
		<section>
			<title>终止合并</title>
			<screen>
			<![CDATA[
git merge --about
			]]>
			</screen>
		</section>
		<section>
			<title>合并单个文件</title>
			<para>从 development 到 testing</para>
			<screen>
			<![CDATA[
git checkout development
git pull
checkout testing
git checkout development public/doc/UserGuide.pdf 
git status
git commit -a -m '手工合并'
git push			
			]]>
			</screen>
			<para>从 testing 到 staging</para>
			<screen>
			<![CDATA[
git checkout staging
git pull
git checkout testing public/doc/UserGuide.pdf 
git commit -a -m '手工合并'
git push			
			]]>
			</screen>
			<para>从 stage 到 master</para>
			<screen>
			<![CDATA[
git checkout master
git pull
git checkout staging public/doc/UserGuide.pdf 
git commit -a -m '手工合并'
git push			
			]]>
			</screen>
		</section>
	</section>
	<section id="git.log">
		<title>git log</title>
		<screen>
		<![CDATA[
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ai) %C(bold blue)<%an>%Creset' --abbrev-commit
		]]>
		</screen>
		<section>
			<title>一行显示 --oneline</title>
			<screen>
			<![CDATA[
Neo-iMac:test.netkiller.cn neo$ git log --name-status
commit 120f1bb6ff391c6b9b24899804f0292370873485 (HEAD -> main)
Author: 陈景峰 <neo@netkiller.cn>
Date:   Thu Dec 2 04:10:16 2021 +0000

    Initial commit

A       README.md
Neo-iMac:test.netkiller.cn neo$ git log --name-status --oneline
120f1bb (HEAD -> main) Initial commit
A       README.md			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
Neo-iMac:www.netkiller.cn neo$ git log --name-status --oneline --graph
* 7ca7fb7 (HEAD -> main, origin/main, origin/HEAD) sign
| M     README.md
* ba9a9a6 更新.gitlab-ci.yml文件
| M     .gitlab-ci.yml
* 8af932e 更新.gitlab-ci.yml文件
| M     .gitlab-ci.yml
* 6fe467b Update app.js
| M     app.js
* a019da0 更新.gitlab-ci.yml文件
| M     .gitlab-ci.yml
* 65afb8b 更新.gitlab-ci.yml文件
| M     .gitlab-ci.yml
* 061c78d 更新.gitlab-ci.yml文件
| A     .gitlab-ci.yml
* 149daf5 Add new file
| A     app.js
* e927196 更新README.md
  A     README.md			
			]]>
			</screen>
		</section>
		<section>
			<title>查看文件历史记录</title>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/devops % git log -- setup.py			
			]]>
			</screen>
			<para>diff 风格</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/devops % git log -p -- setup.py

commit abe282e68ad81e0e72cb8c700ba5c4db87c647a4
Author: neo <netkiller@msn.com>
Date:   Thu Sep 30 14:07:02 2021 +0800

    voice

diff --git a/setup.py b/setup.py
deleted file mode 100644
index 08f9d08..0000000
--- a/setup.py
+++ /dev/null
@@ -1,59 +0,0 @@
-import os,sys
-from setuptools import setup,find_packages
-sys.path.insert(0, os.path.abspath('lib'))
-from netkiller import __version__, __author__
-
-with open("README.md", "r") as fh:
-  long_description = fh.read()
-
-setup(
-       name="netkiller-devops",
-       version="0.2.4",			
			]]>
			</screen>
			<para>oneline 风格</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/devops % git log --pretty=oneline -- setup.py
abe282e68ad81e0e72cb8c700ba5c4db87c647a4 voice
fda886b0ae1526020c366cea2b747b3ceda18ff6 语音通知
cb2ca23a81b2384b79d7b32bb2e84782bb80edaf 企业微信通知
ac8e573123142a2856d44d13307dd4c46b134ceb fixed logging bug
1c609b9242c8f404ec4bba207dd8c9d836e591d4 docker 增加日志功能
			]]>
			</screen>
		</section>
	</section>
	<section id="git.reflog">
		<title>reflog</title>
		<para>reflog 类似我们软件中的 Undo/Redo ，就像使用 CMD+Z / CMD + SHIFT +Z 一样进行版本的切换和回滚。reflog 日志是保存在本地的，并不会 push 到远程，这就是他与 git log 的区别。</para>
		<para>git reflog 用法</para>
		<screen>
		<![CDATA[
Neo-iMac:test.netkiller.cn neo$ git reflog
120f1bb (HEAD -> main) HEAD@{0}: reset: moving to 120f1bb
9fcccf0 HEAD@{1}: commit: add tmp string
de5ca5d (origin/main, origin/HEAD) HEAD@{2}: reset: moving to HEAD
de5ca5d (origin/main, origin/HEAD) HEAD@{3}: pull: Fast-forward
120f1bb (HEAD -> main) HEAD@{4}: clone: from 192.168.30.5:netkiller.cn/test.netkiller.cn.git
		]]>
		</screen>
		<para>回滚到 120f1bb</para>
		<screen>
		<![CDATA[
Neo-iMac:test.netkiller.cn neo$ git reset --hard 120f1bb
HEAD is now at 120f1bb Initial commit		
		]]>
		</screen>
	</section>
	<section id="git-show">
		<title>git-show - Show various types of objects</title>
		<screen>
		<![CDATA[
$ git show
commit f6fda79f2f550ea3b2c1b483371ed5d12499ac35
Author: chen <openunix@163.com>
Date:   Sat Nov 1 08:50:45 2008 -0400

    add a new file

diff --git a/newfile b/newfile
new file mode 100644
index 0000000..b659464
--- /dev/null
+++ b/newfile
@@ -0,0 +1 @@
+hello world!!!
		]]>
		</screen>
		<section>
			<title>查看指定版本的文件内容</title>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/devops % git show fda886b0ae1526020c366cea2b747b3ceda18ff6:setup.py			
			]]>
			</screen>
		</section>
	</section>

	&section.git.submodule.xml;
	&section.git.lfs.xml;
	<section id="git.command">
		<title>command</title>
		<section id="hash-object">
			<title>hash-object</title>
			<para>使用git命令计算文件的 sha-1 值</para>
			<screen>
		<![CDATA[
neo@MacBook-Pro ~ % echo 'test content' | git hash-object --stdin
d670460b4b4aece5915caf5c68d12f560a9fe3e4		
		]]>
			</screen>
		</section>
		<section id="git-add">
			<title>git-add - Add file contents to the index</title>
			<screen>
		<![CDATA[
$ echo 'hello world!!!'> newfile
$ git-add newfile
		]]>
			</screen>
		</section>
		<section id="git-status">
			<title>git-status - Show the working tree status</title>
			<screen>
		<![CDATA[
$ git-status newfile
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#
#       new file: newfile
#		]]>
			</screen>
		</section>
		<section id="git-commit">
			<title>git-commit - Record changes to the repository</title>
			<screen><![CDATA[
$ git-commit -m 'add a new file' newfile
Created initial commit f6fda79: add a new file
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 newfile
		]]></screen>
		</section>
		<section id="git.config">
			<title>git config</title>
			<screen><![CDATA[
$ git config --file config http.receivepack true
		]]></screen>
		</section>
	</section>


	<section id="git-daemon">
		<title>git-daemon 服务器</title>
		<section>
			<title>git-daemon - A really simple server for git repositories</title>
			<para>在/home/gitroot/ 上运行 git 守护进程</para>
			<screen><![CDATA[
$ cd /home/gitroot
$ mkdir test.git
$ cd test.git
$ git --bare init --shared
Initialized empty shared Git repository in /home/gitroot/test.git/
		]]></screen>
			<screen>
		<![CDATA[
git daemon --verbose --export-all --base-path=/home/gitroot --enable=receive-pack --reuseaddr
		]]>
			</screen>
			<para>允许push,否则该仓库只能clone/pull</para>
			<screen><![CDATA[
sudo git daemon --verbose --export-all --base-path=/home/gitroot --enable=upload-pack --enable=upload-archive --enable=receive-pack
		]]></screen>
			<para>或者增加配置项</para>
			<screen><![CDATA[
$ git config daemon.receivepack true
$ git config --file config receive.denyCurrentBranch ignore
		]]></screen>
		</section>
		<section id="git-daemon-sysvinit">
			<title>git-daemon-sysvinit</title>
			<para>for a read-only repo:</para>
			<screen>
		<![CDATA[
$ sudo apt-get install git-daemon-sysvinit


$ dpkg -l git-daemon-sysvinit
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                                   Version                  Architecture             Description
+++-======================================-========================-========================-==================================================================================
ii  git-daemon-sysvinit                    1:1.7.10.4-1ubuntu1      all                      fast, scalable, distributed revision control system (git-daemon service)


$ dpkg -L git-daemon-sysvinit
/.
/usr
/usr/share
/usr/share/git-core
/usr/share/git-core/sysvinit
/usr/share/git-core/sysvinit/sentinel
/usr/share/doc
/usr/share/doc/git-daemon-sysvinit
/usr/share/doc/git-daemon-sysvinit/copyright
/usr/share/doc/git-daemon-sysvinit/README.Debian
/etc
/etc/default
/etc/default/git-daemon
/etc/init.d
/etc/init.d/git-daemon
/usr/share/doc/git-daemon-sysvinit/changelog.Debian.gz
		]]>
			</screen>
			<para>配置 /etc/default/git-daemon 文件</para>
		</section>
		<section id="git.xinetd">
			<title>inet.conf / xinetd 方式启动</title>
			<procedure>
				<title>git-daemon</title>
				<step>
					<para>/etc/shells</para>
					<para>/etc/shells 最后一行添加 '/usr/bin/git-shell'</para>
					<screen><![CDATA[
$ grep git /etc/shells
/usr/bin/git-shell
				]]></screen>
				</step>
				<step>
					<para>add new user 'git' and 'gitroot' for git</para>
					<para>you need to assign shell with /usr/bin/git-shell</para>
					<screen><![CDATA[
$ sudo adduser git --shell /usr/bin/git-shell
$ sudo adduser gitroot --ingroup git --shell /bin/bash
				]]></screen>
					<para>/etc/passwd</para>
					<screen><![CDATA[
$ grep git /etc/passwd
git:x:1001:1002:,,,:/home/git:/usr/bin/git-shell
gitroot:x:1002:1002:,,,:/home/gitroot:/bin/bash
				]]></screen>
				</step>
				<step>
					<para>/etc/services</para>
					<screen><![CDATA[
$ grep 9418 /etc/services
git             9418/tcp                        # Git Version Control System
				]]></screen>
				</step>
				<step>
					<para>/etc/inet.conf</para>
					<screen><![CDATA[
$ grep git /etc/inet.conf
git     stream  tcp     nowait  nobody \
  /usr/bin/git-daemon git-daemon --inetd --syslog --export-all /home/gitroot
				]]></screen>
					<para>reload inetd</para>
					<screen><![CDATA[
$ sudo pkill -HUP inetd
				]]></screen>
				</step>
				<step>
					<para>xinetd</para>
					<para>目前的Linux逐渐使用xinetd.d替代inet.conf，如Redhat系列已经不再使用inet.conf, Ubuntu系列发行版已经不预装inet与xinetd</para>
					<screen><![CDATA[
$ apt-cache search xinetd
globus-gfork-progs - Globus Toolkit - GFork Programs
rlinetd - gruesomely over-featured inetd replacement
update-inetd - inetd configuration file updater
xinetd - replacement for inetd with many enhancements

$ sudo apt-get install xinetd
				]]></screen>
					<para>/etc/xinetd.d/</para>
					<screen><![CDATA[
$ cat /etc/xinetd.d/git
# default: off
# description: The git server offers access to git repositories
service git
{
        disable 		= no
        type            = UNLISTED
        port            = 9418
        socket_type     = stream
        protocol 		= tcp
        wait            = no
        user            = gitroot
        server          = /usr/bin/git
        server_args     = daemon --inetd --export-all --enable=receive-pack --reuseaddr --base-path=/home/gitroot
        log_on_failure  += USERID
}
				]]></screen>
					<para>reload xinitd</para>
					<screen><![CDATA[
$ sudo /etc/init.d/xinetd reload
 * Reloading internet superserver configuration xinetd                                       [ OK ]
				]]></screen>
				</step>
			</procedure>
		</section>
		<section id="git-daemon-run">
			<title>git-daemon-run</title>
			<screen><![CDATA[
$ sudo apt-get install git-daemon-run
		]]></screen>
			<para>安装后会创建下面两个用户</para>
			<screen><![CDATA[
$ cat /etc/passwd | grep git
gitlog:x:117:65534::/nonexistent:/bin/false
gitdaemon:x:118:65534::/nonexistent:/bin/false
		]]></screen>
			<para>git-daemon-run 包携带的文件</para>
			<screen><![CDATA[
$ dpkg -L git-daemon-run
/.
/etc
/etc/sv
/etc/sv/git-daemon
/etc/sv/git-daemon/run
/etc/sv/git-daemon/log
/etc/sv/git-daemon/log/run
/usr
/usr/share
/usr/share/doc
/usr/share/doc/git-daemon-run
/usr/share/doc/git-daemon-run/changelog.gz
/usr/share/doc/git-daemon-run/changelog.Debian.gz
/usr/share/doc/git-daemon-run/README.Debian
/usr/share/doc/git-daemon-run/copyright
		]]></screen>
			<para>同时创建下面配置文件</para>
			<screen><![CDATA[
$ find /etc/sv/git-daemon/
/etc/sv/git-daemon/
/etc/sv/git-daemon/run
/etc/sv/git-daemon/supervise
/etc/sv/git-daemon/log
/etc/sv/git-daemon/log/run
/etc/sv/git-daemon/log/supervise
		]]></screen>
			<para>编辑/etc/sv/git-daemon/run配置</para>
			<screen>
		<![CDATA[
$ sudo vim /etc/sv/git-daemon/run

#!/bin/sh
exec 2>&1
echo 'git-daemon starting.'
exec chpst -ugitdaemon \
  "$(git --exec-path)"/git-daemon --verbose --reuseaddr \
    --base-path=/var/cache /var/cache/git
		]]>
			</screen>
			<para></para>
			<screen><![CDATA[
git-daemon --verbose --reuseaddr \
    --base-path=/var/cache /var/cache/git

改为

git-daemon --verbose --reuseaddr \
	--enable=receive-pack --export-all --base-path=/opt/git
		]]></screen>
			<tip>
				<para>
					* 我加上了一个--export-all 使用该选项后，在git仓库中就不必创建git-daemon-export-ok文件。
				</para>
				<para>其他选项--enable=upload-pack --enable=upload-archive --enable=receive-pack</para>
			</tip>
			<para>/etc/services 文件中加入</para>
			<screen><![CDATA[
# Local services
git             9418/tcp                        # Git Version Control System
		]]></screen>
			<para>确认已经加入</para>
			<screen><![CDATA[
$ grep 9418 /etc/services
		]]></screen>
			<para>启动git-daemon</para>
			<screen><![CDATA[
$ sudo sv stop git-daemon

or

$ sudo runsv git-daemon
runsv git-daemon: fatal: unable to change to directory: file does not exist
		]]></screen>
			<para>扫描git端口，确认git-daemon已经启动</para>
			<screen><![CDATA[
$ nmap localhost

Starting Nmap 5.00 ( http://nmap.org ) at 2012-01-31 10:45 CST
Warning: Hostname localhost resolves to 2 IPs. Using 127.0.0.1.
Interesting ports on localhost (127.0.0.1):
Not shown: 989 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
22/tcp   open  ssh
53/tcp   open  domain
80/tcp   open  http
111/tcp  open  rpcbind
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds
1723/tcp open  pptp
3128/tcp open  squid-http
3306/tcp open  mysql
9418/tcp open  git
		]]></screen>

		</section>
		<section id="git.daemon.test">
			<title>Testing</title>
			<screen>
		<![CDATA[
$ sudo mkdir -p /opt/git/example.git
$ cd /opt/git/example.git
$ git init
$ sudo vim example.git/.git/config
[receive]
denyCurrentBranch = ignore

$ sudo chown gitdaemon -R /opt/git/*
$ touch git-daemon-export-ok
		]]>
			</screen>
			<para>.git/config 文件应该是下面这样</para>
			<screen><![CDATA[
$ cat example.git/.git/config
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true

[receive]
denyCurrentBranch = ignore
		]]></screen>
			<para>git-clone git://localhost/example.git</para>
			<screen>
		<![CDATA[
neo@deployment:/tmp$ git clone git://localhost/example.git example.git
Cloning into example.git...
warning: You appear to have cloned an empty repository.
neo@deployment:/tmp$ cd example.git/
neo@deployment:/tmp/example.git$ echo helloworld > hello.txt
neo@deployment:/tmp/example.git$ git add hello.txt
neo@deployment:/tmp/example.git$ git commit -m 'Initial commit'
[master (root-commit) 65a0f83] Initial commit
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 hello.txt
		]]>
			</screen>
			<para>我们添加了一些文件 push 到服务器</para>
			<screen><![CDATA[
$ git push origin master
Counting objects: 3, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 214 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git://localhost/example.git
 * [new branch]      master -> master
		]]></screen>
			<para>然后再git clone，可以看到文件数目</para>
			<screen>
		<![CDATA[
$ git-clone git://localhost/example.git
Cloning into example...
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.
		]]>
			</screen>
		</section>
	</section>
	<section id="git.config">
		<title>git config</title>
		<section>
			<title>查看配置</title>
			<screen>
			<![CDATA[
Neo-iMac:workspace neo$ git config --list 
credential.helper=osxkeychain
user.name=Neo Chen
user.email=netkiller@msn.com
user.signingkey=netkiller@msn.com
gpg.program=gpg
commit.gpgsign=true			
			]]>
			</screen>
		</section>
		<section>
			<title>编辑配置</title>
			<screen>
			<![CDATA[
git config --global --edit
			]]>
			</screen>
			<screen>
			<![CDATA[
git config --edit
			]]>
			</screen>
		</section>
		<section>
			<title>替换配置项</title>
			<screen>
			<![CDATA[
$  git config --global --replace-all user.email "输入你的邮箱"
$  git config --global --replace-all user.name "输入你的用户名"			
			]]>
			</screen>
		</section>
		<section>
			<title>GPG签名</title>
			<screen>
			<![CDATA[
开启GPG签名：

git config commit.gpgsign true

关闭：

git config commit.gpgsign false			
			]]>
			</screen>
		</section>
		
		<section id="core.sshCommand">
			<title>core.sshCommand</title>
			<para>git 默认使用 id_rsa，指定私钥方法是：</para>
			<screen>
			<![CDATA[
git config core.sshCommand "ssh -i ~/.ssh/id_rsa_example -F /dev/null"
git pull
git push
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_example -F /dev/null" git clone git@github.com:netkiller/netkiller.github.io.git		
			]]>
			</screen>
		</section>
		<section id="http.postBuffer">
			<title>fatal: The remote end hung up unexpectedly</title>
			<screen><![CDATA[
error: RPC failed; result=22, HTTP code = 413 | 18.24 MiB/s
fatal: The remote end hung up unexpectedly
			]]></screen>
			<screen><![CDATA[
git config http.postBuffer 524288000
			]]></screen>
		</section>
		<section id="http.sslVerify">
			<title>忽略 SSL 检查</title>
			<para>使用自颁发 ssl 证书时需要开启，否则无法 clone 和 push</para>
			<screen>
			<![CDATA[
export GIT_SSL_NO_VERIFY=true			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
git config http.sslVerify "false"  			
			]]>
			</screen>
		</section>
	</section>

	<section id="git-svn">
		<title>git-svn - Bidirectional operation between a single Subversion branch and git</title>
		<screen>
		<![CDATA[
sudo apt-get install git-svn
		]]>
		</screen>
		<para>clone</para>
		<screen><![CDATA[
git-svn clone -s svn://netkiller.8800.org/neo
cd neo
git gc

git commit -a
git-svn dcommit
		]]></screen>
		<para>从 svn 仓库更新</para>
		<screen><![CDATA[
git-svn rebase
		]]></screen>
		<para>git-svn init svn://netkiller.8800.org/neo/public_html</para>
	</section>
	&chapter.git.dotfiles.xml;
	&chapter.git.gitolite.xml;
	&chapter.git.web.xml;
	<section id="faq">
		<title>FAQ</title>
		<section id="HEAD">
			<title>导出最后一次修改过的文件</title>
			<para>有时我们希望把刚刚修改的文件复制出来，同时维持原有的目录结构，这样可能交给运维直接覆盖服务器上的代码。我们可以使用下面的命令完成这样的操作，而不用一个一个文件的复制。</para>
			<screen>
			<![CDATA[
git archive -o update.zip HEAD $(git diff --name-only HEAD^)
			]]>
			</screen>
		</section>
		<section id="range">
			<title>导出指定版本区间修改过的文件</title>
			<para>首先使用git log查看日志，找到指定的 commit ID号。</para>
			<screen>
			<![CDATA[
$ git log
commit ee808bb4b3ed6b7c0e7b24eeec39d299b6054dd0
Author: 168 <lineagelx@126.com>
Date:   Thu Oct 22 13:12:11 2015 +0800

    统计代码

commit 3e68ddef50eec39acea1b0e20fe68ff2217cf62b
Author: netkiller <netkiller@msn.com>
Date:   Fri Oct 16 14:39:10 2015 +0800

    页面修改

commit b111c253321fb4b9c5858302a0707ba0adc3cd07
Author: netkiller <netkiller@msn.com>
Date:   Wed Oct 14 17:51:55 2015 +0800

    数据库连接

commit 4a21667a576b2f18a7db8bdcddbd3ba305554ccb
Author: netkiller <netkiller@msn.com>
Date:   Wed Oct 14 17:27:15 2015 +0800

    init repo
	   		]]>
			</screen>
			<para>导入 b111c253321fb4b9c5858302a0707ba0adc3cd07 至 ee808bb4b3ed6b7c0e7b24eeec39d299b6054dd0 间修改过的文件。</para>
			<screen>
			<![CDATA[
$ git archive -o update2.zip HEAD $(git diff --name-only b111c253321fb4b9c5858302a0707ba0adc3cd07)
			]]>
			</screen>
		</section>

		<section>
			<title>回撤提交</title>
			<para>首先 reset 到指定的版本，根据实际情况选择 --mixed 还是 --hard</para>
			<screen>
			<![CDATA[
git reset --mixed 096392721f105686fc3cdafcb4159439a66b0e5b --
or
git reset --hard 33ba6503b4fa8eed35182262770e4eab646396cd --
			]]>
			</screen>
			<screen>
			<![CDATA[
git push origin --force --all
or
git push --force --progress "origin" master:master
			]]>
			</screen>
		</section>
		<section>
			<title>撤回单个文件提交</title>
			<para>例如撤回 project/src/main/java/cn/netkiller/controller/DemoSceneController.java 到上一个版本</para>
			<screen>
			<![CDATA[
➜  api.netkiller.cn git:(testing) git log project/src/main/java/cn/netkiller/controller/DemoSceneController.java

commit b4609646ee60927fe4c1c563d07e78f63ab106ea (HEAD -> testing, origin/testing)
Author: Neo Chen <netkiller@msn.com>
Date:   Wed Nov 17 18:49:27 2021 +0800

    手工合并，临时提交

commit bc96eb68ad73d5248c8135609191c51e258edf10
Author: Tom <tom@qq.com>
Date:   Thu Oct 21 16:29:20 2021 +0800

    获取激活场景

commit d564ea25bd556324f1f576357563a8ee77b3bdd9
Author: Tom <tom@qq.com>
Date:   Thu Oct 21 15:15:26 2021 +0800

    获取激活场景

commit d5a40165ad24a3a021fe58c6d78e0b7d97ab3cc5
Author: Tom <tom@qq.com>
Date:   Thu Oct 21 14:43:16 2021 +0800

    新增场景角色增加

commit aa98662cb9e781e328ee3d5cec23af29c81050d9
Author: Tom <tom@qq.com>
Date:   Thu Oct 21 09:55:29 2021 +0800

    新增场景角色增加

commit 140d22a8d4ea7fcc775d4372e8beb6d854831512
Author: Jerry <jerry@qq.com>
Date:   Sat Oct 16 15:27:30 2021 +0800

    场景接口修改

commit 2ddbb1ff933de663305db2396d99030c938c267a
Author: Tom <tom@qq.com>
Date:   Fri Oct 15 10:55:30 2021 +0800			
			]]>
			</screen>
			<para>只显示最后五条记录</para>
			<screen>
			<![CDATA[
➜  api.netkiller.cn git:(testing) git log -5 project/src/main/java/cn/netkiller/controller/DemoSceneController.java			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
➜  api.netkiller.cn git:(testing) git reset bc96eb68ad73d5248c8135609191c51e258edf10 project/src/main/java/cn/netkiller/controller/DemoSceneController.java
Unstaged changes after reset:
M	project/src/main/java/cn/netkiller/controller/DemoSceneController.java			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
➜  api.netkiller.cn git:(testing) ✗ git status
On branch testing
Your branch is up to date with 'origin/testing'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   project/src/main/java/cn/netkiller/controller/DemoSceneController.java

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   project/src/main/java/cn/netkiller/controller/DemoSceneController.java

➜  api.netkiller.cn git:(testing) ✗ git add project/src/main/java/cn/netkiller/controller/DemoSceneController.java
➜  api.netkiller.cn git:(testing) ✗ git commit -m '恢复到上一个版本'
[testing 9959acd4] 恢复到上一个版本
 1 file changed, 6 insertions(+), 8 deletions(-)			
			]]>
			</screen>
		</section>
		<section>
			<title>每个项目一个证书</title>
			<para>方法一</para>
			<screen>
			<![CDATA[
[root@localhost ~]# cat .ssh/config 
host git.netkiller.cn
    user git
    hostname git.netkiller.cn
    port 22
    identityfile ~/.ssh/netkiller
    
host github.com
 HostName github.com
 IdentityFile ~/.ssh/id_rsa_github
 User git    
			]]>
			</screen>
			<para>方法二</para>
			<screen>
			<![CDATA[
$ ssh-agent sh -c 'ssh-add ~/.ssh/id_rsa; git fetch user@host'			
			]]>
			</screen>
		</section>
		<section>
			<title>fatal: Not possible to fast-forward, aborting.</title>
			<screen>
			<![CDATA[
$ git pull
fatal: Not possible to fast-forward, aborting.			
$ git rebase
$ git push			
			]]>
			</screen>
		</section>
	</section>
</chapter>