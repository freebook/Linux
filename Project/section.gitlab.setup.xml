<?xml version="1.0" encoding="UTF-8"?>
<section id="gitlab.install">
	<title>GitLab 安装与配置</title>
	<para>
		<ulink url="https://github.com/gitlabhq" />
	</para>
	<para>GitLab是一个利用 Ruby on Rails 开发的开源应用程序，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。</para>
	<para>它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</para>
	<para>GitLab 5.0以前版本要求服务器端采用 Gitolite 搭建，5.0版本以后不再使用 Gitolite ，采用自己开发的 gitlab-shell 来实现。如果你觉得安装麻烦可以使用 GitLab Installers 一键安装程序。</para>
	<section>
		<title>操作系统初始化</title>
		<para>CentOS 8 / Rockey 8.5 初始化脚本</para>
		<screen>
		<![CDATA[
dnf -y upgrade
dnf -y install epel-release

dnf install -y bzip2 tree psmisc \
telnet wget rsync vim-enhanced \
net-tools bind-utils

timedatectl set-timezone Asia/Shanghai	
dnf install -y langpacks-en glibc-langpack-en
localectl set-locale LANG=en_US.UTF-8

cat >> /etc/environment <<EOF
LC_ALL=en_US.UTF-8
LANG=en_US.UTF-8
LC_CTYPE=UTF-8
EOF

cat >> /etc/profile.d/history.sh <<EOF
# Administrator specific aliases and functions for system security
export HISTSIZE=10000
export HISTFILESIZE=10000
export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S "
export TIME_STYLE=long-iso
EOF
source /etc/profile.d/history.sh

cp /etc/selinux/config{,.original}
sed -i "s/SELINUX=enforcing/SELINUX=disabled/" /etc/selinux/config
setenforce Permissive

cat >> /etc/sysctl.conf <<EOF

# Netkiller
net.ipv4.ip_local_port_range = 1025 65500
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_keepalive_time = 1800
net.core.netdev_max_backlog=3000
net.ipv4.tcp_max_syn_backlog = 1024
net.ipv4.tcp_max_tw_buckets = 4096
net.core.somaxconn = 1024

# TCP BBR
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr
EOF

sysctl -p

cat > /etc/security/limits.d/20-nofile.conf <<EOF

* soft nofile 65535
* hard nofile 65535

EOF		

groupadd -g 80 www
adduser -o --uid 80 --gid 80 -G wheel -c "Web Application" www

curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh" | sudo bash
dnf install -y gitlab-runner
cp /etc/gitlab-runner/config.toml{,.original}
systemctl enable gitlab-runner
		]]>
		</screen>
		<section>
			<title>Docker</title>
			<screen>
			<![CDATA[
dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
dnf install -y docker-ce

systemctl enable docker
systemctl start docker

GID=$(egrep -o 'docker:x:([0-9]+)' /etc/group | egrep -o '([0-9]+)')
adduser -u ${GID} -g ${GID} docker

usermod -aG docker www
usermod -aG docker gitlab-runner
usermod -aG www gitlab-runner

dnf install -y python39
pip3 install docker-compose netkiller-devops
			]]>
			</screen>
			<para>Mirror</para>
			<screen>
			<![CDATA[
cat << EOF > /etc/docker/daemon.json

{
	"registry-mirrors": [
    	"https://docker.mirrors.ustc.edu.cn",
		"https://registry.docker-cn.com",
		"https://registry.cn-hangzhou.aliyuncs.com",
    	"http://hub-mirror.c.163.com"
	]
}

EOF			
			]]>
			</screen>
		</section>
		<section>
			<title>Java 环境 安装脚本</title>
			<screen>
			<![CDATA[
dnf install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel maven
			]]>
			</screen>
			<para>最新版 3.8.4 安装脚本</para>
			<screen>
			<![CDATA[

cd /usr/local/src/
wget https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz
tar zxf apache-maven-3.8.4-bin.tar.gz
mv apache-maven-3.8.4 /srv/
rm -f /srv/apache-maven
ln -s /srv/apache-maven-3.8.4 /srv/apache-maven

alternatives --remove mvn /usr/share/maven/bin/mvn
alternatives --install /usr/local/bin/mvn apache-maven-3.8.4 /srv/apache-maven-3.8.4/bin/mvn 0

cp /srv/apache-maven/conf/settings.xml{,.original}
vim /srv/apache-maven/conf/settings.xml <<end > /dev/null 2>&1
:158,158d
:164,164s/$/ -->/
:wq
end

mvn -v			
			]]>
			</screen>
		</section>
		<section>
			<title>Node 环境</title>
			<para>默认安装</para>
			<screen>
			<![CDATA[
dnf install -y nodejs
npm config set registry https://registry.npm.taobao.org
npm install -g cnpm	
			
			]]>
			</screen>
			<para>官网最新版</para>
			<screen>
			<![CDATA[
dnf remove -y nodejs

cd /usr/local/src
wget https://nodejs.org/dist/v16.13.1/node-v16.13.1-linux-x64.tar.xz
tar xf node-v16.13.1-linux-x64.tar.xz
mv node-v16.13.1-linux-x64 /srv/node-v16.13.1
rm -f /srv/node
ln -s /srv/node-v16.13.1 /srv/node

alternatives --install /usr/local/bin/node node /srv/node/bin/node 100 \
--slave /usr/local/bin/npm npm /srv/node/bin/npm \
--slave /usr/local/bin/npx npx /srv/node/bin/npx \
--slave /usr/local/bin/corepack corepack /srv/node/bin/corepack

node -v			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
dnf remove -y nodejs

cd /usr/local/src
wget https://nodejs.org/dist/v17.2.0/node-v17.2.0-linux-x64.tar.xz
tar xf node-v17.2.0-linux-x64.tar.xz
mv node-v17.2.0-linux-x64 /srv/node-v17.2.0
rm -f /srv/node
ln -s /srv/node-v17.2.0 /srv/node

alternatives --install /usr/local/bin/node node /srv/node/bin/node 100 \
--slave /usr/local/bin/npm npm /srv/node/bin/npm \
--slave /usr/local/bin/npx npx /srv/node/bin/npx \
--slave /usr/local/bin/corepack corepack /srv/node/bin/corepack

node -v			
			]]>
			</screen>
		</section>
	</section>
	<section id="gitlab.centos">
		<title>CentOS 8 Stream 安装 Gitlab</title>
		<screen>
			<![CDATA[
dnf install langpacks-en glibc-all-langpacks -y			
localectl set-locale LANG=en_US.UTF-8
			
sudo systemctl status firewalld 
sudo firewall-cmd --permanent --add-service=http 
sudo firewall-cmd --permanent --add-service=https 
sudo systemctl reload firewalld   

sudo dnf install postfix 
sudo systemctl enable postfix 
sudo systemctl start postfix


curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | bash

EXTERNAL_URL="http://gitlab.example.com"

export LC_ALL=en_US.UTF-8  
export LANG=en_US.UTF-8
export LC_CTYPE=UTF-8

dnf install -y gitlab-ce

cp /etc/gitlab/gitlab.rb{,.original}

gitlab-ctl reconfigure			
			]]>
		</screen>
		<para>查看 root 密码</para>
		<screen>
			<![CDATA[
[root@localhost ~]# cat  /etc/gitlab/initial_root_password
# WARNING: This value is valid only in the following conditions
#          1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails['initial_root_password']` setting in `gitlab.rb`, it was provided before database was seeded for the first time (usually, the first reconfigure run).
#          2. Password hasn't been changed manually, either via UI or via command line.
#
#          If the password shown here doesn't work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.

Password: dpzQFzltaq0BhAwDnugMf6MCFbvItXDvC+RcuN9R+wg=

# NOTE: This file will be automatically deleted in the first reconfigure run after 24 hours.			
			]]>
		</screen>
		<para>GitLab Runner</para>
		<screen>
			<![CDATA[
curl -sL "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh" | sudo bash
dnf install gitlab-runner	
			]]>
		</screen>
		<para>配置文件 /etc/gitlab-runner/config.toml</para>
		<screen>
			<![CDATA[
[root@localhost ~]# systemctl restart gitlab-runner
			]]>
		</screen>
	</section>
	<section id="gitlab.docker">
		<title>Docker 方式安装 Gitlab</title>
		<screen>
		<![CDATA[
export GITLAB_HOME=/srv/gitlab
		]]>
		</screen>
		<screen>
		<![CDATA[
sudo docker run --detach \
  --hostname gitlab.example.com \
  --publish 443:443 --publish 80:80 --publish 22:22 \
  --name gitlab \
  --restart always \
  --volume $GITLAB_HOME/config:/etc/gitlab \
  --volume $GITLAB_HOME/logs:/var/log/gitlab \
  --volume $GITLAB_HOME/data:/var/opt/gitlab \
  gitlab/gitlab-ce:latest
		]]>
		</screen>
		<para>配置对外url，域名或者ip，公网能访问即可</para>
		<screen>
			<![CDATA[
vim /mnt/gitlab/etc/gitlab.rb
添加一下配置：
external_url	'http://127.0.0.1' （你的域名或者ip地址）	
		]]>
		</screen>
		<para>配置邮箱</para>
		<screen>
		<![CDATA[
vim /mnt/gitlab/etc/gitlab.rb
gitlab_rails['smtp_enable'] = true
gitlab_rails['smtp_address'] = "smtp.qq.com"
gitlab_rails['smtp_port'] = 465
gitlab_rails['smtp_user_name'] = "13721218@qq.com"    (替换成自己的QQ邮箱)
gitlab_rails['smtp_password'] = "xxxxx"
gitlab_rails['smtp_domain'] = "smtp.qq.com"
gitlab_rails['smtp_authentication'] = "login"
gitlab_rails['smtp_enable_starttls_auto'] = true
gitlab_rails['smtp_tls'] = true
gitlab_rails['gitlab_email_from'] = '13721218@qq.com'  (替换成自己的QQ邮箱，且与smtp_user_name一致)		
		]]>
		</screen>
		<para>重新启动gitlab</para>
		<screen>
		<![CDATA[
docker restart gitlab-ce
sudo docker logs -f gitlab
		]]>
		</screen>
		<para>修改 /etc/gitlab/gitlab.rb 配置文件</para>
		<screen>
		<![CDATA[
docker exec -it gitlab editor /etc/gitlab/gitlab.rb
gitlab  |   docker restart gitlab		
		]]>
		</screen>


		<section id="gitlab.docker-compose">
			<title>docker-compose 安装</title>
			<para>宿主主机开放 80/443 端口</para>
			<screen>
		<![CDATA[
systemctl status firewalld 
firewall-cmd --permanent --add-service=http 
firewall-cmd --permanent --add-service=https 
systemctl reload firewalld
		]]>
			</screen>
			<para>创建工作目录</para>
			<screen>
		<![CDATA[
[root@localhost ~]# mkdir -p /opt/gitlab/{config,data,logs} 
[root@localhost ~]# cd /opt/gitlab/
		]]>
			</screen>
			<para>安装 gitlab</para>
			<screen>
		<![CDATA[
[root@localhost gitlab]# vim docker-compose.yaml		
version: '3.9'
services:
    gitlab:
      image: 'gitlab/gitlab-ce:latest'
      container_name: "gitlab"
      restart: unless-stopped
      privileged: true
      hostname: 'gitlab.example.com'
      environment:
        TZ: 'Asia/Shanghai'
        GITLAB_OMNIBUS_CONFIG: |
          external_url 'https://gitlab.example.com'
          gitlab_rails['time_zone'] = 'Asia/Shanghai'
          gitlab_rails['smtp_enable'] = true
          gitlab_rails['smtp_address'] = "smtp.netkiller.cn"
          gitlab_rails['smtp_port'] = 465
          gitlab_rails['smtp_user_name'] = "netkiller@netkiller.cn" 
          gitlab_rails['smtp_password'] = "******"
          gitlab_rails['smtp_domain'] = "netkiller.cn"
          gitlab_rails['smtp_authentication'] = "login"
          gitlab_rails['smtp_enable_starttls_auto'] = true
          gitlab_rails['smtp_tls'] = true
          gitlab_rails['gitlab_email_from'] = 'netkiller@netkiller.cn'
          gitlab_rails['gitlab_shell_ssh_port'] = 22
      ports:
        - '80:80'
        - '443:443'
        - '23:22'
      volumes:
        - /opt/gitlab/config:/etc/gitlab
        - /opt/gitlab/logs:/var/log/gitlab
        - /opt/gitlab/data:/var/opt/gitlab		
		]]>
			</screen>

			<example>
				<title>Docker 部署 GitLab 查看登陆密码</title>
				<screen>
			<![CDATA[
Neo-iMac:docker neo$ docker ps
CONTAINER ID   IMAGE                     COMMAND                  CREATED          STATUS                    PORTS                                              NAMES
a762c0c8c950   gitlab/gitlab-ce:latest   "/assets/wrapper"        14 minutes ago   Up 14 minutes (healthy)   0.0.0.0:80->80/tcp, 22/tcp, 0.0.0.0:443->443/tcp   gitlab
433a04f60108   sonarqube:community       "/opt/sonarqube/bin/…"   10 days ago      Up 15 minutes             0.0.0.0:9000->9000/tcp                             sonarqube
ea753b0905f7   postgres:latest           "docker-entrypoint.s…"   10 days ago      Up 15 minutes             5432/tcp                                           postgresql

Neo-iMac:docker neo$ docker exec -it gitlab cat /etc/gitlab/initial_root_password
# WARNING: This value is valid only in the following conditions
#          1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails['initial_root_password']` setting in `gitlab.rb`, it was provided before database was seeded for the first time (usually, the first reconfigure run).
#          2. Password hasn't been changed manually, either via UI or via command line.
#
#          If the password shown here doesn't work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.

Password: LnfGjN5ySHSyTev8VSqCNFna0m43i3oF6FTU8QThoSQ=

# NOTE: This file will be automatically deleted in the first reconfigure run after 24 hours.			
			]]>
				</screen>
			</example>

			<para>安装 gitlab-runner</para>
			<programlisting>
		<![CDATA[
version: '3.9'
services:
  gitlab-runner:
    image: gitlab/gitlab-runner:alpine
    restart: unless-stopped
    depends_on:
      - gitlab
    privileged: true
    volumes:
      - ./config/gitlab-runner:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
      - /bin/docker:/bin/docker
		]]>
			</programlisting>
			<para>启动 Gitlab runner</para>
			<screen>
		<![CDATA[
sudo chmod 666 /var/run/docker.sock
sudo usermod -aG docker $USER
docker-compose up -d
		]]>
			</screen>
			<para>注册 gitlab-runner 到 Gitlab</para>
			<screen>
		<![CDATA[
docker exec -it gitlab-runner gitlab-runner register		
		]]>
			</screen>
			<example>
				<title>Docker 部署 gitlab-runner 注册演示</title>
				<screen>
			<![CDATA[
[root@localhost gitlab]# docker-compose exec gitlab-runner gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=77 revision=8b63c432 version=14.3.1
Running in system-mode.                            
                                                   
Enter the GitLab instance URL (for example, https://gitlab.com/):
http://192.168.30.12/
Enter the registration token:
suDmuiYsdYoEvhX1ppBy
Enter a description for the runner:
[1d9ca588f551]: development
Enter tags for the runner (comma-separated):
shell
Registering runner... succeeded                     runner=suDmuiYs
Enter an executor: shell, ssh, docker+machine, docker-ssh+machine, custom, parallels, virtualbox, kubernetes, docker, docker-ssh:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 
[root@localhost gitlab]# 			
			]]>
				</screen>
			</example>
		</section>
	</section>

	<section id="install.centos6">
		<title>Yum 安装 GitLab</title>
		<screen><![CDATA[
yum localinstall -y https://downloads-packages.s3.amazonaws.com/centos-6.6/gitlab-ce-7.10.0~omnibus.2-1.x86_64.rpm

gitlab-ctl reconfigure

cp /etc/gitlab/gitlab.rb{,.original}
		]]></screen>
		<para>停止 GitLab 服务</para>
		<screen><![CDATA[
# gitlab-ctl stop
ok: down: logrotate: 1s, normally up
ok: down: nginx: 0s, normally up
ok: down: postgresql: 0s, normally up
ok: down: redis: 0s, normally up
ok: down: sidekiq: 1s, normally up
ok: down: unicorn: 0s, normally up
		]]></screen>
		<para>启动 GitLab 服务</para>
		<screen><![CDATA[
# gitlab-ctl start
ok: run: logrotate: (pid 3908) 0s
ok: run: nginx: (pid 3911) 1s
ok: run: postgresql: (pid 3921) 0s
ok: run: redis: (pid 3929) 1s
ok: run: sidekiq: (pid 3933) 0s
ok: run: unicorn: (pid 3936) 1s
		]]></screen>
		<para>配置gitlab</para>
		<screen><![CDATA[
# vim /etc/gitlab/gitlab.rb
external_url 'http://gitlab.example.com'
		]]></screen>
		<para>SMTP配置</para>
		<screen><![CDATA[
gitlab_rails['gitlab_email_enabled'] = true
gitlab_rails['gitlab_email_from'] = 'openunix@163.com'
gitlab_rails['gitlab_email_display_name'] = 'Neo'
gitlab_rails['gitlab_email_reply_to'] = 'noreply@example.com'

gitlab_rails['smtp_enable'] = true
gitlab_rails['smtp_address'] = "smtp.163.com"
gitlab_rails['smtp_user_name'] = "openunix@163.com"
gitlab_rails['smtp_password'] = "password"
gitlab_rails['smtp_domain'] = "163.com"
gitlab_rails['smtp_authentication'] = "login"		
		]]></screen>
		<para>任何配置文件变化都需要运行 # gitlab-ctl reconfigure</para>
		<para>WEB管理员</para>
		<screen><![CDATA[
# Username: root 
# Password: 5iveL!fe		
		]]></screen>
		<section id="gitlab.runner">
			<title>GitLab Runner</title>
			<screen><![CDATA[
curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash
sudo yum install gitlab-ci-multi-runner
		]]></screen>
			<para>进入 CI 配置页面 http://git.netkiller.cn/netkiller.cn/www.netkiller.cn/settings/ci_cd</para>
			<para>Specific Runners 你将看到 CI 的URL和他的Token </para>
			<para>Specify the following URL during the Runner setup: http://git.netkiller.cn/ci</para>
			<para>Use the following registration token during setup: wRoz1Y_6CXpNh2JbxN_s</para>
			<para>现在回到 GitLab Runner </para>
			<screen><![CDATA[
# gitlab-ci-multi-runner register
Running in system-mode.                            
                                                   
Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):
http://git.netkiller.cn/ci
Please enter the gitlab-ci token for this runner:
wRoz1Y_6CXpNh2JbxN_s
Please enter the gitlab-ci description for this runner:
[iZ62yln3rjjZ]: gitlab-ci-1
Please enter the gitlab-ci tags for this runner (comma separated):
test
Whether to run untagged builds [true/false]:
[false]: 
Registering runner... succeeded                     runner=wRoz1Y_6
Please enter the executor: docker, docker-ssh, shell, ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, parallels:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 
		]]></screen>
			<para>回到 Gitlab 页你将看到 Pending 状态变成 Running 状态</para>
			<para>升级 GitLab Runner</para>
			<screen><![CDATA[
yum install gitlab-ci-multi-runner		
		]]></screen>
		</section>
	</section>

	<section id="gitlab.ssl">
		<title>绑定SSL证书</title>
		<para>编辑 /etc/gitlab/gitlab.rb 文件</para>
		<screen>
		<![CDATA[
external_url 'https://git.netkiller.cn'

nginx['enable'] = true
nginx['redirect_http_to_https'] = true
nginx['ssl_certificate'] = "/etc/gitlab/ssl/git.netkiller.cn.crt"
nginx['ssl_certificate_key'] = "/etc/gitlab/ssl/git.netkiller.cn.key"
nginx['listen_https'] = true
nginx['http2_enabled'] = true
		]]>
		</screen>
	</section>
	<section>
		<title>Gitlab 命令行</title>
		<section>
			<title>重置密码</title>
			<para>进入容器</para>
			<screen>
		<![CDATA[
[root@localhost ~]# docker exec -it gitlab bash		
		]]>
			</screen>
			<para>重置密码</para>
			<screen>
		<![CDATA[
root@gitlab:~# gitlab-rake "gitlab:password:reset"
Enter username: neo
Enter password: 
Confirm password: 
Password successfully updated for user with username neo.		
		]]>
			</screen>
		</section>
	</section>
</section>
