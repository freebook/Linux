<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="gitlab"?>
	<title>Gitlab 项目管理</title>
	<para>实施DEVOPS首先我们要有一个项目管理工具。</para>
	<para>我建议使用 Gitlab，早年我倾向使用Trac，但Trac项目一直处于半死不活状态，目前来看Trac 对于
		Ticket管理强于Gitlab，但Gitlab发展的很快，我们可以看到最近的一次升级中Issue 加入了 Due date
		选项。Gitlab已经有风投介入，企业化运作，良性发展，未来会超越Redmine等项目管理软件，成为主流。所以我在工具篇采用Gitlab，BTW
		我没有使用 Redmine，我认为 Redmine 的发展方向更接近传统项目管理思维。
	</para>
	<para>软件项目管管理，我需要那些功能，Ticket/Issue管理、里程碑管理、内容管理Wiki、版本管理、合并分支、代码审查等等
	</para>
	<para>
		关于Gitlib的安装配置请参考
		<ulink url="http://www.netkiller.cn/project/project/gitlab/index.html" />
	</para>

	<section id="install">
		<title>GitLab</title>

		<para>
			<ulink url="https://github.com/gitlabhq" />
		</para>
		<para>GitLab是一个利用 Ruby on Rails 开发的开源应用程序，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。</para>
		<para>它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</para>
		<para>GitLab 5.0以前版本要求服务器端采用 Gitolite 搭建，5.0版本以后不再使用 Gitolite ，采用自己开发的 gitlab-shell 来实现。如果你觉得安装麻烦可以使用 GitLab Installers 一键安装程序。</para>
		
		<section>
			<title>Docker 方式安装 Gitlab</title>
			<screen>
		<![CDATA[
docker pull gitlab/gitlab-ce:latest		
		]]>
			</screen>
			<screen>
		<![CDATA[
docker run \
    -d \
    -p 443:443 \
    -p 80:80 \
    --name gitlab-ce \
    --restart unless-stopped \
    -v /opt/gitlab/etc:/etc/gitlab \
    -v /opt/gitlab/log:/var/log/gitlab \
    -v /opt/gitlab/data:/var/opt/gitlab \
    gitlab/gitlab-ce		
		]]>
			</screen>
			<para>配置对外url，域名或者ip，公网能访问即可</para>
			<screen>
		<![CDATA[
vim /mnt/gitlab/etc/gitlab.rb
添加一下配置：
external_url	'http://127.0.0.1' （你的域名或者ip地址）	
		]]>
			</screen>
			<para>配置邮箱</para>
			<screen>
		<![CDATA[
vim /mnt/gitlab/etc/gitlab.rb
gitlab_rails['smtp_enable'] = true
gitlab_rails['smtp_address'] = "smtp.qq.com"
gitlab_rails['smtp_port'] = 465
gitlab_rails['smtp_user_name'] = "13721218@qq.com"    (替换成自己的QQ邮箱)
gitlab_rails['smtp_password'] = "xxxxx"
gitlab_rails['smtp_domain'] = "smtp.qq.com"
gitlab_rails['smtp_authentication'] = "login"
gitlab_rails['smtp_enable_starttls_auto'] = true
gitlab_rails['smtp_tls'] = true
gitlab_rails['gitlab_email_from'] = '13721218@qq.com'  (替换成自己的QQ邮箱，且与smtp_user_name一致)		
		]]>
			</screen>
			<para>重新启动gitlab</para>
			<screen>
		<![CDATA[
docker restart gitlab-ce	
		]]>
			</screen>
		</section>
		<section>
			<title>CentOS 8 Stream</title>
			<screen>
			<![CDATA[
dnf install langpacks-en glibc-all-langpacks -y			
localectl set-locale LANG=en_US.UTF-8
			
sudo systemctl status firewalld 
sudo firewall-cmd --permanent --add-service=http 
sudo firewall-cmd --permanent --add-service=https 
sudo systemctl reload firewalld   

sudo dnf install postfix 
sudo systemctl enable postfix 
sudo systemctl start postfix


curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | bash

EXTERNAL_URL="http://gitlab.example.com"

export LC_ALL=en_US.UTF-8  
export LANG=en_US.UTF-8
export LC_CTYPE=UTF-8

dnf install -y gitlab-ce

cp /etc/gitlab/gitlab.rb{,.original}

gitlab-ctl reconfigure			
			]]>
			</screen>
			<para>查看 root 密码</para>
			<screen>
			<![CDATA[
[root@localhost ~]# cat  /etc/gitlab/initial_root_password
# WARNING: This value is valid only in the following conditions
#          1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails['initial_root_password']` setting in `gitlab.rb`, it was provided before database was seeded for the first time (usually, the first reconfigure run).
#          2. Password hasn't been changed manually, either via UI or via command line.
#
#          If the password shown here doesn't work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.

Password: dpzQFzltaq0BhAwDnugMf6MCFbvItXDvC+RcuN9R+wg=

# NOTE: This file will be automatically deleted in the first reconfigure run after 24 hours.			
			]]>
			</screen>
			<para>GitLab Runner</para>
			<screen>
			<![CDATA[
curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh" | sudo bash
dnf install gitlab-runner		
			]]>
			</screen>
		</section>
<section id="install">
			<title>Yum 安装 GitLab</title>
			<screen><![CDATA[
yum localinstall -y https://downloads-packages.s3.amazonaws.com/centos-6.6/gitlab-ce-7.10.0~omnibus.2-1.x86_64.rpm

gitlab-ctl reconfigure

cp /etc/gitlab/gitlab.rb{,.original}
		]]></screen>
			<para>停止 GitLab 服务</para>
			<screen><![CDATA[
# gitlab-ctl stop
ok: down: logrotate: 1s, normally up
ok: down: nginx: 0s, normally up
ok: down: postgresql: 0s, normally up
ok: down: redis: 0s, normally up
ok: down: sidekiq: 1s, normally up
ok: down: unicorn: 0s, normally up
		]]></screen>
			<para>启动 GitLab 服务</para>
			<screen><![CDATA[
# gitlab-ctl start
ok: run: logrotate: (pid 3908) 0s
ok: run: nginx: (pid 3911) 1s
ok: run: postgresql: (pid 3921) 0s
ok: run: redis: (pid 3929) 1s
ok: run: sidekiq: (pid 3933) 0s
ok: run: unicorn: (pid 3936) 1s
		]]></screen>
			<para>配置gitlab</para>
			<screen><![CDATA[
# vim /etc/gitlab/gitlab.rb
external_url 'http://gitlab.example.com'
		]]></screen>
			<para>SMTP配置</para>
			<screen><![CDATA[
gitlab_rails['gitlab_email_enabled'] = true
gitlab_rails['gitlab_email_from'] = 'openunix@163.com'
gitlab_rails['gitlab_email_display_name'] = 'Neo'
gitlab_rails['gitlab_email_reply_to'] = 'noreply@example.com'

gitlab_rails['smtp_enable'] = true
gitlab_rails['smtp_address'] = "smtp.163.com"
gitlab_rails['smtp_user_name'] = "openunix@163.com"
gitlab_rails['smtp_password'] = "password"
gitlab_rails['smtp_domain'] = "163.com"
gitlab_rails['smtp_authentication'] = "login"		
		]]></screen>
			<para>任何配置文件变化都需要运行 # gitlab-ctl reconfigure</para>
			<para>WEB管理员</para>
			<screen><![CDATA[
# Username: root 
# Password: 5iveL!fe		
		]]></screen>
			<section id="gitlab.runner">
				<title>GitLab Runner</title>
				<screen><![CDATA[
curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash
sudo yum install gitlab-ci-multi-runner
		]]></screen>
				<para>进入 CI 配置页面 http://git.netkiller.cn/netkiller.cn/www.netkiller.cn/settings/ci_cd</para>
				<para>Specific Runners 你将看到 CI 的URL和他的Token </para>
				<para>Specify the following URL during the Runner setup: http://git.netkiller.cn/ci</para>
				<para>Use the following registration token during setup: wRoz1Y_6CXpNh2JbxN_s</para>
				<para>现在回到 GitLab Runner </para>
				<screen><![CDATA[
# gitlab-ci-multi-runner register
Running in system-mode.                            
                                                   
Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):
http://git.netkiller.cn/ci
Please enter the gitlab-ci token for this runner:
wRoz1Y_6CXpNh2JbxN_s
Please enter the gitlab-ci description for this runner:
[iZ62yln3rjjZ]: gitlab-ci-1
Please enter the gitlab-ci tags for this runner (comma separated):
test
Whether to run untagged builds [true/false]:
[false]: 
Registering runner... succeeded                     runner=wRoz1Y_6
Please enter the executor: docker, docker-ssh, shell, ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, parallels:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 
		]]></screen>
				<para>回到 Gitlab 页你将看到 Pending 状态变成 Running 状态</para>
				<para>升级 GitLab Runner</para>
				<screen><![CDATA[
yum install gitlab-ci-multi-runner		
		]]></screen>
			</section>
		</section>
		<section id="gitlab.user">
			<title>用户管理</title>
			<para>初始化GitLab，进入Admin area，单击左侧菜单Users，在这里为gitlab添加用户</para>
		</section>
		<section id="gitlab.group">
			<title>组管理</title>
			<para>初始化GitLab组，我比较喜欢使用“域名”作为组名，例如example.com</para>
		</section>
		<section id="gitlab.project">
			<title>项目管理</title>
			<para>创建项目，我通常会在组下面创建项目，每个域名对应一个项目,例如www.example.com,images.example.com</para>
			<para>版本库URL如下</para>
			<screen><![CDATA[
http: http://192.168.0.1/example.com/www.example.com.git
ssh: git@192.168.0.1:example.com/www.example.com.git
		]]></screen>
		</section>
		<section id="gitlab.ssl">
			<title>绑定SSL证书</title>
			<para>编辑 /etc/gitlab/gitlab.rb 文件</para>
			<screen>
		<![CDATA[
external_url 'https://git.netkiller.cn'

nginx['enable'] = true
nginx['redirect_http_to_https'] = true
nginx['ssl_certificate'] = "/etc/gitlab/ssl/git.netkiller.cn.crt"
nginx['ssl_certificate_key'] = "/etc/gitlab/ssl/git.netkiller.cn.key"
nginx['listen_https'] = true
nginx['http2_enabled'] = true
		]]>
			</screen>
		</section>
		<section id="gitlab.faq">
			<title>FAQ</title>
			<section>
				<title>gitolite 向 gitlab 迁移</title>
				<para>早期gitlab使用gitolite为用户提供SSH服务，新版gitlab有了更好的解决方案gitlab-shell。安装新版本是必会涉及gitolite 向 gitlab 迁移，下面是我总结的一些迁移经验。</para>
				<para>第一步,将gitolite复制到gitlab仓库目录下</para>
				<screen><![CDATA[
# cp -r /gitroot/gitolite/repositories/* /var/opt/gitlab/git-data/repositories/
			]]></screen>
				<para>执行导入处理程序</para>
				<screen><![CDATA[
# gitlab-rake gitlab:import:repos
			]]></screen>
				<para>上面程序会处理一下目录结构，例如</para>
				<para>进入gitlab web界面，创建仓库与导入的仓库同名，这样就完成了导入工作。</para>
				<tip>
					<para>转换最好在git用户下面操作，否则你需要运行</para>
					<screen><![CDATA[
# chown git:git -R /var/opt/gitlab/git-data/repositories				
				]]></screen>
				</tip>
			</section>
			<section>
				<title>修改主机名</title>
				<para>默认Gitlab采用主机名，给我使用代理一定麻烦</para>
				<screen><![CDATA[
git@hostname:example.com/www.example.com.git
http://hostname/example.com/www.example.com.git
			]]></screen>
				<para>我们希望使用IP地址替代主机名</para>
				<screen><![CDATA[
git@172.16.0.1:example.com/www.example.com.git
http://172.16.0.1/example.com/www.example.com.git
			]]></screen>
				<para>编辑 /etc/gitlab/gitlab.rb 配置文件</para>
				<screen><![CDATA[
external_url 'http://172.16.0.1'
			]]></screen>
				<para>重新启动Gitlab</para>
				<screen><![CDATA[
# gitlab-ctl reconfigure
# gitlab-ctl restart
			]]></screen>
			</section>
		</section>

	</section>

	<section id="user">
		<title>创建用户</title>
		<procedure>
			<title>企业内部使用的 Gitlab 初始化</title>
			<step>
				<para>关闭在线用户注册</para>

			</step>
			<step>
				<para>Step 3.</para>
				<substeps>
					<step>
						<para>Substep a.</para>
					</step>
					<step>
						<para>Substep b.</para>
					</step>
				</substeps>
			</step>
		</procedure>
	</section>
	<section id="group">
		<title>创建组与项目</title>
		<procedure>
			<title>Gitlab 初始化 - 创建组</title>
			<step>
				<para>点击 New Group 按钮新建一个组，我习惯每个域一个组，所以我使用 netkiller.cn 作为组名称
				</para>
				<graphic format="png" fileref="../images/gitlab/group.png" width="" srccredit="neo" />
			</step>
			<step>
				<para>输入 netkiller.cn 然后单击 Create group</para>
				<graphic format="png" fileref="../images/gitlab/group.new.png" width="" srccredit="neo" />
			</step>
			<step>
				<para>组创建完毕</para>
				<graphic format="png" fileref="../images/gitlab/groups.png" width="" srccredit="neo" />
			</step>
		</procedure>
		<para>创建组后接下来创建项目</para>
		<procedure>
			<title>Gitlab 初始化 - 创建项目</title>
			<step>
				<para>单击 New Project 创建项目</para>
				<graphic format="png" fileref="../images/gitlab/projects.png" width="" srccredit="neo" />
			</step>
			<step>
				<para>输入 www.netkiller.cn 并点击 Create project 按钮创建项目</para>
				<graphic format="png" fileref="../images/gitlab/projects.new.png" width="" srccredit="neo" />
			</step>
			<step>
				<para>项目创建完毕</para>
				<graphic format="png" fileref="../images/gitlab/projects.created.png" width="" srccredit="neo" />
			</step>
		</procedure>
	</section>

	<section id="branch">
		<title>分支管理</title>
		<para>起初我们应对并行开发在Subversion上创建分支，每个任务一个分支，每个Bug一个分支，完成任务或修复bug后合并到开发分支(development)内部测试，然后再进入测试分支(testing)提交给测试组，测试组完成测试，最后进入主干(trunk)。对于Subverion来说每一个分支都是一份拷贝，SVN版本库膨胀的非常快。
		</para>
		<para>Git 解决了Svn 先天不足的分支管理功能，分支在GIT类似快照，同时GIT还提供了 pull request 功能。
		</para>
		<para>我们怎样使用git 的分支功能呢？ 首先我们不再为每个任务创建一个分支，将任务分支放在用户自己的仓库下面，通过 pull
			request 合并，同时合并过程顺便code review。
		</para>
		<para>master：是主干，只有开发部主管/经理级别拥有权限，只能合并来自testing的代码</para>
		<para>testing: 测试分支，测试部拥有权限，此分支不能修改，只能从开发分支合并代码。</para>
		<para>development：开发组的分支，Team拥有修改权限，可以合并，可以接受pull request, 可以提交代码</para>
		<para>tag 是 Release 本版，开发部主管/经理拥有权限</para>

		<para>分支的权限管理：</para>
		<para>master: 保护 </para>
		<para>testing：保护 </para>
		<para>development：保护 </para>

		<procedure>
			<title>Gitlab 分支应用 - 创建分支</title>
			<step>
				<para>首先，点击左侧 Commits 按钮，然后点击 Branches 按钮进入分支管理</para>
				<graphic format="png" fileref="../images/gitlab/branches.png" width="" srccredit="neo" />
			</step>

			<step>
				<para>点击 New branch 创建分支</para>
				<graphic format="png" fileref="../images/gitlab/branches.new.png" width="" srccredit="neo" />
				<para>在 Branch name 中输入分支名称，然后点击 Create branch 创建分支 </para>
			</step>
			<step>
				<para>分支已经创建</para>
				<graphic format="png" fileref="../images/gitlab/branches.created.png" width="" srccredit="neo" />
			</step>
		</procedure>
		<para>重复上面步骤，完成development分支的创建。</para>
		<para>保护分支：锁定分支，只允允许合并，不允许提交</para>
		<procedure>
			<title>保护分支</title>
			<step>
				<para>master</para>
				<para>testing</para>
			</step>

			<step>
				<para>Step 2.</para>

				<substeps>
					<step>

					</step>
					<step>
						<para>Substep b.</para>
					</step>
				</substeps>
			</step>
		</procedure>
	</section>
	<section id="issue">
		<title>Issue</title>
		<para>Issues 任务</para>
		<section>
			<title>Milestones 里程碑</title>
			<para>敏捷开发中可以每周一个里程碑，或者每个月一个里程碑。</para>
		</section>
		<section>
			<title>Labels 标签</title>
			<para>通常定义四个状态，开发，测试，升级，完成</para>
		</section>
	</section>
	<section id="codereview">
		<title>代码审查</title>
	</section>
	<section id="merge">
		<title>合并</title>
	</section>
	<section id="webhook">
		<title>WebHook</title>
	</section>
	<section id="cicd">
		<title>CI / CD</title>
		<para>https://gitlab.com/gitlab-examples</para>
		<section>
			<title>GitLab Runner</title>
			<section>
				<title>Install GitLab Runner</title>
				<screen>
				<![CDATA[
[root@localhost ~]# wget -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
--2019-06-06 16:19:31--  https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
Resolving gitlab-runner-downloads.s3.amazonaws.com (gitlab-runner-downloads.s3.amazonaws.com)... 52.216.10.19
Connecting to gitlab-runner-downloads.s3.amazonaws.com (gitlab-runner-downloads.s3.amazonaws.com)|52.216.10.19|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 30832000 (29M) [application/octet-stream]
Saving to: '/usr/local/bin/gitlab-runner'

100%[==================================================================================================================================================================================================>] 30,832,000   113KB/s   in 7m 11s 

2019-06-06 16:26:44 (69.8 KB/s) - '/usr/local/bin/gitlab-runner' saved [30832000/30832000]


[root@localhost ~]# chmod +x /usr/local/bin/gitlab-runner
[root@localhost ~]# useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash
[root@localhost ~]# gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner
Runtime platform                                    arch=amd64 os=linux pid=113531 revision=ac2a293c version=11.11.2
[root@localhost ~]# gitlab-runner start
Runtime platform                                    arch=amd64 os=linux pid=113576 revision=ac2a293c version=11.11.2				
				]]>
				</screen>
			</section>
			<section>
				<title>Registering Runners</title>
				<screen>
				<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=114182 revision=ac2a293c version=11.11.2
Running in system-mode.                            
                                                   
Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):
http://192.168.1.229/
Please enter the gitlab-ci token for this runner:
5iF88xJLfFgpvRJySam2
Please enter the gitlab-ci description for this runner:
[localhost.localdomain]: 
Please enter the gitlab-ci tags for this runner (comma separated):
my-tag,another-tag
Registering runner... succeeded                     runner=5iF88xJL
Please enter the executor: docker, docker-ssh, parallels, ssh, virtualbox, kubernetes, shell, docker+machine, docker-ssh+machine:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 				
				]]>
				</screen>
			</section>
			<section>
				<title>/etc/gitlab-runner/config.toml</title>
				<screen>
				<![CDATA[
[root@localhost ~]# cat /etc/gitlab-runner/config.toml
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800

[[runners]]
  name = "localhost.localdomain"
  url = "http://192.168.1.229/"
  token = "09936a09484934dec93d78ffa49b89"
  executor = "shell"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]				
				]]>
				</screen>
			</section>

		</section>
		<section>
			<title>配置 CI / CD</title>
			<para>进入项目设置界面，点击 Settings，再点击 CI / CD</para>
			<graphic format="png" fileref="../images/gitlab/cicd/CI-CD.png" width="" srccredit="neo" />
			<para>点击 Expand 按钮 展开 Runners</para>
			<graphic format="png" fileref="../images/gitlab/cicd/Runners.png" width="" srccredit="neo" />
			<para>这时可以看到 Set up a specific Runner manually, 后面会用到 http://192.168.1.96/ 和 zASzWwffenos6Jbbfsgu</para>
			<para>使用 SSH 登录 Gitlab runner 服务器，运行 gitlab-runner register</para>
			<screen>
			<![CDATA[
[root@localhost ~]# gitlab-runner register
Runtime platform                                    arch=amd64 os=linux pid=92925 revision=ac2a293c version=11.11.2
Running in system-mode.                            
                                                   
Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):
http://192.168.1.96/
Please enter the gitlab-ci token for this runner:
zASzWwffenos6Jbbfsgu
Please enter the gitlab-ci description for this runner:
[localhost.localdomain]: 
Please enter the gitlab-ci tags for this runner (comma separated):

Registering runner... succeeded                     runner=zASzWwff
Please enter the executor: docker, docker-ssh, shell, ssh, docker-ssh+machine, parallels, virtualbox, docker+machine, kubernetes:
shell
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 			
			]]>
			</screen>
			<para>返回 gitlab 查看注册状态</para>
			<graphic format="png" fileref="../images/gitlab/cicd/Runners-status.png" width="" srccredit="neo" />
		</section>

		<section id="gitlab.pipeline">
			<title>Pipeline</title>
			<section id="pipeline.cache">
				<title>cache</title>
				<para></para>
				<screen>
				<![CDATA[
image: maven:3.5.0-jdk-8

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

cache:
  paths:
    - .m2/repository/
    - target/

stages:
  - build
  - test
  - package

build:
  stage: build
  script: mvn compile

unittest:
  stage: test
  script: mvn test
  
  
package:
  stage: package
  script: mvn package
  artifacts:
    paths:
      - target/java-project-0.0.1-SNAPSHOT.jar
				
				]]>
				</screen>
			</section>
			<section id="before_script">
				<title>before_script</title>
			</section>
			<section id="stages">
				<title>stages</title>
				<screen>
				<![CDATA[
image: mileschou/php-testing-base:7.0

stages:
  - build
  - test
  - deploy

build_job:
  stage: build
  script:
    - composer install
  cache:
    untracked: true
  artifacts:
    paths:
      - vendor/

test_job:
  stage: test
  script:
    - php vendor/bin/codecept run
  dependencies:
    - build_job

deploy_job:
  stage: deploy
  script:
    - echo Deploy OK
  only:
    - release
  when: manual
				]]>
				</screen>
				<screen>
				<![CDATA[
  only: 
    - master
  tags:
    - ansible
				
				]]>
				</screen>
			</section>
			<section id="services">
				<title>services</title>
				<screen>
				<![CDATA[
services:
- mysql

variables:
  # Configure mysql service (https://hub.docker.com/_/mysql/)
  MYSQL_DATABASE: hello_world_test
  MYSQL_ROOT_PASSWORD: mysql

connect:
  image: mysql
  script:
  - echo "SELECT 'OK';" | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql "$MYSQL_DATABASE"
				
				]]>
				</screen>
			</section>
		</section>
		<section>
			<title>Java</title>
			<screen>
			<![CDATA[
#image: java:8
#image: maven:latest
image: maven:3.5.0-jdk-8

stages:
  - build
  - test
  - package

build:
  stage: build
  script: mvn compile

unittest:
  stage: test
  script: mvn test
  
  
package:
  stage: package
  script: mvn package
  artifacts:
    paths:
      - target/java-project-0.0.1-SNAPSHOT.jar

			]]>
			</screen>
			<screen>
			<![CDATA[
before_script:
 - echo "Execute scripts which are required to bootstrap the application. !"

after_script:
 - echo "Clean up activity can be done here !."

stages:
 - build
 - test
 - package
 - deploy

variables:
 MAVEN_CLI_OPTS: "--batch-mode"
 MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

cache:
 paths:
  - .m2/repository/
  - target/

build:
 stage: build
 image: maven:latest
 script:
  - mvn $MAVEN_CLI_OPTS clean compile

test:
 stage: test
 image: maven:latest
 script:
  - mvn $MAVEN_CLI_OPTS test

package:
 stage: package
 image: maven:latest
 script:
  - mvn $MAVEN_CLI_OPTS package
 artifacts:
  paths: [target/test-0.0.1.war]


deploy_test:
 stage: deploy
 script:
  - echo "########   To be defined   ########"
 environment: staging

deploy_prod:
 stage: deploy
 script:
  - echo "########   To be defined   ########"
 only:
  - master
 environment: production			
			]]>
			</screen>
		</section>
		<section>
			<title>vue.js android</title>
			<screen>
			<![CDATA[
build site:
  image: node:6
  stage: build
  script:
    - npm install --progress=false
    - npm run build
  artifacts:
    expire_in: 1 week
    paths:
      - dist

unit test:
  image: node:6
  stage: test
  script:
    - npm install --progress=false
    - npm run unit

deploy:
  image: alpine
  stage: deploy
  script:
    - apk add --no-cache rsync openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_dsa
    - chmod 600 ~/.ssh/id_dsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -rav --delete dist/ user@server.com:/your/project/path/			
			]]>
			</screen>
		</section>
	</section>
</chapter>
