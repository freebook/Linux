<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="gitlab"?>
	<title>Gitlab 项目管理</title>
	<para>实施DEVOPS首先我们要有一个项目管理工具。</para>
	<para>我建议使用 Gitlab，早年我倾向使用Trac，但Trac项目一直处于半死不活状态，目前来看Trac 对于
		Ticket管理强于Gitlab，但Gitlab发展的很快，我们可以看到最近的一次升级中Issue 加入了 Due date
		选项。Gitlab已经有风投介入，企业化运作，良性发展，未来会超越Redmine等项目管理软件，成为主流。所以我在工具篇采用Gitlab，BTW
		我没有使用 Redmine，我认为 Redmine 的发展方向更接近传统项目管理思维。
	</para>
	<para>软件项目管管理，我需要那些功能，Ticket/Issue管理、里程碑管理、内容管理Wiki、版本管理、合并分支、代码审查等等
	</para>
	<para>
		关于Gitlib的安装配置请参考
		<ulink url="http://www.netkiller.cn/project/project/gitlab/index.html" />
	</para>

	&section.gitlab.setup.xml;

	<section id="gitlab.user">
		<title>用户管理</title>
		<para>初始化GitLab，进入Admin area，单击左侧菜单Users，在这里为gitlab添加用户</para>
		<section id="user">
			<title>创建用户</title>
			<procedure>
				<title>企业内部使用的 Gitlab 初始化</title>
				<step>
					<para>关闭在线用户注册</para>
				</step>
				<step>
					<para>Step 3.</para>
					<substeps>
						<step>
							<para>Substep a.</para>
						</step>
						<step>
							<para>Substep b.</para>
						</step>
					</substeps>
				</step>
			</procedure>
		</section>
	</section>
	<section id="gitlab.group">
		<title>组管理</title>
		<para>初始化GitLab组，我比较喜欢使用“域名”作为组名，例如example.com</para>
		<section id="group">
			<title>创建组与项目</title>
			<procedure>
				<title>Gitlab 初始化 - 创建组</title>
				<step>
					<para>点击 New Group 按钮新建一个组，我习惯每个域一个组，所以我使用 netkiller.cn 作为组名称
					</para>
					<graphic format="png" fileref="../images/gitlab/group.png" width="" srccredit="neo" />
				</step>
				<step>
					<para>输入 netkiller.cn 然后单击 Create group</para>
					<graphic format="png" fileref="../images/gitlab/group.new.png" width="" srccredit="neo" />
				</step>
				<step>
					<para>组创建完毕</para>
					<graphic format="png" fileref="../images/gitlab/groups.png" width="" srccredit="neo" />
				</step>
			</procedure>
			<para>创建组后接下来创建项目</para>
			<procedure>
				<title>Gitlab 初始化 - 创建项目</title>
				<step>
					<para>单击 New Project 创建项目</para>
					<graphic format="png" fileref="../images/gitlab/projects.png" width="" srccredit="neo" />
				</step>
				<step>
					<para>输入 www.netkiller.cn 并点击 Create project 按钮创建项目</para>
					<graphic format="png" fileref="../images/gitlab/projects.new.png" width="" srccredit="neo" />
				</step>
				<step>
					<para>项目创建完毕</para>
					<graphic format="png" fileref="../images/gitlab/projects.created.png" width="" srccredit="neo" />
				</step>
			</procedure>
		</section>
	</section>
	<section id="gitlab.project">
		<title>项目管理</title>
		<para>创建项目，我通常会在组下面创建项目，每个域名对应一个项目,例如www.example.com,images.example.com</para>
		<para>版本库URL如下</para>
		<screen><![CDATA[
http: http://192.168.0.1/example.com/www.example.com.git
ssh: git@192.168.0.1:example.com/www.example.com.git
		]]></screen>
	</section>


	<section id="gitlab.branch">
		<title>分支管理</title>
		<para>起初我们应对并行开发在Subversion上创建分支，每个任务一个分支，每个Bug一个分支，完成任务或修复bug后合并到开发分支(development)内部测试，然后再进入测试分支(testing)提交给测试组，测试组完成测试，最后进入主干(trunk)。对于Subverion来说每一个分支都是一份拷贝，SVN版本库膨胀的非常快。
		</para>
		<para>Git 解决了Svn 先天不足的分支管理功能，分支在GIT类似快照，同时GIT还提供了 pull request 功能。
		</para>
		<para>我们怎样使用git 的分支功能呢？ 首先我们不再为每个任务创建一个分支，将任务分支放在用户自己的仓库下面，通过 pull
			request 合并，同时合并过程顺便code review。
		</para>
		<para>master：是主干，只有开发部主管/经理级别拥有权限，只能合并来自testing的代码</para>
		<para>testing: 测试分支，测试部拥有权限，此分支不能修改，只能从开发分支合并代码。</para>
		<para>development：开发组的分支，Team拥有修改权限，可以合并，可以接受pull request, 可以提交代码</para>
		<para>tag 是 Release 本版，开发部主管/经理拥有权限</para>

		<para>分支的权限管理：</para>
		<para>master: 保护 </para>
		<para>testing：保护 </para>
		<para>development：保护 </para>

		<procedure>
			<title>Gitlab 分支应用 - 创建分支</title>
			<step>
				<para>首先，点击左侧 Commits 按钮，然后点击 Branches 按钮进入分支管理</para>
				<graphic format="png" fileref="../images/gitlab/branches.png" width="" srccredit="neo" />
			</step>

			<step>
				<para>点击 New branch 创建分支</para>
				<graphic format="png" fileref="../images/gitlab/branches.new.png" width="" srccredit="neo" />
				<para>在 Branch name 中输入分支名称，然后点击 Create branch 创建分支 </para>
			</step>
			<step>
				<para>分支已经创建</para>
				<graphic format="png" fileref="../images/gitlab/branches.created.png" width="" srccredit="neo" />
			</step>
		</procedure>
		<para>重复上面步骤，完成development分支的创建。</para>
		<para>保护分支：锁定分支，只允允许合并，不允许提交</para>
		<procedure>
			<title>保护分支</title>
			<step>
				<para>master</para>
				<para>testing</para>
			</step>

			<step>
				<para>Step 2.</para>

				<substeps>
					<step>

					</step>
					<step>
						<para>Substep b.</para>
					</step>
				</substeps>
			</step>
		</procedure>
	</section>
	<section id="gitlab.issue">
		<title>Issue</title>
		<para>Issues 任务</para>
		<section>
			<title>Milestones 里程碑</title>
			<para>敏捷开发中可以每周一个里程碑，或者每个月一个里程碑。</para>
		</section>
		<section>
			<title>Labels 标签</title>
			<para>参考 github 设置</para>
			<literallayout>
			<![CDATA[
bug					Something isn't working
documentation		Improvements or additions to documentation
duplicate			This issue or pull request already exists
enhancement			New feature or request
good first issue	Good for newcomers
help wanted			Extra attention is needed
invalid				This doesn't seem right
question			Further information is requested
wontfix				This will not be worked on
			]]>
			</literallayout>
			<para></para>
			<para>通常定义四个状态，开发，测试，升级，完成</para>
		</section>
	</section>

	<section id="gitlab.merge">
		<title>合并</title>
		<section id="codereview">
			<title>代码审查</title>
		</section>
	</section>
	<section id="gitlab.webhook">
		<title>WebHook</title>
	</section>
	&section.gitlab.cicd.xml;
	&section.gitlab.pipeline.xml;
	<section id="gitlab.faq">
		<title>FAQ</title>
		<section>
			<title>查看日志</title>
			<screen>
				<![CDATA[
gitlab-ctl tail
gitlab-ctl tail gitlab-rails
gitlab-ctl tail nginx/gitlab_error.log				
				]]>
			</screen>
		</section>
		<section>
			<title>debug runner</title>
			<screen>
				<![CDATA[
gitlab-runner -debug run				
				]]>
			</screen>
		</section>
		<section>
			<title>gitolite 向 gitlab 迁移</title>
			<para>早期gitlab使用gitolite为用户提供SSH服务，新版gitlab有了更好的解决方案gitlab-shell。安装新版本是必会涉及gitolite 向 gitlab 迁移，下面是我总结的一些迁移经验。</para>
			<para>第一步,将gitolite复制到gitlab仓库目录下</para>
			<screen><![CDATA[
# cp -r /gitroot/gitolite/repositories/* /var/opt/gitlab/git-data/repositories/
			]]></screen>
			<para>执行导入处理程序</para>
			<screen><![CDATA[
# gitlab-rake gitlab:import:repos
			]]></screen>
			<para>上面程序会处理一下目录结构，例如</para>
			<para>进入gitlab web界面，创建仓库与导入的仓库同名，这样就完成了导入工作。</para>
			<tip>
				<para>转换最好在git用户下面操作，否则你需要运行</para>
				<screen><![CDATA[
# chown git:git -R /var/opt/gitlab/git-data/repositories				
				]]></screen>
			</tip>
		</section>
		<section>
			<title>修改主机名</title>
			<para>默认Gitlab采用主机名，给我使用代理一定麻烦</para>
			<screen><![CDATA[
git@hostname:example.com/www.example.com.git
http://hostname/example.com/www.example.com.git
			]]></screen>
			<para>我们希望使用IP地址替代主机名</para>
			<screen><![CDATA[
git@172.16.0.1:example.com/www.example.com.git
http://172.16.0.1/example.com/www.example.com.git
			]]></screen>
			<para>编辑 /etc/gitlab/gitlab.rb 配置文件</para>
			<screen><![CDATA[
external_url 'http://172.16.0.1'
			]]></screen>
			<para>重新启动Gitlab</para>
			<screen><![CDATA[
# gitlab-ctl reconfigure
# gitlab-ctl restart
			]]></screen>
		</section>
		<section>
			<title>ERROR: Uploading artifacts as "archive" to coordinator... too large archive</title>
			<para>持续集成提示错误</para>
			<screen>
			<![CDATA[
ERROR: Uploading artifacts as "archive" to coordinator... too large archive  id=185 responseStatus=413 Request Entity Too Large status=413 token=HKerPDE6
FATAL: too large                                   
ERROR: Job failed: exit status 1			
			]]>
			</screen>
			<para>解决方案</para>
			<para>Admin - Settings - CI/CD - Continuous Integration and Deployment</para>
			<para>点击 Expand 展开配置项</para>
			<para>Maximum artifacts size (MB): 修改构建无最大尺寸</para>
		</section>
	</section>
</chapter>
