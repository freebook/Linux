<!-- http://tldp.org/LDP/abs/html/index.html -->
<chapter id="index"><?dbhtml dir="bash" ?>
	<title>Bash Shell</title>
	<section id="option">
		<title>bash - GNU Bourne-Again SHell</title>
		<section>
			<title>-n 检查脚本是否有语法错误</title>
			<screen>

			</screen>
		</section>
		<section>
			<title>-x 显示详细运行过程</title>
			<screen>

			</screen>
		</section>
	</section>


<section id="introduction">
	<title>Introduction</title>
	<section id="commands.chsh">
		<title>chsh - change login shell</title>
		<screen>
# chsh --list
/bin/sh
/bin/bash
/sbin/nologin
/bin/tcsh
/bin/csh
/bin/ksh

# chsh --list-shells
/bin/sh
/bin/bash
/sbin/nologin
/bin/dash
/bin/zsh
		</screen>
		<screen>
$ chsh -s /bin/zsh
or
$ usermod -s /bin/zsh
		</screen>
		<para>show me current shell</para>
		<screen>
neo@netkiller:~$ echo $SHELL
/bin/zsh

neo@netkiller:~$ cat /etc/passwd|grep neo
neo:x:1000:1000:Neo Chen,,,:/home/neo:/bin/zsh
		</screen>
	</section>
	<section>
		<title>切换身份</title>
		<para>判断当前用户是否为root</para>
		<screen>
#!/bin/bash
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi		
		</screen>
		<para>使用 #!/bin/su 可以切换当前shell的所有者，全局切换</para>
		<screen>
# cat test.sh

#!/bin/su www
ls
		</screen>
		<para>局部切换，运行$PROG后将pid（进程ID）写入$PIDFILE文件</para>
		<screen>
		<![CDATA[
su - $USER -c "$PROG & echo \$! > $PIDFILE"
		]]>
		</screen>
	</section>
	<section id="test">
		<title>test 命令</title>
		<screen>
test -x $HAPROXY || exit 0
test -f "$CONFIG" || exit 0
		</screen>
	</section>
	<section id="stdin-stdout-stderr">
		<title>I/O 重定向</title>
		<screen>
		<![CDATA[
cat <<End-of-message
   8 -------------------------------------
   9 This is line 1 of the message.
  10 This is line 2 of the message.
  11 This is line 3 of the message.
  12 This is line 4 of the message.
  13 This is the last line of the message.
  14 -------------------------------------
End-of-message
		]]>
		</screen>
		<para></para>
		<screen>
		<![CDATA[
MYSQL=mysql
MYSQLOPTS="-h $zs_host -u $zs_user -p$zs_pass $zs_db"

$MYSQL $MYSQLOPTS <<SQL
SELECT
        category.cat_id AS  cat_id ,
        category.cat_name AS  cat_name ,
        category.cat_desc AS  cat_desc ,
        category.parent_id AS  parent_id ,
        category.sort_order AS  sort_order ,
        category.measure_unit AS  measure_unit ,
        category.style AS  style ,
        category.is_show AS is_show ,
        category.grade AS  grade
FROM  category
SQL
		]]>
		</screen>
		<para><![CDATA[<<-LimitString]]>可以抑制输出时前边的tab(不是空格). 这可以增加一个脚本的可读性.</para>
		<screen>
		<![CDATA[
cat <<-ENDOFMESSAGE
	This is line 1 of the message.
	This is line 2 of the message.
	This is line 3 of the message.
	This is line 4 of the message.
	This is the last line of the message.
ENDOFMESSAGE

		]]>
		</screen>
		<para>关闭参数替换</para>
		<screen>
		<![CDATA[
NAME="John Doe"
RESPONDENT="the author of this fine script"

cat <<'Endofmessage'

Hello, there, $NAME.
Greetings to you, $NAME, from $RESPONDENT.

Endofmessage
		]]>
		</screen>
		<screen>
		<![CDATA[
NAME="John Doe"
RESPONDENT="the author of this fine script"

cat <<\Endofmessage

Hello, there, $NAME.
Greetings to you, $NAME, from $RESPONDENT.

Endofmessage
		]]>
		</screen>
		<section>
			<title>error 重定向</title>
			<screen>
			<![CDATA[
your_shell 2>&1
			]]>
			</screen>
		</section>
		<section>
			<title>使用块记录日志</title>
			<screen>
			<![CDATA[
{
	...
	...
} > $LOGFILE 2>&1
			]]>
			</screen>
		</section>
		<section id="tee">
			<title>tee - read from standard input and write to standard output and files</title>
			<screen>
echo 1 > /proc/sys/net/ipv4/ip_forward
echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward;
			</screen>
			<section id="nettee">
				<title>nettee - a network "tee" program</title>
				<screen>

				</screen>
			</section>
		</section>
		<section>
			<title>创建文件</title>
			<screen>
			<![CDATA[
cat << EOF > foo.sh
   printf "%s was here" "$name"
EOF

cat >> foo.sh <<EOF
   printf "%s was here" "$name"
EOF
			]]>
			</screen>

		</section>
		<section>
			<title>快速清空一个文件的内容</title>
			<screen>
$ > /www/access.log
			</screen>
		</section>
	</section>
	<section id="pipes">
		<title>pipes (FIFOs)</title>
		<para>create a pipes</para>
		<screen>
$ mkfifo /tmp/pipe
$ mkfifo -m 0644 /tmp/pipe

$ mknod /tmp/pipe p
		</screen>
		<para>let's see it</para>
		<screen>
$ ls -l /tmp/piple
prw-r--r-- 1 neo neo 0 2009-03-13 14:40 /tmp/piple
		</screen>
		<para>remove a pipes</para>
		<screen>
rm /tmp/pipe
		</screen>
		<para>using it</para>
		<para>standing by pipe</para>
		<screen>
$ cat /tmp/pipe
		</screen>
		<para>push string to pipe</para>
		<screen>
$ echo hello world > /tmp/pipe
		</screen>
		<para>fetch string from /tmp/pipe</para>
		<screen>
$ cat /tmp/piple
hello world
		</screen>
	</section>
	<section id="mktemp">
		<title>mktemp - create a temporary file or directory 临时目录与文件</title>
		<screen>
# mktemp
/tmp/tmp.p8p0v5YzPf

# mktemp /tmp/test.XXX
/tmp/test.d8J

# mktemp /tmp/test.XXXXXX
/tmp/test.cFebDX

# mktemp /tmp/test.XXXXXXX
/tmp/test.CnyLr7C
		</screen>
		<para>创建临时目录</para>
		<screen>
# mktemp -d
/tmp/tmp.xg5gFj0w8D

# mktemp -d --suffix=.tmp /tmp/test.XXXXX
/tmp/test.TDpz8.tmp

$ mktemp -d --suffix=.tmp -p /tmp deploy.XXXXXX
/tmp/deploy.FwebCc.tmp
		</screen>
	</section>
	<section id="history">
		<title>History 命令历史记录</title>
		<section>
			<title>.bash_history</title>
			<para>从安全角度考虑禁止记录history</para>
			<screen>
ln -s /dev/null .bash_history
			</screen>
			<section>
				<title>格式定义</title>
				<para>定制.bash_history格式</para>
				<screen>
export HISTSIZE=1000
export HISTFILESIZE=2000
export HISTTIMEFORMAT="%Y-%m-%d-%H:%M:%S "
export HISTFILE="~/.bash_history"
				</screen>

				<para>看看实际效果</para>
				<screen>
$ history | head
    1  2012-02-27-09:10:45 do-release-upgrade
    2  2012-02-27-09:10:45 vim /etc/network/interfaces
    3  2012-02-27-09:10:45 vi /etc/network/interfaces
    4  2012-02-27-09:10:45 ping www.163.com
				</screen>
				<tip>
					<para>CentOS 可以添加到 /etc/bashrc 这样可以对所有用户起作用</para>
					<screen>
echo 'export HISTTIMEFORMAT="%Y-%m-%d-%H:%M:%S "' >> /etc/bashrc
					</screen>
				</tip>
			</section>
			<section>
				<title>设置忽略命令</title>
				<para>HISTIGNORE 可以设置那些命令不记入history列表。</para>
				<screen>
HISTIGNORE="ls:ll:la:cd:exit:clear:logout"
HISTTIMEFORMAT="[%Y-%m-%d - %H:%M:%S] "
HISTFILE=~/.history
HISTSIZE=50000
SAVEHIST=50000
				</screen>
			</section>
		</section>
		<section>
			<title>.mysql_history</title>
			<screen>
ln -s /dev/null .mysql_history
			</screen>
			<para>插入时间点，在~/.bashrc中加入下面命令</para>
			<screen>
$ tail ~/.bashrc
echo `date` >> ~/.mysql_history
			</screen>
			<screen>
$ tail ~/.mysql_history
EXPLAIN SELECT * FROM stuff where id=3 \G
EXPLAIN SELECT * FROM stuff where id='3' \G
EXPLAIN SELECT * FROM stuff where id='2' \G
Mon Feb 27 09:15:18 CST 2012
EXPLAIN SELECT * FROM stuff where id='2' and created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='1' and created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='3' and created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='2' and created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='2' or created = '2012-02-01' \G
EXPLAIN SELECT * FROM stuff where id='2' and created = '2012-02-01' \G
Mon Feb 27 11:48:37 CST 2012
			</screen>
		</section>
	</section>

	<section id="hash">
		<title>hash - hash database access method</title>
		<para>hase 命令：用来显示和清除哈希表，执行命令的时候，系统将先查询哈希表。</para>
		<para>当你输入命令，首先在hash表中寻找，如果不存在，才会利用$PATH环境变量指定的路径寻找命令，然后加以执行。同时也会将其放入到hash table 中，当下一次执行同样的命令时就不会再通过$PATH寻找。以此提高命令的执行效率。</para>

		<para>显示哈希表中命令使用频率</para>
		<screen>
$ hash
hits	command
   6	/usr/bin/svn
   1	/bin/chown
   3	/bin/bash
   4	/usr/bin/git
  12	/usr/bin/php
   1	/bin/rm
   1	/bin/chmod
   1	/usr/bin/nmap
   5	/bin/cat
  13	/usr/bin/vim
   3	/usr/bin/sudo
   4	/bin/sed
   2	/bin/ps
   2	/usr/bin/man
  23	/bin/ls
		</screen>
		<para>显示哈希表</para>
		<screen>
$ hash -l
builtin hash -p /usr/bin/svn svn
builtin hash -p /bin/chown chown
builtin hash -p /bin/bash bash
builtin hash -p /usr/bin/git git
builtin hash -p /usr/bin/php php
builtin hash -p /bin/rm rm
builtin hash -p /bin/chmod chmod
builtin hash -p /usr/bin/nmap nmap
builtin hash -p /bin/cat cat
builtin hash -p /usr/bin/vim vim
builtin hash -p /usr/bin/sudo sudo
builtin hash -p /bin/sed sed
builtin hash -p /bin/ps ps
builtin hash -p /usr/bin/man man
builtin hash -p /bin/ls ls
		</screen>
		<para>显示命令的完整路径</para>
		<screen>
$ hash -t git
/usr/bin/git
		</screen>
		<para>向哈希表中增加内容</para>
		<screen>
		<![CDATA[
$ hash -p /home/www/deployment/run run

$ run
Usage: /home/www/deployment/run [OPTION] <server-id> <directory/timepoint>

OPTION:
	development <domain> <host>
	testing <domain> <host>
	production <domain> <host>

	branch {development|testing|production} <domain> <host> <branchname>
	revert {development|testing|production} <domain> <host> <revision>
	backup <domain> <host> <directory>
	release <domain> <host> <tags> <message>

	list
	list <domain> <host>

	clean {development|testing|production} <domain> <host>
	log <project> <line>

	conf list
	cron show
	cron setup
	cron edit
		]]>
		</screen>
		<para>命令等同于</para>
		<screen>
PATH=$PATH:$HOME/www/deployment

export PATH
		</screen>
		<para>删除哈希表内容</para>
		<screen>
$ hash -r

$ hash -l
hash: hash table empty
		</screen>
	</section>
	&chapter.bash.prompt.xml;
</section>

	&chapter.bash.variable.xml;
	&chapter.bash.conditions.xml;
	&chapter.bash.loop.xml;


<section id="functions">
	<title>Functions</title>
	<example>
		<title>Functions with parameters sample</title>
		<programlisting>
#!/bin/bash
function quit {
   exit
}
function e {
    echo $1
}
e Hello
e World
quit
echo foo
		</programlisting>
	</example>
	<section>
		<title>Local variables</title>
		<programlisting>
 #!/bin/bash
	HELLO=Hello
	function hello {
	        local HELLO=World
	        echo $HELLO
	}
	echo $HELLO
	hello
	echo $HELLO
		</programlisting>
	</section>
</section>
<section id="select">
	<title>User interfaces</title>
	<example>
		<title>Using select to make simple menus</title>
		<programlisting>
#!/bin/bash
OPTIONS="Hello Quit"
select opt in $OPTIONS; do
    if [ "$opt" = "Quit" ]; then
     echo done
     exit
    elif [ "$opt" = "Hello" ]; then
     echo Hello World
    else
     clear
     echo bad option
    fi
done
		</programlisting>
	</example>
	<example>
		<title>Using the command line</title>
		<programlisting>
#!/bin/bash
if [ -z "$1" ]; then
    echo usage: $0 directory
    exit
fi
SRCD=$1
TGTD="/var/backups/"
OF=home-$(date +%Y%m%d).tgz
tar -cZf $TGTD$OF $SRCD
		</programlisting>
	</example>
	<example>
		<title>Reading user input with read</title>
		<para>In many ocations you may want to prompt the user for some input, and there are several ways to achive this. This is one of those ways:</para>
		<programlisting>
#!/bin/bash
echo Please, enter your name
read NAME
echo "Hi $NAME!"
		</programlisting>
		<para>As a variant, you can get multiple values with read, this example may clarify this.</para>
		<programlisting>
#!/bin/bash
echo Please, enter your firstname and lastname
read FN LN
echo "Hi! $LN, $FN !"
		</programlisting>
	</example>
	<section>
		<title>input</title>
		<example>
			<title>read</title>
			<para>限时30秒内，输入你的名字</para>
			<screen>
$ read -p "Please input your name: " -t 30 named
Please input your name: neo

$ echo $named
			</screen>
		</example>
		<screen>
		<![CDATA[
READ_TIMEOUT=60
read -t "$READ_TIMEOUT" input

# if you do not want quotes, then escape it
input=$(sed "s/[;\`\"\$\' ]//g" <<< $input)

# For reading number, then you can escape other characters
input=$(sed 's/[^0-9]*//g' <<< $input)
		]]>
		</screen>
	</section>
</section>
	<section id="subshell">
		<title>subshell</title>
		<para>echo $$ $BASHPID ; ( echo $$ $BASHPID  )</para>
		<para>su 运行 shell 并获取 PID 并存入文件</para>
		<screen>
		<![CDATA[
su - $USER -c "$PROG & echo \$! > $PIDFILE"
		]]>
		</screen>
	</section>
	&chapter.bash.example.xml;

</chapter>