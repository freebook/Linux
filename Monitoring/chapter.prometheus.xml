<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="prometheus" ?>
	<title>Prometheus</title>
	<section>
		<title>安装 Prometheus</title>
		<section>
			<title>Docker 安装</title>
			<screen>
			<![CDATA[
docker run -d -p 9090:9090 -v ~/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus -config.file=/etc/prometheus/prometheus.yml -storage.local.path=/prometheus -storage.local.memory-chunks=10000			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
docker run -d -p 9100:9100 --user 995:995 \
-v "/:/hostfs" \
--net="host" \
prom/node-exporter \
--path.rootfs=/hostfs	
			]]>
			</screen>
			<para>检查 node-exporter 是否正常工作</para>
			<screen>
			<![CDATA[
$ curl http://localhost:9100/metrics
			]]>
			</screen>
			<para>安装 grafana</para>
			<screen>
			<![CDATA[
$ docker run -d --name grafana -p 3000:3000 --net=host -e "GF_SECURITY_ADMIN_PASSWORD=passw0rd" grafana/grafana			
			]]>
			</screen>
			<para>-e "GF_SERVER_ROOT_URL=http://grafana.server.name"</para>
			<screen>
			<![CDATA[
docker exec -it grafana cat /etc/grafana/grafana.ini > grafana.ini			
			]]>
			</screen>
			<para>环境变量配置的默认路径</para>
			<screen>
			<![CDATA[
环境变量					默认值
GF_PATHS_CONFIG			/etc/grafana/grafana.ini
GF_PATHS_DATA			/var/lib/grafana
GF_PATHS_HOME			/usr/share/grafana
GF_PATHS_LOGS			/var/log/grafana
GF_PATHS_PLUGINS		/var/lib/grafana/plugins
GF_PATHS_PROVISIONING	/etc/grafana/provisioning			
			]]>
			</screen>

		</section>
		<section>
			<title>docker swarm</title>
			<screen>
			<![CDATA[
$ docker service create --replicas 1 --name prometheus \
    --mount type=bind,source=`pwd`/prometheus.yml,destination=/etc/prometheus/prometheus.yml \
    --publish published=9090,target=9090,protocol=tcp \
    prom/prometheus
			]]>
			</screen>

		</section>
		<section>
			<title>docker-compose</title>
			<screen>
			<![CDATA[

			]]>
			</screen>
		</section>
	</section>
	<section>
		<title>Prometheus 命令行工具</title>
		<section>
			<title>刷新配置文件</title>
			<screen>
			<![CDATA[
#方式1: 
kill -HUP ${prometheus_pid} 

docker kill -s HUP <容器ID> 
 
#方式2: 
# 需要 --web.enable-lifecycle 参数为true
curl -X POST http://10.0.209.140:9090/-/reload			
			]]>
			</screen>

		</section>
		<section>
			<title>promtool 配置文件校验工具</title>
			<para>安装 promtool </para>
			<screen>
		<![CDATA[
go get github.com/prometheus/prometheus/cmd/promtool
promtool check rules /path/to/example.rules.yml		
		]]>
			</screen>

			<para></para>
			<screen>
		<![CDATA[
promtool check config /etc/prometheus/prometheus.yml
		]]>
			</screen>
		</section>
	</section>
	<section>
		<title>prometheus 配置</title>
		<section>
			<title>rules 规则配置</title>
			<para>prometheus.yml 配置文件</para>
			<screen>
			<![CDATA[
rule_files:
  - "rules/node.yml"	# 载入单个配置文件
  - "rules/*.rules"		# 通过通配符载入文件
			]]>
			</screen>
			<itemizedlist>
				<title>prometheus 支持两种 rules</title>
				<listitem>recording rules</listitem>
				<listitem>alerting rules</listitem>
			</itemizedlist>
			<section>
				<title>recording rules</title>
				<para></para>
				<screen>
			<![CDATA[
groups:
- name: cpu-node
  rules:
  - record: job_instance_mode:node_cpu_seconds:avg_rate5m
    expr: avg by (job, instance, mode) (rate(node_cpu_seconds_total[5m]))			
			]]>
				</screen>
			</section>
			<section>
				<title>alerting rules</title>
				<screen>
			<![CDATA[
groups:
- name: example
  rules:

  # Alert for any instance that is unreachable for >5 minutes.
  - alert: InstanceDown
    expr: up == 0
    for: 5m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} down"
      description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes."

  # Alert for any instance that has a median request latency >1s.
  - alert: APIHighRequestLatency
    expr: api_http_request_latencies_second{quantile="0.5"} > 1
    for: 10m
    annotations:
      summary: "High request latency on {{ $labels.instance }}"
      description: "{{ $labels.instance }} has a median request latency above 1s (current value: {{ $value }}s)"			
			]]>
				</screen>
			</section>
		</section>
	</section>
	
	&section.prometheus.xml;
	&section.prometheus.exporter.xml;
	&section.prometheus.alertmanager.xml;
	&section.prometheus.grafana.xml;
</chapter>