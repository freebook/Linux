<?xml version="1.0" encoding="UTF-8"?>
<!-- <part id="index"><?dbhtml dir="" ?> -->
<!-- <title>System</title> -->
<section id="install">
	<title>Installation</title>
	<section>
		<title>CentOS 6</title>
		<screen>
			<![CDATA[
yum install docker-io
service docker start
chkconfig docker on
docker pull centos:latest
docker images centos
			]]>
		</screen>
		<para>test</para>
		<screen>
			<![CDATA[
docker run -i -t centos /bin/bash
			]]>
		</screen>
	</section>
	<section>
		<title>CentOS 7 docker-ce</title>
		<para>从官方网站获得最新社区版</para>
		<screen>
			<![CDATA[
yum install -y yum-utils
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum makecache fast
yum -y install docker-ce

systemctl start docker
			]]>
		</screen>
		<para>测试安装是否成功</para>
		<screen>
			<![CDATA[
docker run hello-world
			]]>
		</screen>
	</section>
	<section>
		<title>Ubuntu</title>
		<para>Ubuntu 默认版本</para>
		<screen>
			<![CDATA[
$ sudo apt update
$ sudo apt install docker.io
$ sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker
$ sudo sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io
			]]>
		</screen>
		<screen>
			<![CDATA[
$ sudo docker run -i -t ubuntu /bin/bash
			]]>
		</screen>
	</section>
	<section>
		<title>Ubuntu docker-ce</title>
		<para>从官方网站获得最新社区版</para>
		<screen>
		<![CDATA[
#!/bin/bash

sudo apt remove docker docker-engine

sudo apt install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
	
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
   
sudo apt update
sudo apt install docker-ce

apt-cache madison docker-ce
		]]>
		</screen>
		<para>启动参数配置 /etc/default/docker</para>
		<screen>
		<![CDATA[
neo@ubuntu:~$ cat /etc/default/docker
# Docker Upstart and SysVinit configuration file

#
# THIS FILE DOES NOT APPLY TO SYSTEMD
#
#   Please see the documentation for "systemd drop-ins":
#   https://docs.docker.com/engine/admin/systemd/
#

# Customize location of Docker binary (especially for development testing).
#DOCKERD="/usr/local/bin/dockerd"

# Use DOCKER_OPTS to modify the daemon startup options.
#DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"

# If you need Docker to use an HTTP proxy, it can also be specified here.
#export http_proxy="http://127.0.0.1:3128/"

# This is also a handy place to tweak where Docker's temporary files go.
#export DOCKER_TMPDIR="/mnt/bigdrive/docker-tmp"

		]]>
		</screen>
		<para>启动脚本 /etc/init/docker.conf</para>
		<screen>
		<![CDATA[
neo@ubuntu:~$ sudo cat /etc/init/docker.conf
[sudo] password for neo: 
description "Docker daemon"

start on (filesystem and net-device-up IFACE!=lo)
stop on runlevel [!2345]

limit nofile 524288 1048576

# Having non-zero limits causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
limit nproc unlimited unlimited

respawn

kill timeout 20

pre-start script
	# see also https://github.com/tianon/cgroupfs-mount/blob/master/cgroupfs-mount
	if grep -v '^#' /etc/fstab | grep -q cgroup \
		|| [ ! -e /proc/cgroups ] \
		|| [ ! -d /sys/fs/cgroup ]; then
		exit 0
	fi
	if ! mountpoint -q /sys/fs/cgroup; then
		mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
	fi
	(
		cd /sys/fs/cgroup
		for sys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
			mkdir -p $sys
			if ! mountpoint -q $sys; then
				if ! mount -n -t cgroup -o $sys cgroup $sys; then
					rmdir $sys || true
				fi
			fi
		done
	)
end script

script
	# modify these in /etc/default/$UPSTART_JOB (/etc/default/docker)
	DOCKERD=/usr/bin/dockerd
	DOCKER_OPTS=
	if [ -f /etc/default/$UPSTART_JOB ]; then
		. /etc/default/$UPSTART_JOB
	fi
	exec "$DOCKERD" $DOCKER_OPTS --raw-logs
end script

# Don't emit "started" event until docker.sock is ready.
# See https://github.com/docker/docker/issues/6647
post-start script
	DOCKER_OPTS=
	DOCKER_SOCKET=
	if [ -f /etc/default/$UPSTART_JOB ]; then
		. /etc/default/$UPSTART_JOB
	fi

	if ! printf "%s" "$DOCKER_OPTS" | grep -qE -e '-H|--host'; then
		DOCKER_SOCKET=/var/run/docker.sock
	else
		DOCKER_SOCKET=$(printf "%s" "$DOCKER_OPTS" | grep -oP -e '(-H|--host)\W*unix://\K(\S+)' | sed 1q)
	fi

	if [ -n "$DOCKER_SOCKET" ]; then
		while ! [ -e "$DOCKER_SOCKET" ]; do
			initctl status $UPSTART_JOB | grep -qE "(stop|respawn)/" && exit 1
			echo "Waiting for $DOCKER_SOCKET"
			sleep 0.1
		done
		echo "$DOCKER_SOCKET is up"
	fi
end script
		
		]]>
		</screen>
		
	</section>
	<section>
		<title>检查 Docker 是否可用</title>
		<screen>
		<![CDATA[
docker -v
docker run ubuntu /bin/echo hello world
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker rmi $(docker images -q)		
		]]>
		</screen>
	</section>
	<section>
		<title>切换仓库镜像</title>
		<para>临时选择镜像, 您可以在 Docker 守护进程启动时传入 --registry-mirror 参数：</para>
		<screen>
		<![CDATA[
$ docker --registry-mirror=https://registry.docker-cn.com daemon
		]]>
		</screen>
		<para>设置默认镜像，修改 /etc/docker/daemon.json 文件，并添加上 registry-mirrors 键值。</para>
		<screen>
		<![CDATA[
{
  "registry-mirrors": ["https://registry.docker-cn.com"]
}
		]]>
		</screen>
	</section>
	<section id="docker.reset">
		<title>重置 Docker</title>
		<screen>
		<![CDATA[
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker rmi $(docker images -q)
docker volume rm $(docker volume ls -q)	
		]]>
		</screen>
	</section>
</section>
<!-- </part> -->
