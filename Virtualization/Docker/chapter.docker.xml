<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="docker" ?>
	<title>Docker</title>
	<para><ulink url="https://www.docker.com" /></para>
	&chapter.docker.install.xml;
	<section id="images">
		<title>镜像</title>
		<para>Docker 镜像地址 <ulink url="https://registry.hub.docker.com/">https://registry.hub.docker.com/</ulink></para>
		<section>
			<title>搜索镜像</title>
			<screen>
$ sudo docker search centos |more
NAME                                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
centos                                          The official build of CentOS.                   542       [OK]       
tianon/centos                                   CentOS 5 and 6, created using rinse instea...   28                   
ansible/centos7-ansible                         Ansible on Centos7                              13                   [OK]
saltstack/centos-6-minimal                                                                      7                    [OK]
blalor/centos                                   Bare-bones base CentOS 6.5 image                7                    [OK]
steeef/graphite-centos                          CentOS 6.x with Graphite and Carbon via ng...   6                    [OK]
ariya/centos6-teamcity-server                   TeamCity Server 8.1 on CentOS 6                 6                    [OK]
tutum/centos                                    Centos image with SSH access. For the root...   5                    [OK]
tutum/centos-6.4                                DEPRECATED. Use tutum/centos:6.4 instead. ...   5                    [OK]			
			</screen>
		</section>
		<section>
			<title>获取镜像</title>
			<para>可以使用 docker pull 命令来从官网仓库获取所需要的镜像。</para>
			<screen>
$ sudo docker pull ubuntu:14.04
			</screen>
			<para>等同于</para>
			<screen>
$ sudo docker pull registry.hub.docker.com/ubuntu:14.04
			</screen>
			<para>获得所有版本镜像</para>
			<screen>
$ sudo docker pull ubuntu	

$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              utopic              277eb4304907        3 days ago          215.6 MB
ubuntu              14.10               277eb4304907        3 days ago          215.6 MB
ubuntu              14.04               5506de2b643b        3 days ago          197.8 MB
ubuntu              trusty              5506de2b643b        3 days ago          197.8 MB
ubuntu              latest              5506de2b643b        3 days ago          197.8 MB
ubuntu              14.04.1             5506de2b643b        3 days ago          197.8 MB
ubuntu              precise             0b310e6bf058        3 days ago          116.1 MB
ubuntu              12.04.5             0b310e6bf058        3 days ago          116.1 MB
ubuntu              12.04               0b310e6bf058        3 days ago          116.1 MB
ubuntu              12.10               c5881f11ded9        4 months ago        172.1 MB
ubuntu              quantal             c5881f11ded9        4 months ago        172.1 MB
ubuntu              13.04               463ff6be4238        4 months ago        169.4 MB
ubuntu              raring              463ff6be4238        4 months ago        169.4 MB
ubuntu              13.10               195eb90b5349        4 months ago        184.6 MB
ubuntu              saucy               195eb90b5349        4 months ago        184.6 MB
ubuntu              10.04               3db9c44f4520        6 months ago        183 MB
ubuntu              lucid               3db9c44f4520        6 months ago        183 MB		
			</screen>
			<para>从其他服务器获得镜像</para>
			<screen>
$ sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04
			</screen>
			<para>完成后，即可随时使用该镜像了，例如创建一个容器，让其中运行 bash 应用。</para>
			<screen>
$ sudo docker run -t -i ubuntu:14.10 /bin/bash
			</screen>
		</section>
		<section>
			<title>列出本地镜像</title>
			<screen>
$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              14.10               277eb4304907        3 days ago          215.6 MB
ubuntu              latest              5506de2b643b        3 days ago          197.8 MB
			</screen>
		</section>
		<section>
			<title>创建镜像</title>
			<screen>

			</screen>
		</section>
		<section>
			<title>保存和载入镜像</title>
			<para>保存镜像</para>
			<screen>
$sudo docker save -o ubuntu_14.10.tar ubuntu:14.10			
			</screen>
			<para>载入镜像</para>
			<screen>
			<![CDATA[
$ sudo docker load --input ubuntu_14.10.tar
或
$ sudo docker load < ubuntu_14.10.tar
			]]>			
			</screen>
		</section>
		<section>
			<title>删除本地镜像</title>
			<screen>
$ sudo docker rmi ubuntu:12.04
Untagged: ubuntu:12.04
			</screen>
		</section>
	</section>
	<section id="container">
		<title>容器</title>
		<section>
			<title>启动与终止容器</title>
			<screen>
$ sudo docker run ubuntu:14.10 /bin/echo 'Hello world'
Hello world			
			</screen>
			<para>进入BASH</para>
			<screen>
$ sudo docker run -t -i ubuntu:14.10 /bin/bash
root@f8c7b2afff14:/# 			
			</screen>
			<para>start / stop / restart</para>
			<screen>
sudo docker start silly_bohr
silly_bohr

$ sudo docker stop silly_bohr
silly_bohr

$ sudo docker restart silly_bohr
silly_bohr
			</screen>
			<para>守护进程运行</para>
			<screen>
$ sudo docker run -d ubuntu:14.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"
4cdbb75eeabf3f1ea87bec91accdf5211639d0895e94ab94ffa1d55fb7f62e2a
			</screen>
			<para>通过 docker ps 命令来查看容器信息</para>
			<screen>
$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
4cdbb75eeabf        ubuntu:14.10        "/bin/sh -c 'while t   30 seconds ago      Up 28 seconds                           drunk_rosalind 
			</screen>
			<para>要获取容器的输出信息，可以通过 docker logs 命令。</para>
			<screen>
$ sudo docker logs insane_babbage			
			</screen>
			<para>注意：守护进程在后台运行，所以无输出，只能通过docker logs 命令查看</para>
		</section>
		<section>
			<title>进入容器</title>
			<screen>
$ sudo docker run -idt ubuntu:14.10
793f9805620d7e10564e0778c388640cb73b6a1aec663bf468904d72a4f219f2

$ sudo docker ps 
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
793f9805620d        ubuntu:14.10        "/bin/bash"         5 seconds ago       Up 4 seconds                            mad_elion           

$ sudo docker attach mad_elion 
root@793f9805620d:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
			</screen>
		</section>
		<section>
			<title>导出和导入容器</title>
			<para></para>
			<screen>
			<![CDATA[
$ sudo docker export 7691a814370e > ubuntu.tar
			]]>			
			</screen>
			<para></para>
			<screen>
			<![CDATA[
$ cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0
			]]>			
			</screen>
			<para>指定 URL 或者某个目录来导入，例如</para>
			<screen>
$sudo docker import http://example.com/exampleimage.tgz example/imagerepo			
			</screen>
		</section>
		<section>
			<title>删除容器</title>
			<para>使用 docker rm 来删除一个处于终止状态的容器。</para>
			<screen>
$ sudo docker ps -a
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS                      PORTS               NAMES
f8c7b2afff14        ubuntu:14.10        "/bin/bash"            14 minutes ago      Exited (0) 2 minutes ago                        agitated_fermat     
0abd2e5fc251        ubuntu:14.10        "/bin/echo 'Hello wo   15 minutes ago      Exited (0) 15 minutes ago                       clever_kowalevski 

$ sudo docker rm clever_kowalevski
clever_kowalevski

$ sudo docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
f8c7b2afff14        ubuntu:14.10        "/bin/bash"         16 minutes ago      Exited (0) 5 minutes ago                       agitated_fermat     			
			</screen>
			<para></para>
			<screen>
$ docker rm 719f98391ecf1d6f1f153ffea1bbd84cd2dc9cf6d31d5a4f348c60d98392814c
			</screen>
		</section>
	</section>
	<section id="repository">
		<title>仓库</title>
		<section>
			<title>登陆仓库</title>
			<para>登录</para>
			<screen>
$ sudo docker login
Username: netkiller
Password: 
Email: netkiller@msn.com
Login Succeeded
			</screen>
		</section>
		<section>
			<title>获取镜像</title>
			<screen>
docker pull ubuntu:14.04
			</screen>
		</section>
		<section>
			<title>上传镜像</title>
			<screen>
docker tag friendlyhello username/repository:tag
docker push username/repository:tag
			</screen>
		</section>
	</section>

	<section id="docker.volume">
		<title>卷管理</title>
		<section>
			<title>列出卷 </title>
			<para>docker volume ls</para>
			<screen>
# docker volume ls
DRIVER              VOLUME NAME
local               dbac41b6de88c75d2932d5949367b17f347f482977d508195375dbc71518ab27
			</screen>
		</section>
		<section>
			<title>创建卷</title>
			<screen>
# docker volume create --name WebVolume1
WebVolume1
			</screen>
			<para></para>
			<screen>
# docker volume ls
DRIVER              VOLUME NAME
local               WebVolume1
local               dbac41b6de88c75d2932d5949367b17f347f482977d508195375dbc71518ab27			
			</screen>
			
		</section>
		<section>
			<title>挂在镜像</title>
			<screen>
# docker run -ti --rm -v WebVolume1:/www ubuntu
# docker run -ti --rm -v WebVolume1:/www docker.io/centos:7
			</screen>
			<para>查看卷的挂载情况</para>
			<screen>
# df | grep /www
/dev/vda1       20510332 7943940  11501484  41% /www			
			</screen>
			<para>创建测试文件</para>
			<screen>
			<![CDATA[
# mkdir -p /www/netkiller.cn/www.netkiller.cn
# echo Helloworld > /www/netkiller.cn/www.netkiller.cn/index.html
# cat /www/netkiller.cn/www.netkiller.cn/index.html
Helloworld
# exit
exit
			]]>
			</screen>
		</section>
		<section>
			<title>检查卷</title>
			<screen>
# docker volume inspect WebVolume1
[
    {
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/WebVolume1/_data",
        "Name": "WebVolume1",
        "Options": {},
        "Scope": "local"
    }
]
			</screen>
		</section>
		<section>
			<title>删除卷</title>
			<screen>
# docker volume create AppVolume1
# docker volume rm AppVolume1
			</screen>	
		</section>
		<section>
			<title>销毁所有未使用的卷</title>
			<screen>
# docker volume prune
WARNING! This will remove all volumes not used by at least one container.
Are you sure you want to continue? [y/N] y
Deleted Volumes:
WebVolume1
3fd379f8c2cf8727d2e83e84e434ea1f122016957bd7cf78a0f05b6e5a69cf2b
app

Total reclaimed space: 11 B
			</screen>
		</section>
		<section>
			<title>在多个容器间共享卷</title>
			<para>容器一</para>
			<screen>
			<![CDATA[
# docker run -ti --name=Container1 -v DataVolume1:/opt/data ubuntu
			]]>
			</screen>
			<para>容器二</para>
			<screen>
			<![CDATA[
# docker run -ti --name=Container2 --volumes-from Container1 ubuntu
			]]>
			</screen>
			<para>进入容器一中查看数据</para>
			<screen>
			<![CDATA[
# docker start -ai Container1
			]]>
			</screen>
			<para>容器三，挂在只读卷</para>
			<screen>
			<![CDATA[
# docker run -ti --name=Container3 --volumes-from Container2:ro ubuntu
			]]>			
			</screen>
			<para>删除上面三个测试容易和卷</para>
			<screen>
			<![CDATA[
# docker rm Container1 Container2 Container3
# docker volume rm DataVolume1
			]]>
			</screen>
		</section>
		<section>
			<title>容器绑定本地文件系统</title>
			<subtitle>Bind mount a volume (default [])</subtitle>
			<screen>
			<![CDATA[
# docker run -it --name mycentos1 -v /www:/tmp/test docker.io/centos:7 /bin/bash

# docker run -d -v ~/logs:/var/log/nginx -p 80:80 -i nginx			
			]]>
			</screen>
		</section>
	</section>
	&chapter.docker.system.xml;
	&chapter.docker.dockerfile.xml;
	&chapter.docker.cli.xml;
	&chapter.docker.example.xml;
</chapter>