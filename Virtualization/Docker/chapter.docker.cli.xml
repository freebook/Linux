<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<section id="cli">
	<title>docker 命令</title>
	<section id="docker.info">
		<title>查看 docker 信息</title>
		<screen>
		<![CDATA[
neo@MacBook-Pro ~ % docker info
Containers: 9
 Running: 8
 Paused: 0
 Stopped: 1
Images: 5
Server Version: 18.09.2
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 9754871865f7fe2f4e74d43e2fc7ccd237edcbce
runc version: 09c8266bf2fcf9519a651b04ae54c967b9ab86ec
init version: fec3683
Security Options:
 seccomp
  Profile: default
Kernel Version: 4.9.125-linuxkit
Operating System: Docker for Mac
OSType: linux
Architecture: x86_64
CPUs: 4
Total Memory: 1.952GiB
Name: linuxkit-025000000001
ID: IT7A:OHXM:XG4E:HX53:ZMA3:GIRA:CYMP:6IJF:QKZ5:MQI4:6LU2:ZD7Z
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): true
 File Descriptors: 70
 Goroutines: 88
 System Time: 2019-03-31T04:23:51.43837431Z
 EventsListeners: 2
HTTP Proxy: gateway.docker.internal:3128
HTTPS Proxy: gateway.docker.internal:3129
Registry: https://index.docker.io/v1/
Labels:
Experimental: false
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false
Product License: Community Engine		
		]]>
		</screen>
	</section>
	<section id="run">
		<title>run</title>
		<para>run</para>
		<screen>
			$ sudo docker run ubuntu:14.04 /bin/echo 'Hello world'
			Hello world
		</screen>
	</section>
	<section id="start">
		<title>start / stop / restart</title>
		<screen>
			sudo docker start silly_bohr
			silly_bohr

			$ sudo docker stop silly_bohr
			silly_bohr

			$ sudo docker restart silly_bohr
			silly_bohr
		</screen>
	</section>
	<section id="ps">
		<title>ps</title>
		<screen>
			<![CDATA[
OPTIONS说明：
-a :显示所有的容器，包括未运行的。
-f :根据条件过滤显示的内容。
--format :指定返回值的模板文件。
-l :显示最近创建的容器。
-n :列出最近创建的n个容器。
--no-trunc :不截断输出。
-q :静默模式，只显示容器编号。
-s :显示总的文件大小。			
			]]>
		</screen>
		<screen>
			sudo docker ps
		</screen>
		<screen>
			$ sudo docker ps -l
			CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
			84391d1de0fc ubuntu:14.04 /bin/echo Hello worl 31 minutes ago Exit 0 romantic_ritchie
		</screen>
	</section>
	<section id="top">
		<title>top</title>
		<screen>
			$ sudo docker ps
			CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
			13b2a4a31455 ubuntu:14.04 /bin/bash 3 hours ago Up 3 hours silly_bohr

			$ sudo docker top silly_bohr
			UID PID PPID C STIME TTY TIME CMD
			root 23225 22908 0 12:17 pts/14 00:00:00 /bin/bash
		</screen>
	</section>
	<section id="inspect">
		<title>inspect</title>
		<screen>
			<![CDATA[
$ sudo docker inspect silly_bohr
[{
    "ID": "13b2a4a3145528d087c9d1580fa78aaa52e8a9bb973c9da923bceb9f9b9e7e5a",
    "Created": "2014-07-17T04:17:45.262480632Z",
    "Path": "/bin/bash",
    "Args": [],
    "Config": {
        "Hostname": "13b2a4a31455",
        "Domainname": "",
        "User": "",
        "Memory": 0,
        "MemorySwap": 0,
        "CpuShares": 0,
        "AttachStdin": true,
        "AttachStdout": true,
        "AttachStderr": true,
        "PortSpecs": null,
        "ExposedPorts": null,
        "Tty": true,
        "OpenStdin": true,
        "StdinOnce": true,
        "Env": [
            "HOME=/",
            "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        ],
        "Cmd": [
            "/bin/bash"
        ],
        "Dns": [
            "8.8.8.8",
            "8.8.4.4"
        ],
        "Image": "ubuntu",
        "Volumes": null,
        "VolumesFrom": "",
        "WorkingDir": "",
        "Entrypoint": null,
        "NetworkDisabled": false,
        "OnBuild": null
    },
    "State": {
        "Running": true,
        "Pid": 23225,
        "ExitCode": 0,
        "StartedAt": "2014-07-17T04:17:45.672269614Z",
        "FinishedAt": "0001-01-01T00:00:00Z",
        "Ghost": false
    },
    "Image": "e54ca5efa2e962582a223ca9810f7f1b62ea9b5c3975d14a5da79d3bf6020f37",
    "NetworkSettings": {
        "IPAddress": "172.17.0.2",
        "IPPrefixLen": 16,
        "Gateway": "172.17.42.1",
        "Bridge": "docker0",
        "PortMapping": null,
        "Ports": {}
    },
    "ResolvConfPath": "/var/lib/docker/containers/13b2a4a3145528d087c9d1580fa78aaa52e8a9bb973c9da923bceb9f9b9e7e5a/resolv.conf",
    "HostnamePath": "/var/lib/docker/containers/13b2a4a3145528d087c9d1580fa78aaa52e8a9bb973c9da923bceb9f9b9e7e5a/hostname",
    "HostsPath": "/var/lib/docker/containers/13b2a4a3145528d087c9d1580fa78aaa52e8a9bb973c9da923bceb9f9b9e7e5a/hosts",
    "Name": "/silly_bohr",
    "Driver": "aufs",
    "ExecDriver": "native-0.1",
    "Volumes": {},
    "VolumesRW": {},
    "HostConfig": {
        "Binds": null,
        "ContainerIDFile": "",
        "LxcConf": [],
        "Privileged": false,
        "PortBindings": {},
        "Links": null,
        "PublishAllPorts": false
    }
}]
			]]>
		</screen>
		<screen>
			$ sudo docker inspect -f '{{ .NetworkSettings.IPAddress }}' silly_bohr
		</screen>
	</section>
	<section id="images">
		<title>images</title>
		<screen>
			$ sudo docker images
			REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
			ubuntu 14.10 58faa899733f 2 weeks ago 196 MB
			ubuntu utopic 58faa899733f 2 weeks ago 196 MB
			ubuntu precise ea7d6801c538 3 weeks ago 127.5 MB
			ubuntu 12.04 ea7d6801c538 3 weeks ago 127.5 MB
			ubuntu 12.10 c5881f11ded9 4 weeks ago 172.2 MB
			ubuntu quantal c5881f11ded9 4 weeks ago 172.2 MB
			ubuntu 13.04 463ff6be4238 4 weeks ago 169.4 MB
			ubuntu raring 463ff6be4238 4 weeks ago 169.4 MB
			ubuntu 13.10 195eb90b5349 4 weeks ago 184.7 MB
			ubuntu saucy
			195eb90b5349 4 weeks ago 184.7 MB
			ubuntu 14.04 e54ca5efa2e9 4 weeks ago 276.5 MB
			ubuntu latest e54ca5efa2e9 4 weeks ago 276.5 MB
			ubuntu trusty e54ca5efa2e9 4 weeks ago 276.5 MB
			ubuntu 10.04 3db9c44f4520 12 weeks ago 183 MB
			ubuntu lucid 3db9c44f4520 12 weeks ago 183 MB
		</screen>
		<section>
			<title>Getting a new image</title>
			<screen>
				$ sudo docker pull centos
				Pulling repository centos
				b7de3133ff98: Pulling dependent layers
				5cc9e91966f7: Pulling fs layer
				511136ea3c5a: Download complete
				ef52fb1fe610: Download complete
			</screen>
		</section>
	</section>
	<section id="logs">
		<title>logs</title>
		<para>显示容器运行日志，用于排查异常情况</para>
		<para>例如下面是nginx容易启动出错日志</para>
		<screen>
			[root@netkiller]# docker logs my-nginx-container
			nginx: [emerg] invalid server name or wildcard "www.*.com" on 0.0.0.0:80
			nginx: [emerg] invalid server name or wildcard "www.*.com" on 0.0.0.0:80
			nginx: [emerg] invalid server name or wildcard "www.*.com" on 0.0.0.0:80
			nginx: [emerg] invalid server name or wildcard "www.*.com" on 0.0.0.0:80
			nginx: [emerg] invalid server name or wildcard "www.*.com" on 0.0.0.0:80
			nginx: [emerg] invalid server name or wildcard "www.*.com" on 0.0.0.0:80
		</screen>
	</section>
	<section id="history">
		<title>history</title>
		<para>镜像历史纪录</para>
		<screen>
		<![CDATA[
# docker history centos:tomcat
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
2faf9a2d2bdc        22 hours ago        /bin/sh -c #(nop)  CMD ["catalina.sh" "run"]    0 B                 
8e12c1e8fd89        22 hours ago        /bin/sh -c #(nop)  EXPOSE 8080/tcp              0 B                 
35158d8231c5        22 hours ago        /bin/sh -c #(nop)  VOLUME [/srv/tomcat/temp]    0 B                 
4302c5c13241        22 hours ago        /bin/sh -c #(nop)  VOLUME [/srv/tomcat/work]    0 B                 
53537696aa19        22 hours ago        /bin/sh -c #(nop) ADD file:ac42f23f37092b9...   298 B               
be04ba27a9ae        23 hours ago        /bin/sh -c set -x   && wget -O tomcat.tar....   8.75 MB             
847be662a35f        5 days ago          /bin/sh -c #(nop)  ENV TOMCAT_ASC_URL=http...   0 B                 
ac6550346558        5 days ago          /bin/sh -c #(nop)  ENV TOMCAT_TGZ_URL=http...   0 B                 
50c12be7ca48        5 days ago          /bin/sh -c #(nop)  ENV TOMCAT_VERSION=8.5.15    0 B                 
89c44758e4ae        5 days ago          /bin/sh -c #(nop)  ENV TOMCAT_MAJOR=8           0 B                 
560ad98c1b23        5 days ago          /bin/sh -c yum install -y java-1.8.0-openj...   236 MB              
befeedbb7dc7        5 days ago          /bin/sh -c #(nop) WORKDIR /srv/tomcat           0 B                 
c85cf394faf8        5 days ago          /bin/sh -c mkdir -p "$CATALINA_HOME"            0 B                 
debf78012b2c        5 days ago          /bin/sh -c #(nop)  ENV PATH=/srv/tomcat/bi...   0 B                 
ccc27f4f3bcf        5 days ago          /bin/sh -c #(nop)  ENV CATALINA_HOME=/srv/...   0 B                 
8f351964d568        6 days ago          /bin/sh -c #(nop)  MAINTAINER Netkiller <n...   0 B                 
3bee3060bfc8        9 days ago          /bin/sh -c #(nop)  CMD ["/bin/bash"]            0 B                 
<missing>           9 days ago          /bin/sh -c #(nop)  LABEL name=CentOS Base ...   0 B                 
<missing>           9 days ago          /bin/sh -c #(nop) ADD file:d22a9c627d1d1f3...   193 MB		
		]]>
		</screen>
	</section>
	<section id="reset">
		<title>重置 Docker </title>
		<screen>
		<![CDATA[
docker ps -aq | xargs docker rm -f
docker images -aq | xargs docker rmi -f	
		]]>
		</screen>
	</section>
	<section id="docker.cli.registry">
		<title>仓库操作</title>
		<para>
			<ulink url="https://docs.docker.com/engine/reference/commandline/login/" />
		</para>
		<para>登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</para>
		<section>
			<title>登陆</title>
			<screen>
			<![CDATA[
docker login -u 用户名 -p 密码			
			]]>
			</screen>
			<para>登陆到私有仓库</para>
			<screen>
			<![CDATA[
$ docker login localhost:8080			
			]]>
			</screen>
			<para>从标准输出传递密码</para>
			<screen>
			<![CDATA[
$ cat ~/my_password.txt | docker login --username foo --password-stdin			
			]]>
			</screen>
		</section>
		<section>
			<title>注销</title>
			<screen>
			<![CDATA[
docker logout			
			]]>
			</screen>
		</section>
	</section>
	<section id="docker.build">
		<title>build</title>
		<screen>
		<![CDATA[
$ docker build -f /path/to/a/Dockerfile .
		]]>
		</screen>
	</section>
	<section>
		<title>网络管理</title>
		<screen>
		<![CDATA[
docker network create -d bridge --subnet 172.25.0.0/16 private_network

docker run -d -v /usr/local/etc/redis/redis.conf:/usr/local/etc/redis/redis.conf -p 6379:6379 --network=private_network --name redis redis redis-server /usr/local/etc/redis/redis.conf

		]]>
		</screen>
	</section>
	
</section>
