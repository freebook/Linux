<?xml version="1.0" encoding="UTF-8"?>
<section id="minikube">
	<title>Minikube</title>
	<section id="minikube.install">
		<title>安装 </title>
		<section>
			<title>BIOS 设置</title>
			<para>执行下面命令检查服务器是否开启虚拟化技术</para>
			<screen>
			<![CDATA[
egrep --color 'vmx|svm' /proc/cpuinfo			
			]]>
			</screen>
			<para>如果没有任何输出，请重启服务器进入 BIOS 启用 VT-X 或 AMD-v</para>
		</section>
		<section>
			<title>CentOS</title>
			<screen>
			<![CDATA[
curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.13.2/bin/linux/amd64/kubectl && chmod +x kubectl && sudo cp kubectl /usr/local/bin/ && rm kubectl			
			]]>
			</screen>
			<screen>
			<![CDATA[
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
  && install minikube-linux-amd64 /usr/local/bin/minikube			
			]]>
			</screen>
			<para>尝试运行 minikube 如果输出帮助信息表示安装成功</para>
			<screen>
			<![CDATA[
minikube version
minikube version: v0.33.1			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
echo "1" > /proc/sys/net/bridge/bridge-nf-call-iptables			
			]]>
			</screen>
		</section>
		<section id="microk8s">
			<title>Ubuntu</title>
			<screen>
			<![CDATA[
snap install kubectl --classic			
snap install microk8s --channel=1.14/beta --classic	
			]]>
			</screen>
			<para>安装 VirtualBox</para>
			<screen>
			<![CDATA[
neo@ubuntu:~$ sudo apt install -y virtualbox			
			]]>
			</screen>
		</section>
		<section>
			<title>Mac OS</title>
			<screen>
			<![CDATA[
$ brew cask install virtualbox
$ brew cask install minikube
$ brew install kubectl
$ brew install kubernetes-helm
			]]>
			</screen>
			<screen>
			<![CDATA[
$ minikube start —vm-driver=virtualbox
$ minikube dashboard			
			]]>
			</screen>
		</section>
	</section>
	<section id="minikube.Quickstart">
		<title>Quickstart</title>
		<para>启动</para>
		<screen>
		<![CDATA[
minikube start
		]]>
		</screen>
		<para>运行一个 echoserver 镜像</para>
		<screen>
		<![CDATA[
kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080
kubectl expose deployment hello-minikube --type=NodePort
minikube service hello-minikube
		]]>
		</screen>
		<para>查询 echoserver 访问地址</para>
		<screen>
		<![CDATA[
minikube service hello-minikube --url		
		]]>
		</screen>
		<para>在浏览器中访问查询到的网址</para>
		<para>停止并删除镜像</para>
		<screen>
		<![CDATA[
minikube stop
minikube delete		
		]]>
		</screen>
		<example>
			<title>minikube 操作演示</title>
			<para>快速开始使用 minikube 运行一个镜像</para>
			<screen>
			<![CDATA[
[root@localhost ~]# kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080
kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed in a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.
deployment.apps/hello-minikube created

[root@localhost ~]# kubectl expose deployment hello-minikube --type=NodePort
service/hello-minikube exposed

[root@localhost ~]# minikube service hello-minikube
Opening kubernetes service default/hello-minikube in default browser...		

[root@localhost ~]# kubectl get pod
NAME                              READY   STATUS    RESTARTS   AGE
hello-minikube-5c856cbf98-6vfvp   1/1     Running   0          6m59s

[root@localhost ~]# minikube service hello-minikube --url
http://172.16.0.121:30436

[root@localhost ~]# curl http://172.16.0.121:30436
CLIENT VALUES:
client_address=172.17.0.1
command=GET
real path=/
query=nil
request_version=1.1
request_uri=http://172.16.0.121:8080/

SERVER VALUES:
server_version=nginx: 1.10.0 - lua: 10001

HEADERS RECEIVED:
accept=*/*
host=172.16.0.121:30436
user-agent=curl/7.29.0
BODY:
-no body in request-
			]]>
			</screen>
		</example>
	</section>
	<section id="minikube.command">
		<title>minikube 命令</title>
		<screen>
			<![CDATA[
[root@localhost ~]# minikube
Minikube is a CLI tool that provisions and manages single-node Kubernetes clusters optimized for development workflows.

Usage:
  minikube [command]

Available Commands:
  addons         Modify minikube's kubernetes addons
  cache          Add or delete an image from the local cache.
  completion     Outputs minikube shell completion for the given shell (bash or zsh)
  config         Modify minikube config
  dashboard      Access the kubernetes dashboard running within the minikube cluster
  delete         Deletes a local kubernetes cluster
  docker-env     Sets up docker env variables; similar to '$(docker-machine env)'
  help           Help about any command
  ip             Retrieves the IP address of the running cluster
  logs           Gets the logs of the running instance, used for debugging minikube, not user code
  mount          Mounts the specified directory into minikube
  profile        Profile sets the current minikube profile
  service        Gets the kubernetes URL(s) for the specified service in your local cluster
  ssh            Log into or run a command on a machine with SSH; similar to 'docker-machine ssh'
  ssh-key        Retrieve the ssh identity key path of the specified cluster
  start          Starts a local kubernetes cluster
  status         Gets the status of a local kubernetes cluster
  stop           Stops a running local kubernetes cluster
  tunnel         tunnel makes services of type LoadBalancer accessible on localhost
  update-check   Print current and latest version number
  update-context Verify the IP address of the running cluster in kubeconfig.
  version        Print the version of minikube

Flags:
      --alsologtostderr                  log to standard error as well as files
  -b, --bootstrapper string              The name of the cluster bootstrapper that will set up the kubernetes cluster. (default "kubeadm")
  -h, --help                             help for minikube
      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
      --log_dir string                   If non-empty, write log files in this directory
      --logtostderr                      log to standard error instead of files
  -p, --profile string                   The name of the minikube VM being used.  
                                         	This can be modified to allow for multiple minikube instances to be run independently (default "minikube")
      --stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
  -v, --v Level                          log level for V logs
      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging

Use "minikube [command] --help" for more information about a command.			
			]]>
		</screen>

		<section id="minikube.start">
			<title>启动 minikube</title>
			<section>
				<title>虚拟机驱动</title>
				<para>--vm-driver=none</para>
				<screen>
				<![CDATA[
minikube start --vm-driver=none
				]]>
				</screen>
			</section>
			<section>
				<title>指定 registry-mirror 镜像</title>
				<screen>
				<![CDATA[
minikube start --registry-mirror=https://registry.docker-cn.com
				]]>
				</screen>
			</section>
			<section>
				<title>开启GPU</title>
				<screen>
				<![CDATA[
minikube start --vm-driver kvm2 --gpu				
				]]>
				</screen>
			</section>
			<section>
				<title>日志输出级别</title>
				<para>指定日志输出级别</para>
				<screen>
				<![CDATA[
minikube start --v=7			
				]]>
				</screen>
			</section>
			<section>
				<title>CPU 和 内存分配</title>
				<screen>
				<![CDATA[
minikube start --memory 8000 --cpus 2			
				]]>
				</screen>
			</section>
			<section>
				<title>指定 kubernetes 版本</title>
				<screen>
				<![CDATA[
minikube start --memory 8000 --cpus 2 --kubernetes-version v1.6.0					
				]]>
				</screen>
			</section>
			<section>
				<title>配置启动项</title>
				<screen>
				<![CDATA[
minikube start --extra-config=apiserver.v=10 --extra-config=kubelet.max-pods=100				
				]]>
				</screen>
			</section>
		</section>
		<section id="minikube.stop">
			<title>停止 minikube</title>
			<screen>
			<![CDATA[
[root@localhost ~]# minikube stop
Stopping local Kubernetes cluster...
Machine stopped.			
			]]>
			</screen>
		</section>
		<section>
			<title>缓存镜像</title>
			<screen>
			<![CDATA[
# cache a image into $HOME/.minikube/cache/images

$ minikube cache add ubuntu:16.04
$ minikube cache add redis:3

# list cached images
$ minikube cache list
redis:3
ubuntu:16.04

# delete cached images
$ minikube cache delete ubuntu:16.04
$ minikube cache delete $(minikube cache list)
			]]>
			</screen>
		</section>
		<section>
			<title>清理 minikube</title>
			<screen>
			<![CDATA[
minikube delete
rm ~/.minikube 
minikube start
			]]>
			</screen>
		</section>
		<section>
			<title>Kubernetes 控制面板</title>
			<para>Dashboard是基于Web的Kubernetes管理界面。使用下面的命令启动：</para>
			<screen>
			<![CDATA[
minikube dashboard
			]]>
			</screen>
			<para>查询控制面板访问地址</para>
			<screen>
			<![CDATA[
$ minikube dashboard --url
http://192.168.3.14:30000			
			]]>
			</screen>
		</section>
		<section>
			<title>service</title>
			<para></para>
			<screen>
			<![CDATA[
[root@localhost ~]# minikube service hello-minikube --url
http://172.16.0.121:30436			
			]]>
			</screen>
		</section>
		<section>
			<title>查看日志</title>
			<screen>
			<![CDATA[
minikube logs -v10			
			]]>
			</screen>
		</section>
		<section>
			<title>查看 Docker 环境变量</title>
			<screen>
			<![CDATA[
minikube docker-env
			]]>
			</screen>
		</section>
		<section id="minikube.addons">
			<title>addons</title>
			<section>
				<title>启用 addons</title>
				<screen>
				<![CDATA[
minikube addons enable heapster
minikube addons enable ingress		
				]]>
				</screen>
				<para>启用 WebUI</para>
				<screen>
				<![CDATA[
[root@localhost ~]# minikube addons enable dashboard
dashboard was successfully enabled
[root@localhost ~]# minikube addons list | grep dashboard
- dashboard: enabled				
				]]>
				</screen>
			</section>
			<section>
				<title>查看 addons 列表</title>
				<screen>
				<![CDATA[
[root@localhost ~]# minikube addons list
- addon-manager: enabled
- dashboard: enabled
- default-storageclass: enabled
- efk: disabled
- freshpod: disabled
- gvisor: disabled
- heapster: disabled
- ingress: disabled
- kube-dns: disabled
- metrics-server: disabled
- nvidia-driver-installer: disabled
- nvidia-gpu-device-plugin: disabled
- registry: disabled
- registry-creds: disabled
- storage-provisioner: enabled
- storage-provisioner-gluster: disabled			
				]]>
				</screen>
			</section>
		</section>
		<section id="minikube.ssh">
			<title>SSH</title>
			<para>--vm-driver=none 不支持 ssh</para>
			<screen>
			<![CDATA[
[root@localhost ~]# minikube ssh
'none' driver does not support 'minikube ssh' command			
			]]>
			</screen>
		</section>
		<section id="minikube.ip">
			<title>查看IP地址</title>
			<screen>
			<![CDATA[
[root@localhost ~]# minikube ip
172.16.0.121			
			]]>
			</screen>
		</section>
	</section>
	<section id="minikube.faq">
		<title>FAQ</title>
		<section>
			<title>This computer doesn't have VT-X/AMD-v enabled. Enabling it in the BIOS is mandatory</title>
			<para>检查一下 BIOS 是否开启 VT-X/AMD-v</para>
			<para>如果在虚拟机安装 Minikube 也会遇到这个问题。 可以使用 --vm-driver=none 参数启动。</para>
			<screen>
			<![CDATA[
neo@ubuntu:~$ sudo minikube start --vm-driver=none
			]]>
			</screen>
		</section>
		<section>
			<title>ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables</title>
			<para>解决方法</para>
			<screen>
			<![CDATA[
echo "1" > /proc/sys/net/bridge/bridge-nf-call-iptables
			]]>
			</screen>
			<para>然后在 minikube start</para>
		</section>
		<section>
			<title>ERROR ImagePull</title>
			<para>[ERROR ImagePull]: failed to pull image k8s.gcr.io/pause:3.1: output: 3.1: Pulling from pause
				Get https://k8s.gcr.io/v2/pause/manifests/sha256:59eec8837a4d942cc19a52b8c09ea75121acc38114a2c68b98983ce9356b8610: net/http: TLS handshake timeout
			</para>
			<para>更换镜像再重试</para>
			<screen>
			<![CDATA[
[root@localhost ~]# minikube start --vm-driver=none --registry-mirror=https://registry.docker-cn.com			
			]]>
			</screen>
		</section>
		<section>
			<title>证书已存在错误</title>
			<para>启动提示如下错误，一般出现这种错误是因为 minikube stop, minikube delete 后再重启 minikube start</para>
			<screen>
			<![CDATA[
error execution phase kubeconfig/admin: a kubeconfig file "/etc/kubernetes/admin.conf" exists already but has got the wrong CA cert	
error execution phase kubeconfig/kubelet: a kubeconfig file "/etc/kubernetes/kubelet.conf" exists already but has got the wrong CA cert
error execution phase kubeconfig/controller-manager: a kubeconfig file "/etc/kubernetes/controller-manager.conf" exists already but has got the wrong CA cert
error execution phase kubeconfig/scheduler: a kubeconfig file "/etc/kubernetes/scheduler.conf" exists already but has got the wrong CA cert
			]]>
			</screen>
			<para>解决方法</para>
			<screen>
			<![CDATA[
[root@localhost ~]# mv /etc/kubernetes/admin.conf /etc/kubernetes/admin.conf.backup
[root@localhost ~]# mv /etc/kubernetes/kubelet.conf /etc/kubernetes/kubelet.conf.backup
[root@localhost ~]# mv /etc/kubernetes/controller-manager.conf /etc/kubernetes/controller-manager.conf.backup
[root@localhost ~]# mv /etc/kubernetes/scheduler.conf /etc/kubernetes/scheduler.conf.backup
			]]>
			</screen>
			<para>现在启动 minikube start 不会再出错</para>
			<screen>
			<![CDATA[
[root@localhost ~]# minikube start --vm-driver=none
Starting local Kubernetes v1.13.2 cluster...
Starting VM...
Getting VM IP address...
Moving files into cluster...
Setting up certs...
Connecting to cluster...
Setting up kubeconfig...
Stopping extra container runtimes...
Starting cluster components...
Verifying kubelet health ...
Verifying apiserver health ...
Kubectl is now configured to use the cluster.
===================
WARNING: IT IS RECOMMENDED NOT TO RUN THE NONE DRIVER ON PERSONAL WORKSTATIONS
	The 'none' driver will run an insecure kubernetes apiserver as root that may leave the host vulnerable to CSRF attacks

When using the none driver, the kubectl config and credentials generated will be root owned and will appear in the root home directory.
You will need to move the files to the appropriate location and then set the correct permissions.  An example of this is below:

	sudo mv /root/.kube $HOME/.kube # this will write over any previous configuration
	sudo chown -R $USER $HOME/.kube
	sudo chgrp -R $USER $HOME/.kube

	sudo mv /root/.minikube $HOME/.minikube # this will write over any previous configuration
	sudo chown -R $USER $HOME/.minikube
	sudo chgrp -R $USER $HOME/.minikube

This can also be done automatically by setting the env var CHANGE_MINIKUBE_NONE_USER=true
Loading cached images from config file.


Everything looks great. Please enjoy minikube!
			]]>
			</screen>
		</section>
	</section>
</section>