<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: chapter.system.network.xml 515 2013-01-15 06:34:09Z netkiller $ -->
<chapter id="index"><?dbhtml dir="network" ?>
	<title>Networking 网络管理</title>
	<section id="hosts">
		<title>hosts</title>
		<screen>
		<![CDATA[
# cat -n /etc/hosts
     1  # Do not remove the following line, or various programs
     2  # that require network functionality will fail.
     3  127.0.0.1               development.domain.org development netkiller.localdomain netkiller
     4  ::1             localhost6.localdomain6 localhost6

		]]>
		</screen>

		<section>
			<title>/etc/hostname</title>
			<screen><![CDATA[
# cat /etc/hostname
web1.example.com
			]]></screen>
			<para>查看IP地址</para>
			<screen>
			<![CDATA[
[root@localhost ~]# hostname --ip-address
::1 127.0.0.1			
			]]>
			</screen>
		</section>


		<section>
			<title>/etc/host.conf</title>
			<para>解析顺序配置文件</para>
			<screen><![CDATA[
[root@development bin]# cat /etc/host.conf
order hosts,bind
			]]></screen>
			<para>首先在/etc/hosts文件中寻找，如果不存在，再去DNS服务器中寻找</para>
		</section>
		<section>
			<title>/etc/hosts</title>
			<para>IP地址后面TAB符，然后写主机地址</para>
			<screen><![CDATA[
127.0.0.1       localhost.localdomain localhost
::1             localhost6.localdomain6 localhost6
192.168.1.10	development.example.com development
			]]></screen>
		</section>
		<section>
			<title>hosts.allow / hosts.deny</title>
			<para>/etc/hosts.allow 和 /etc/hosts.deny</para>
			<para>许可IP／禁止IP，相当于黑白名单</para>
		</section>
		<section>
			<title>/etc/resolv.conf</title>
			<screen>
			<![CDATA[
search example.com
nameserver 208.67.222.222
nameserver 208.67.220.220
			]]>
			</screen>
		</section>

	</section>
	<section id="nic">
		<title>Network adapter 网络适配器</title>
		<command>ethtool eth1</command>
		<screen><![CDATA[
neo@shenzhen:~/doc/Linux/xhtml$ sudo ethtool eth1
Settings for eth1:
        Supported ports: [ TP MII ]
        Supported link modes:   10baseT/Half 10baseT/Full
                                100baseT/Half 100baseT/Full
        Supports auto-negotiation: Yes
        Advertised link modes:  10baseT/Half 10baseT/Full
                                100baseT/Half 100baseT/Full
        Advertised auto-negotiation: Yes
        Speed: 100Mb/s
        Duplex: Full
        Port: MII
        PHYAD: 32
        Transceiver: internal
        Auto-negotiation: on
        Supports Wake-on: pumbg
        Wake-on: d
        Current message level: 0x00000007 (7)
        Link detected: yes
		]]></screen>
		<command>mii-tool</command>
		<screen><![CDATA[
neo@shenzhen:~/doc/Linux/xhtml$ sudo mii-tool
eth1: negotiated 100baseTx-FD, link ok
		]]></screen>

		<section id="nic.name">
			<title>接口名称</title>
			<para>Linux网卡默认接口名称是eth0，如果你想定义其他名称可以更改下面文件。</para>
			<para>/etc/udev/rules.d/70-persistent-net.rules</para>
			<screen><![CDATA[
cat /etc/udev/rules.d/70-persistent-net.rules

# This file maintains persistent names for network interfaces.
# See udev(7) for syntax.
#
# Entries are automatically added by the 75-persistent-net-generator.rules
# file; however you are also free to add your own entries.

# PCI device 0x10ec:0x8136 (r8169)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:1d:92:f0:37:58", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
			]]></screen>
			<para>双网卡实例</para>
			<screen><![CDATA[
# cat /etc/udev/rules.d/70-persistent-net.rules
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

# PCI device 0x8086:0x10d3 (e1000e)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:25:90:35:91:36", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"

# PCI device 0x8086:0x10d3 (e1000e)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:25:90:35:91:37", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
			]]></screen>
		</section>

	</section>
	<section id="interfaces">
		<title>Ethernet Interfaces 以太网接口</title>

		<para>restart</para>
		<screen><![CDATA[
sudo /etc/init.d/networking restart
		]]></screen>
		<section id="interfaces.ifquery">
			<title>ifquery</title>
			<screen><![CDATA[
$ sudo ifquery --list
lo
eth0
eth1
			]]></screen>
		</section>
		<section id="interfaces.dhcp">
			<title>DHCP</title>
			<para>DHCP</para>
			<screen><![CDATA[
sudo vi /etc/network/interfaces

# The primary network interface - use DHCP to find our address
auto eth0
iface eth0 inet dhcp
			]]></screen>

		</section>
		<section>
			<title>CentOS</title>
			<screen><![CDATA[
ifconfig eth0 192.168.0.10 netmask 255.255.255.0
or
ip addr add 192.168.0.10 dev eth0
		]]></screen>
			<para>ifcfg-eth0,ifcfg-eth1,ifcfg-eth2 ... ifcfg-eth(n)</para>
			<screen>
		<![CDATA[
[root@development httpd]# cat /etc/sysconfig/network-scripts/ifcfg-eth0
# Broadcom Corporation NetLink BCM5784M Gigabit Ethernet PCIe
DEVICE=eth0
BOOTPROTO=static
BROADCAST=192.168.3.255
HWADDR=00:25:64:A3:59:BF
IPADDR=192.168.3.40
IPV6INIT=yes
IPV6_AUTOCONF=yes
NETMASK=255.255.255.0
NETWORK=192.168.3.0
ONBOOT=yes
		]]>
			</screen>
			<para>eth0:1</para>
			<screen>
		<![CDATA[
[root@development httpd]# cp /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth0:1
[root@development httpd]# vi /etc/sysconfig/network-scripts/ifcfg-eth0:1
# Broadcom Corporation NetLink BCM5784M Gigabit Ethernet PCIe
DEVICE=eth0:1
BOOTPROTO=static
BROADCAST=192.168.3.255
HWADDR=00:25:64:A3:59:BF
IPADDR=192.168.3.41
IPV6INIT=yes
IPV6_AUTOCONF=yes
NETMASK=255.255.255.0
NETWORK=192.168.3.0
ONBOOT=yes
		]]>
			</screen>
			<para>reload network</para>
			<screen>
		<![CDATA[
[root@development ~]# /etc/init.d/network reload
Shutting down interface eth0:                              [  OK  ]
Shutting down loopback interface:                          [  OK  ]
Bringing up loopback interface:                            [  OK  ]
Bringing up interface eth0:
		]]>
			</screen>
		</section>
		<section id="interfaces.static">
			<title>Ubuntu</title>
			<para>Static IP</para>
			<screen><![CDATA[
# The primary network interface
auto eth0
iface eth0 inet static
address 192.168.3.90
gateway 192.168.3.1
netmask 255.255.255.0
network 192.168.3.0
broadcast 192.168.3.255

dns-nameservers 8.8.8.8 4.4.4.4
			]]></screen>
			<para>Setting up Second IP address or Virtual IP address in Ubuntu</para>
			<screen><![CDATA[
sudo vi /etc/network/interfaces

auto eth0:1
iface eth0:1 inet static
address 192.168.1.60
netmask 255.255.255.0
network x.x.x.x
broadcast x.x.x.x
gateway x.x.x.x

dns-nameservers 8.8.8.8 4.4.4.4
			]]></screen>
		</section>
	</section>
	<section id="gateway">
		<title>Gateway 设置默认网关</title>
		<para>default gateway</para>
		<screen><![CDATA[
$ sudo route add default gw 172.16.0.1
		]]></screen>
		<screen><![CDATA[
$ sudo ip route default via 172.16.0.1 dev eth0
		]]></screen>
		<section>
			<title>CentOS</title>
			<screen>
			<![CDATA[
[root@development ~]# cat /etc/sysconfig/network
NETWORKING=yes
NETWORKING_IPV6=yes
HOSTNAME=development.domain.org
GATEWAY=192.168.3.1
			]]>
			</screen>
		</section>
	</section>
	&section.network.dns.xml;
	<section id="forwarding">
		<title>IP forwarding(IP转发)</title>
		<para>enable IP forwarding</para>
		<screen><![CDATA[
neo@shenzhen:~$ sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1
		]]></screen>
		<screen><![CDATA[
# enable IP forwarding
echo 1 > /proc/sys/net/ipv4/ip_forward
		]]></screen>
		<para>ubuntu</para>
		<screen><![CDATA[
sysctl -w net.ipv4.ip_forward=1
		]]></screen>
	</section>
	<section id="bonding">
		<title>bonding</title>
		<para>绑定的前提条件：芯片组型号相同，而且网卡应该具备自己独立的BIOS芯片。</para>
		<section id="bonding">
			<title>bonding</title>
			<command>#vi ifcfg-bond0</command>
			<screen><![CDATA[
# cat ifcfg-bond0
DEVICE=bond0
BOOTPROTO=static
IPADDR=172.16.0.1
NETMASK=255.255.252.0
BROADCAST=172.16.3.254
ONBOOT=yes
TYPE=Ethernet
		]]></screen>
			<para>这里要主意，不要指定单个网卡的IP 地址、子网掩码。将上述信息指定到虚拟适配器(bonding)中即可</para>
			<screen><![CDATA[
[root@rhas-13 network-scripts]# cat ifcfg-eth0
DEVICE=eth0
ONBOOT=yes
BOOTPROTO=dhcp

[root@rhas-13 network-scripts]# cat ifcfg-eth1
DEVICE=eth1
ONBOOT=yes
BOOTPROTO=dhcp
		]]></screen>
			<para>编辑 /etc/modules.conf 文件，加入如下一行内容，以使系统在启动时加载bonding模块，对外虚拟网络接口设备为 bond0.加入下列两行:</para>
			<command>* /etc/modules.conf 文件已经不再使用</command>
			<screen>
		<![CDATA[
cat >> /etc/modprobe.d/bonding.conf <<EOF
alias bond0 bonding
options bond0 miimon=100 mode=1
EOF
        ]]>
			</screen>
			<para>
				说明：miimon是用来进行链路监测的。比如:miimon=100，那么系统每100ms监测一次链路连接状态，如果有一条线路不通就转入另一条线路；mode的值表示工作模式，他共有0， 1,2,3四种模式，常用的为0,1两种。mode=0表示load balancing (round-robin)为负载均衡方式，两块网卡都工作。mode=1表示fault-tolerance (active-backup)提供冗余功能，工作方式是主备的工作方式,也就是说默认情况下只有一块网卡工作,另一块做备份。bonding只能提供链路监测，即从主机到交换机的链路是否接通。如果只是交换机对外的链路down掉了，而交换机本身并没有故障，那么bonding会认为链路没有问题而继续使用。
			</para>

			<command># vi /etc/rc.d/rc.local</command>
			<screen><![CDATA[
ifenslave bond0 eth0 eth1
route add -net 172.31.3.254 netmask 255.255.255.0 bond0
		]]></screen>

			<para>到这时已经配置完毕 重新启动机器。重启会看见以下信息就表示配置成功了</para>
			<screen><![CDATA[
................
Bringing up interface bond0 OK
Bringing up interface eth0 OK
Bringing up interface eth1 OK
................
		]]></screen>
			<para>mode=1工作在主备模式下,这时eth1作为备份网卡是no arp的 [root@rhas-13 network-scripts]# ifconfig 验证网卡的配置信息</para>
			<para>那也就是说在主备模式下,当一个网络接口失效时(例如主交换机掉电等),不回出现网络中断, 系统会按照cat /etc/rc.d/rc.local里指定网卡的顺序工作,机器仍能对外服务,起到了失效保护的功能。在mode=0 负载均衡工作模式,他能提供两倍的带宽,下我们来看一下网卡的配置信息：</para>
			<para>在这种情况下出现一块网卡失效,仅仅会是服务器出口带宽下降,也不会影响网络使用。通过查看bond0的工作状态查询能详细的掌握bonding的工作状态</para>
			<para>Linux下通过网卡邦定技术既增加了服务器的可靠性,又增加了可用网络带宽,为用户提供不间断的关键服务。</para>

			<screen>
		    <![CDATA[
cat >> /etc/modprobe.d/bonding.conf <<EOF
alias bond0 bonding
options bond0 mode=balance-alb miimon=1000
EOF

cat > /etc/sysconfig/network-scripts/ifcfg-eth0 <<EOF
DEVICE="eth0"
ONBOOT="yes"
BOOTPROTO="none"
USERCTL="no"
NM_CONTROLLED="no"
EOF

cat > /etc/sysconfig/network-scripts/ifcfg-eth1 <<EOF
DEVICE="eth1"
ONBOOT="yes"
BOOTPROTO="none"
USERCTL="no"
NM_CONTROLLED="no"
EOF

cat > /etc/sysconfig/network-scripts/ifcfg-bond0 <<EOF
DEVICE="bond0"
ONBOOT="yes"
BOOTPROTO="none"
TYPE="Ethernet"
IPADDR=172.16.0.5
NETMASK=255.255.255.0
NETWORK=172.16.0.0
USERCTL="no"
NM_CONTROLLED="no"
EOF

modprobe bonding mode=balance-alb miimon=1000
ifconfig bond0 up
ifconfig bond0 172.16.0.5 netmask 255.255.255.0 up
ip route add default via 172.16.0.254 dev bond0
ifenslave bond0 eth0
ifenslave bond0 eth1

cat >> /etc/rc.local <<EOF
#-------------------------
ifenslave bond0 eth0
ifenslave bond0 eth1
ip route add default via 172.16.0.254 dev bond0
#-------------------------
EOF

more /proc/net/bonding/bond0
			]]>
			</screen>
		</section>
		<section>
			<title>Ubuntu</title>
			<para>ifenslave</para>
			<screen><![CDATA[
apt-get install ifenslave-2.6
			]]></screen>
			<para>/etc/modules</para>
			<screen><![CDATA[
bonding
			]]></screen>
			<para>modprobe bonding</para>

			<para>/etc/modprobe.d/aliases</para>
			<screen><![CDATA[
alias bond0 bonding
options bonding mode=0 miimon=100

or

options bonding mode=1 miimon=100 downdelay=200 updelay=200
			]]></screen>
			<example>
				<title>bonding example</title>
				<para>/etc/network/interfaces</para>
				<screen><![CDATA[
auto lo
iface lo inet loopback

iface eth0 inet dhcp
iface eth1 inet dhcp

auto bond0
iface bond0 inet static
address 172.16.0.1
netmask 255.255.255.0
gateway 172.16.0.254
up ifenslave bond0 eth0 eth1
down ifenslave -d bond0 eth0 eth1
				]]></screen>
			</example>
		</section>
	</section>

	<section id="wireless">
		<title>Wireless - WiFi 配置</title>
		<section>
			<title>rfkill - tool for enabling and disabling wireless devices</title>
			<screen><![CDATA[
$ rfkill list all
0: phy0: Wireless LAN
	Soft blocked: no
	Hard blocked: yes
			]]></screen>
			<para>锁定无线设备</para>
			<screen><![CDATA[
$ rfkill block 0

$ rfkill list 
0: phy0: Wireless LAN
	Soft blocked: yes
	Hard blocked: yes			
			]]></screen>
			<para>解锁无线设备</para>
			<screen><![CDATA[
$ rfkill unblock all

$ rfkill list all
0: phy0: Wireless LAN
	Soft blocked: no
	Hard blocked: yes
			]]></screen>
		</section>
		<section>
			<title>iwlist - Get more detailed wireless information from a wireless interface</title>
			<screen><![CDATA[
$ sudo iwlist wlan1 scanning |more

wlan1     Scan completed :
          Cell 01 - Address: 04:A1:51:99:0A:25
                    Channel:1
                    Frequency:2.412 GHz (Channel 1)
                    Quality=43/70  Signal level=-67 dBm  
                    Encryption key:on
                    ESSID:"szgw-p5"
                    Bit Rates:1 Mb/s; 2 Mb/s; 5.5 Mb/s; 11 Mb/s; 6 Mb/s
                              9 Mb/s; 12 Mb/s; 18 Mb/s
                    Bit Rates:24 Mb/s; 36 Mb/s; 48 Mb/s; 54 Mb/s
                    Mode:Master
                    Extra:tsf=0000000904486387
                    Extra: Last beacon: 1068ms ago
                    IE: Unknown: 0007737A67772D7035
                    IE: Unknown: 010882848B960C121824
                    IE: Unknown: 030101
                    IE: Unknown: 0706434E20010D14
                    IE: IEEE 802.11i/WPA2 Version 1
                        Group Cipher : TKIP
                        Pairwise Ciphers (2) : CCMP TKIP
                        Authentication Suites (1) : PSK
                    IE: WPA Version 1
                        Group Cipher : TKIP
                        Pairwise Ciphers (2) : CCMP TKIP
                        Authentication Suites (1) : PSK
                    IE: Unknown: 2A0100
                    IE: Unknown: 32043048606C
                    IE: Unknown: DD180050F20201018D0003A4000027A4000042435E0062322F00
                    IE: Unknown: DD1E00904C33CE111BFFFF000000000000000000000000000000000000000000
                    IE: Unknown: 2D1ACE111BFFFF000000000000000000000000000000000000000000
                    IE: Unknown: DD1A00904C34010D0A00000000000000000000000000000000000000
                    IE: Unknown: 3D16010D0A00000000000000000000000000000000000000
                    IE: Unknown: 4A0E14000A002C01C800140005001900
                    IE: Unknown: 7F0101
                    IE: Unknown: DD0900037F01010000FF7F
                    IE: Unknown: DD0A00037F04010000004000

			]]></screen>
			<para>搜索SSID</para>
			<screen><![CDATA[
$ sudo iwlist wlan1 scanning | grep ESSID
                    ESSID:"product"
                    ESSID:"wifi123456"
                    ESSID:"ChinaNet-zNNs"
                    ESSID:"ChinaNet-dqar"
                    ESSID:"360WiFi-SEM"
                    ESSID:"360\xE5\x85\x8D\xE8\xB4\xB9WiFi-A5"
                    ESSID:"\xE5\x8F\x96\xE4\xB8\xAA\xE4\xBB\x80\xE4\xB9\x88\xE5\x90\x8D\xE5\xAD\x97\xE5\x91\xA2\xEF\xBC\x9F"
                    ESSID:""
                    ESSID:""			
			]]></screen>
		</section>

		<section>
			<title>iwconfig - configure a wireless network interface</title>
			<screen>
			<![CDATA[
$ sudo iwconfig eth1 essid <ESSID> key <PASSWORD>			
			]]>
			</screen>
			<example>
				<title>命令行建立WiFi链接步骤</title>
				<screen><![CDATA[
$ sudo rfkill unblock all
$ sudo ifconfig wlan1 up
$ sudo iwlist wlan1 scanning | grep ESSID
$ sudo iwconfig wlan1 essid Netkiller key 66535215
			]]></screen>
			</example>
		</section>
		<section>
			<title>/proc/net/wireless</title>
			<screen><![CDATA[
$ cat /proc/net/wireless
Inter-| sta-|   Quality        |   Discarded packets               | Missed | WE
 face | tus | link level noise |  nwid  crypt   frag  retry   misc | beacon | 22			
			]]></screen>
		</section>

	</section>

	<section id="sys.net.centos">
		<title>CentOS 8 Stream</title>
		<section>
			<title>hostnamectl - Control the system hostname</title>
			<screen><![CDATA[
[root@netkiller ~]# hostnamectl
   Static hostname: netkiller.localdomain
         Icon name: computer-desktop
           Chassis: desktop
        Machine ID: 072e88a0fdd2447296554f3cd5129076
           Boot ID: a978056f50544355abd723b328a89b6f
  Operating System: CentOS Linux 7 (Core)
       CPE OS Name: cpe:/o:centos:centos:7
            Kernel: Linux 3.10.0-229.el7.x86_64
      Architecture: x86_64
			]]></screen>
			<para>设置 hostname</para>
			<screen>
			<![CDATA[
[root@netkiller ~]# hostnamectl set-hostname master
			]]>
			</screen>
			<para>如果不生效执行下面命令</para>
			<screen>
			<![CDATA[
systemctl restart systemd-hostnamed			
			]]>
			</screen>
		</section>
		<section id="nmtui">
			<title>nmtui - Text User Interface for controlling NetworkManager</title>
			<programlisting>
			<![CDATA[
# yum install NetworkManager-tui
# nmtui		
			]]>
			</programlisting>
			<screen>
		<![CDATA[
        ┌─┤ NetworkManager TUI ├──┐
        │                         │ 
        │ Please select an option │ 
        │                         │ 
        │ Edit a connection       │ 
        │ Activate a connection   │ 
        │ Set system hostname     │ 
        │                         │ 
        │ Quit                    │ 
        │                         │ 
        │                    <OK> │ 
        │                         │ 
        └─────────────────────────┘ 
		]]>
			</screen>
			<screen>
		<![CDATA[
# nmtui
# nmtui edit eno16777736
# nmtui connect eno1677773
		]]>
			</screen>
		</section>
		<section id="nmcli">
			<title>nmcli - command-line tool for controlling NetworkManager</title>
			<para>nmcli 是 nmtui 命令行版本。</para>
			<command>nmcli</command>
			<screen>
			<![CDATA[
nmcli 有 8 个参数：

help 提供有关 nmcli 命令和使用方法的帮助信息
general 返回 NetworkManager 的状态和总体配置信息
networking 提供命令来查询某个网络连接的状态和启动、禁用连接的功能
radio 提供命令来查询某个 WiFi 网络连接的状态和启动、禁用连接的功能
monitor 提供命令来监控 NetworkManager 的活动并观察网络连接的状态改变
connection 提供命令来启用或禁用网络接口、添加新的连接、删除已有连接等功能
device 主要被用于更改与某个设备（例如接口名称）相关联的连接参数或者使用一个已有的连接来连接设备
secret 注册 nmcli 来作为一个 NetworkManager 的秘密代理，用以监听秘密信息。这个子命令很少会被用到，因为当连接到网络时，nmcli 会自动做这些事
			]]>
			</screen>
			<section>
				<title>查看连接状态</title>
				<screen>
				<![CDATA[
[root@localhost ~]# nmcli general
STATE      CONNECTIVITY  WIFI-HW  WIFI     WWAN-HW  WWAN    
connected  full          enabled  enabled  enabled  enabled 				
				]]>
				</screen>
			</section>
			<section>
				<title>查看接口状态</title>
				<screen>
				<![CDATA[
[root@localhost ~]# nmcli connection show
NAME                UUID                                  TYPE      DEVICE  
enp8s0              ff04c285-bca6-48a3-b769-4871897bca7b  ethernet  enp8s0  
docker0             b5bcd58d-b826-4bee-b100-4ae6976d6f76  bridge    docker0 
The Peninsula 3-6   dc0d8214-3589-4044-9a05-8b5f50c3de1f  wifi      --  				
				]]>
				</screen>
				<para>显示激活状态的接口</para>
				<screen>
				<![CDATA[
[root@localhost ~]# nmcli connection show 
NAME                UUID                                  TYPE      DEVICE 
enp8s0              ff04c285-bca6-48a3-b769-4871897bca7b  ethernet  enp8s0 
The Peninsula 3-6   dc0d8214-3589-4044-9a05-8b5f50c3de1f  wifi      --     

[root@localhost ~]# nmcli connection show --active
NAME    UUID                                  TYPE      DEVICE 
enp8s0  ff04c285-bca6-48a3-b769-4871897bca7b  ethernet  enp8s0 				
				]]>
				</screen>
			</section>
			<section>
				<title>添加接口</title>
				<screen>
				<![CDATA[
nmcli connection add type ethernet ifname enp0s8				
				]]>
				</screen>
			</section>
			<section>
				<title>修改IP地址</title>
				<screen>
				<![CDATA[
$ nmcli connection modify enp8s0 ipv4.address 192.168.4.26/24
$ nmcli connection modify enp8s0 ipv4.method manual				
				]]>
				</screen>
				<para>DHCP</para>
				<screen>
				<![CDATA[
$ nmcli connection modify enp8s0 ipv4.method auto				
				]]>
				</screen>
				<screen>
				<![CDATA[
[root@localhost ~]# nmcli connection modify enp8s0 ipv4.address 192.168.3.26/24

[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp8s0 
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=dhcp
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=enp8s0
UUID=ff04c285-bca6-48a3-b769-4871897bca7b
DEVICE=enp8s0
ONBOOT=yes
IPADDR=192.168.3.26
PREFIX=24

[root@localhost ~]# ip addr show enp8s0:
2: enp8s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 00:26:9e:6f:bb:23 brd ff:ff:ff:ff:ff:ff
    inet 192.168.3.6/24 brd 192.168.3.255 scope global dynamic noprefixroute enp8s0
       valid_lft 601424sec preferred_lft 601424sec
    inet6 fe80::82e7:1911:232:d93/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever				
				]]>
				</screen>

			</section>
			<section>
				<title>停止接口</title>
				<screen>
				<![CDATA[
[root@localhost ~]# nmcli connection down docker0
Connection 'docker0' successfully deactivated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/2)

[root@localhost ~]# nmcli connection show 
NAME                UUID                                  TYPE      DEVICE 
enp8s0              ff04c285-bca6-48a3-b769-4871897bca7b  ethernet  enp8s0 
The Peninsula 6-3C  dc0d8214-3589-4044-9a05-8b5f50c3de1f  wifi      --    				
				]]>
				</screen>
			</section>
			<section>
				<title>编辑接口</title>
				<screen>
				<![CDATA[
[root@localhost ~]# nmcli connection edit enp8s0				
				]]>
				</screen>
				<para>print 显示配置信息</para>
				<screen>
				<![CDATA[
nmcli> print
===============================================================================
                      Connection profile details (enp8s0)
===============================================================================
connection.id:                          enp8s0
connection.uuid:                        ff04c285-bca6-48a3-b769-4871897bca7b
connection.stable-id:                   --
connection.type:                        802-3-ethernet
connection.interface-name:              enp8s0
connection.autoconnect:                 yes
connection.autoconnect-priority:        0
connection.autoconnect-retries:         -1 (default)
connection.multi-connect:               0 (default)
connection.auth-retries:                -1
connection.timestamp:                   1599726610
connection.read-only:                   no
connection.permissions:                 --
connection.zone:                        --
connection.master:                      --
connection.slave-type:                  --
connection.autoconnect-slaves:          -1 (default)
connection.secondaries:                 --
connection.gateway-ping-timeout:        0
connection.metered:                     unknown
connection.lldp:                        default
connection.mdns:                        -1 (default)
connection.llmnr:                       -1 (default)
connection.wait-device-timeout:         -1
-------------------------------------------------------------------------------
802-3-ethernet.port:                    --
802-3-ethernet.speed:                   0
802-3-ethernet.duplex:                  --
802-3-ethernet.auto-negotiate:          no
802-3-ethernet.mac-address:             --
802-3-ethernet.cloned-mac-address:      --
802-3-ethernet.generate-mac-address-mask:--
802-3-ethernet.mac-address-blacklist:   --
802-3-ethernet.mtu:                     auto
802-3-ethernet.s390-subchannels:        --
802-3-ethernet.s390-nettype:            --
802-3-ethernet.s390-options:            --
802-3-ethernet.wake-on-lan:             default
802-3-ethernet.wake-on-lan-password:    --
-------------------------------------------------------------------------------
ipv4.method:                            auto
ipv4.dns:                               --
ipv4.dns-search:                        --
ipv4.dns-options:                       --
ipv4.dns-priority:                      0
ipv4.addresses:                         192.168.3.26/24
ipv4.gateway:                           --
ipv4.routes:                            --
ipv4.route-metric:                      -1
ipv4.route-table:                       0 (unspec)
ipv4.routing-rules:                     --
ipv4.ignore-auto-routes:                no
ipv4.ignore-auto-dns:                   no
ipv4.dhcp-client-id:                    --
ipv4.dhcp-iaid:                         --
ipv4.dhcp-timeout:                      0 (default)
ipv4.dhcp-send-hostname:                yes
ipv4.dhcp-hostname:                     --
ipv4.dhcp-fqdn:                         --
ipv4.dhcp-hostname-flags:               0x0 (none)
ipv4.never-default:                     no
ipv4.may-fail:                          yes
ipv4.dad-timeout:                       -1 (default)
-------------------------------------------------------------------------------
ipv6.method:                            auto
ipv6.dns:                               --
ipv6.dns-search:                        --
ipv6.dns-options:                       --
ipv6.dns-priority:                      0
ipv6.addresses:                         --
ipv6.gateway:                           --
ipv6.routes:                            --
ipv6.route-metric:                      -1
ipv6.route-table:                       0 (unspec)
ipv6.routing-rules:                     --
ipv6.ignore-auto-routes:                no
ipv6.ignore-auto-dns:                   no
ipv6.never-default:                     no
ipv6.may-fail:                          yes
ipv6.ip6-privacy:                       -1 (unknown)
ipv6.addr-gen-mode:                     stable-privacy
ipv6.ra-timeout:                        0 (default)
ipv6.dhcp-duid:                         --
ipv6.dhcp-iaid:                         --
ipv6.dhcp-timeout:                      0 (default)
ipv6.dhcp-send-hostname:                yes
ipv6.dhcp-hostname:                     --
ipv6.dhcp-hostname-flags:               0x0 (none)
ipv6.token:                             --
-------------------------------------------------------------------------------
proxy.method:                           none
proxy.browser-only:                     no
proxy.pac-url:                          --
proxy.pac-script:                       --
-------------------------------------------------------------------------------
nmcli> 				
				]]>
				</screen>
				<para>设置 DHCP</para>
				<screen>
				<![CDATA[
nmcli> goto ipv4
You may edit the following properties: method, dns, dns-search, dns-options, dns-priority, addresses, gateway, routes, route-metric, route-table, routing-rules, ignore-auto-routes, ignore-auto-dns, dhcp-client-id, dhcp-iaid, dhcp-timeout, dhcp-send-hostname, dhcp-hostname, dhcp-fqdn, dhcp-hostname-flags, never-default, may-fail, dad-timeout
nmcli ipv4> set method auto
Do you also want to clear 'ipv4.addresses'? [yes]: 
nmcli ipv4> save
Connection 'enp8s0' (ff04c285-bca6-48a3-b769-4871897bca7b) successfully updated.
nmcli ipv4> quit				
				]]>
				</screen>
			</section>
			<section id="nmcli.connection.delete">
				<title>删除接口</title>
				<para>查看接口</para>
				<screen>
				<![CDATA[
[root@stage ~]# ifconfig
br-8e039a79ebcc: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:13:08:b4:52  txqueuelen 0  (Ethernet)
        RX packets 42334  bytes 7746029 (7.3 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 29017  bytes 11857277 (11.3 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0        				
				]]>
				</screen>
				<para>删除网桥</para>
				<screen>
				<![CDATA[
[root@stage ~]# nmcli connection delete br-8e039a79ebcc
Connection 'br-8e039a79ebcc' (d1a9382e-221e-4e5e-a97e-a098147a2f15) successfully deleted.				
				]]>
				</screen>
			</section>
			<section>
				<title>链接 WI-FI</title>
				<screen>
				<![CDATA[
sudo nmcli dev wifi connect netkiller password ******** ifname wlp1s0
sudo nmcli device
				]]>
				</screen>
				<para>运行命令后，会在/etc/NetworkManager/system-connections目录下看到一个名为“netkiller.nmconnection”的文件</para>
				<para>--ask 询问密码</para>
				<screen>
				<![CDATA[
sudo nmcli --ask dev wifi connect netkiller
 Password: 
 Device 'wlp2s0' successfully activated with 'f74121b-3245-48a2-ae25-1b6f789243984'.				
				]]>
				</screen>
			</section>
			<section>
				<title>显示设备信息</title>
				<screen>
				<![CDATA[
[root@localhost ~]# nmcli device status
DEVICE   TYPE      STATE      CONNECTION 
enp8s0   ethernet  connected  enp8s0     
docker0  bridge    unmanaged  --         
lo       loopback  unmanaged  --         
wlp5s0   wifi      unmanaged  --     				
				]]>
				</screen>
				<para>网卡设备详细信息</para>
				<screen>
				<![CDATA[
[root@localhost ~]# nmcli device show enp8s0
GENERAL.DEVICE:                         enp8s0
GENERAL.TYPE:                           ethernet
GENERAL.HWADDR:                         00:26:9E:6F:BB:23
GENERAL.MTU:                            1500
GENERAL.STATE:                          100 (connected)
GENERAL.CONNECTION:                     enp8s0
GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/1
WIRED-PROPERTIES.CARRIER:               on
IP4.ADDRESS[1]:                         192.168.3.6/24
IP4.GATEWAY:                            192.168.3.1
IP4.ROUTE[1]:                           dst = 0.0.0.0/0, nh = 192.168.3.1, mt = 100
IP4.ROUTE[2]:                           dst = 192.168.3.0/24, nh = 0.0.0.0, mt = 100
IP4.DNS[1]:                             192.168.3.1
IP4.DOMAIN[1]:                          home
IP6.ADDRESS[1]:                         fe80::82e7:1911:232:d93/64
IP6.GATEWAY:                            --
IP6.ROUTE[1]:                           dst = fe80::/64, nh = ::, mt = 100
IP6.ROUTE[2]:                           dst = ff00::/8, nh = ::, mt = 256, table=255				
				]]>
				</screen>
			</section>
		</section>
	</section>
	<section id="netplan">
		<title>Ubuntu netplan (Ubuntu 18.04 之后才用 netplan 管理网络)</title>
		<para>https://netplan.io/examples 参考例子</para>
		<section>
			<title>DHCP</title>
			<para>配置 DHCP</para>
			<example>
				<title>netplan dhcp 例子</title>
				<screen>
			<![CDATA[
neo@netkiller ~ % cat /etc/netplan/interfaces.yaml 
network:
  version: 2
  renderer: networkd
  ethernets:
    enp2s1:
      dhcp4: true
			]]>
				</screen>
				<para>启用生效</para>
				<screen>
			<![CDATA[
neo@netkiller ~ % sudo netplan apply			
			]]>
				</screen>
			</example>
		</section>
		<section>
			<title>静态IP地址</title>
			<screen>
			<![CDATA[
sudo  vi /etc/netplan/00-installer-config.yaml
 
# This is the network config written by 'subiquity'
network:
  ethernets:
    ens33:
      addresses: [192.168.0.102/24]
      dhcp4: false
      gateway4: 192.168.0.254			
			]]>
			</screen>
		</section>
	</section>
	&section.network.router.xml;
</chapter>
