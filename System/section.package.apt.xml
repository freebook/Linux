<?xml version="1.0" encoding="UTF-8"?>
<section id="package.apt">
	<title>APT 包管理</title>
	<para>包管理工具</para>
	<section id="apt-cache">
		<title>apt-cache</title>
		<section>
			<title>search</title>
			<screen>
			<![CDATA[
# apt-cache search tcpdump
			]]>
			</screen>
		</section>
		<section>
			<title>depends</title>
			<screen><![CDATA[
# apt-cache depends tcpdump
			]]></screen>
		</section>
		<section>
			<title>policy</title>
			<screen><![CDATA[
$ apt-cache policy tcpdump
tcpdump:
  Installed: 4.0.0-6ubuntu3
  Candidate: 4.0.0-6ubuntu3
  Version table:
 *** 4.0.0-6ubuntu3 0
        500 http://us.archive.ubuntu.com/ubuntu/ lucid/main Packages
        100 /var/lib/dpkg/status

			]]></screen>
		</section>
		<section>
			<title>查看所属镜像</title>
			<screen>
			<![CDATA[
neo@m-1d41c853af58:~$ apt-cache madison docker
    docker |      1.5-2 | http://mirrors.ustc.edu.cn/ubuntu cosmic/universe amd64 Packages
    docker |      1.5-2 | http://mirrors.ustc.edu.cn/ubuntu cosmic/universe i386 Packages			
			]]>
			</screen>
		</section>
	</section>
	<section id="apt-get">
		<title>Apt-Get</title>
		<para>apt 命令默认从cdrom安装</para>
		<para>注释/etc/apt/sources.list中的deb cdrom项, apt会从互联网上安装</para>
		<screen><![CDATA[
netkiller@Linux-server:~$ sudo vi /etc/apt/sources.list
# deb cdrom:[Ubuntu-Server 6.10 _Edgy Eft_ - Release i386 (20061025.1)]/ edgy main restricted
		]]></screen>

		<command>apt-setup </command>

		<para>安装是首先会下载包到/var/cache/apt/archives/目录</para>
		<section>
			<title>Search</title>
			<para>Searching a software package</para>
			<screen><![CDATA[
$ apt-cache search package
			]]></screen>
			<para>列出软件包的详细信息:</para>
			<screen><![CDATA[
$ apt-cache show package
			]]></screen>
			<para>列出软件包的依赖关系:</para>
			<screen><![CDATA[
$ apt-cache depends package
			]]></screen>
			<para>列出软件包, 以及逆向依赖的软件包的详细版本信息:</para>
			<screen><![CDATA[
$ apt-cache showpkg package
			]]></screen>
		</section>
		<section id="install">
			<title>Installation</title>
			<screen><![CDATA[
$ sudo apt install package
			]]></screen>
			<para>*.deb</para>
			<screen><![CDATA[
sudo dpkg -i *.deb
			]]></screen>
		</section>
		<section id="update">
			<title>Update</title>
			<screen><![CDATA[
$ apt update
$ apt upgrade
			]]></screen>
			<para>Smart software update</para>
			<screen><![CDATA[
$ apt dist-upgrade
			]]></screen>
		</section>
		<section id="remove">
			<title>Remove</title>
			<para> 删除系统中的foo软件包</para>
			<screen><![CDATA[
$ sudo apt remove foo
			]]></screen>
			<para>删除系统中的package软件包及其配置文件</para>
			<screen><![CDATA[
$ sudo apt remove --purge package
			]]></screen>
		</section>
		<section id="purge">
			<title>purge</title>
			<screen><![CDATA[
sudo apt purge package			
			]]></screen>
		</section>
		<!-- 　　apt-cache search package 搜索包 　　apt-cache show package 获取包的相关信息，如说明、大小、版本等 　　sudo apt-get install package 安装包 　　sudo apt-get install package - - reinstall 重新安装包 　　sudo apt-get -f install 修复安装"-f = ――fix-missing" 　　sudo apt-get remove package 删除包 　　sudo apt-get remove package - - purge 删除包，包括删除配置文件等 　　sudo apt-get update 更新源 　　sudo apt-get upgrade 更新已安装的包 　　sudo apt-get dist-upgrade 升级系统 　　sudo apt-get dselect-upgrade 使用 dselect 升级 　　apt-cache depends package 了解使用依赖 　　apt-cache rdepends package 是查看该包被哪些包依赖 
			　　sudo apt-get build-dep package 安装相关的编译环境 　　apt-get source package 下载该包的源代码 　　sudo apt-get clean && sudo apt-get autoclean 清理无用的包 　　sudo apt-get check 检查是否有损坏的依赖 -->
	</section>
	<section id="aptitude">
		<title>aptitude</title>
		<para>管理软件包</para>
		<screen><![CDATA[
neo@kerberos:~$ tasksel
neo@kerberos:~$ aptitude
		]]></screen>
	</section>
	<section id="upgrades">
		<title>Automatic Updates</title>
		<screen><![CDATA[
sudo apt-get install unattended-upgrades
		]]></screen>
		<para>/etc/apt/apt.conf.d/50unattended-upgrades</para>
		<screen><![CDATA[

		]]></screen>
		<para>Notifications</para>
		<screen><![CDATA[
sudo apt-get install apticron
		]]></screen>
		<para>/etc/apticron/apticron.conf</para>
		<screen><![CDATA[
EMAIL="root@example.com"
		]]></screen>
		<section>
			<title>升级过程中链接中断怎么办?</title>
			<screen><![CDATA[
Ubuntu 16.04 升级到 16.10 过程中SSH中断

我猜测do-release-upgrade 一定会有恢复方案，应该是screen. 经过查看果然是 screen

开始尝试恢复screen 提示

neo@netkiller:~$ screen -ls
No Sockets found in /var/run/screen/S-neo.

后来想到应该是root而不是当前用户，再次查看

neo@netkiller:~$ sudo screen -ls
[sudo] password for neo:
There is a screen on:
 1955.ubuntu-release-upgrade-screen-window (11/25/2016 07:44:50 PM)       (Detached)
1 Socket in /var/run/screen/S-root.

的确如猜测一样，现在回复窗口吧。

neo@netkiller:~$ sudo screen -r 1955

继续			
			]]></screen>
		</section>
		<section>
			<title>列出不能更新的包</title>
			<screen>
			<![CDATA[
neo@netkiller ~ % apt list --upgradable
Listing... Done
dh-python/groovy,groovy 4.20200925 all [upgradable from: 4.20191017ubuntu7]
iptables/groovy-updates 1.8.5-3ubuntu2.20.10.1 amd64 [upgradable from: 1.8.5-3ubuntu1]
krb5-locales/groovy-updates,groovy-updates,groovy-security,groovy-security 1.17-10ubuntu0.1 all [upgradable from: 1.17-10]
libgssapi-krb5-2/groovy-updates,groovy-security 1.17-10ubuntu0.1 amd64 [upgradable from: 1.17-10]
libgssapi-krb5-2/groovy-updates,groovy-security 1.17-10ubuntu0.1 i386 [upgradable from: 1.17-10]
libip4tc2/groovy-updates 1.8.5-3ubuntu2.20.10.1 amd64 [upgradable from: 1.8.5-3ubuntu1]
libip6tc2/groovy-updates 1.8.5-3ubuntu2.20.10.1 amd64 [upgradable from: 1.8.5-3ubuntu1]
libk5crypto3/groovy-updates,groovy-security 1.17-10ubuntu0.1 amd64 [upgradable from: 1.17-10]
libk5crypto3/groovy-updates,groovy-security 1.17-10ubuntu0.1 i386 [upgradable from: 1.17-10]
libkrb5-3/groovy-updates,groovy-security 1.17-10ubuntu0.1 amd64 [upgradable from: 1.17-10]
libkrb5-3/groovy-updates,groovy-security 1.17-10ubuntu0.1 i386 [upgradable from: 1.17-10]
libkrb5support0/groovy-updates,groovy-security 1.17-10ubuntu0.1 amd64 [upgradable from: 1.17-10]
libkrb5support0/groovy-updates,groovy-security 1.17-10ubuntu0.1 i386 [upgradable from: 1.17-10]
libldap-2.4-2/groovy-updates,groovy-security 2.4.53+dfsg-1ubuntu1.2 amd64 [upgradable from: 2.4.53+dfsg-1ubuntu1.1]
libldap-common/groovy-updates,groovy-updates,groovy-security,groovy-security 2.4.53+dfsg-1ubuntu1.2 all [upgradable from: 2.4.53+dfsg-1ubuntu1.1]
libxtables12/groovy-updates 1.8.5-3ubuntu2.20.10.1 amd64 [upgradable from: 1.8.5-3ubuntu1]
linux-generic/groovy-updates 5.8.0.29.34 amd64 [upgradable from: 5.8.0.28.33]
linux-headers-generic/groovy-updates 5.8.0.29.34 amd64 [upgradable from: 5.8.0.28.33]
linux-image-generic/groovy-updates 5.8.0.29.34 amd64 [upgradable from: 5.8.0.28.33]
linux-libc-dev/groovy-updates 5.8.0-29.31 amd64 [upgradable from: 5.8.0-28.30]			
			]]>
			</screen>
		</section>

	</section>
	<section id="sources.list">
		<title>更换 api 源镜像</title>
		<para>备份 /etc/apt/sources.list 文件，然后覆盖即可</para>
		<screen>
		<![CDATA[
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse		
		]]>
		</screen>
		<section>
			<title>Ubuntu 18.04</title>
			<screen>
			<![CDATA[
sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
cat > /etc/apt/sources.list << EOF 
deb http://mirrors.aliyun.com/ubuntu/ xenial main 
deb-src http://mirrors.aliyun.com/ubuntu/ xenial main 
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main 
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main 
deb http://mirrors.aliyun.com/ubuntu/ xenial universe 
deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe 
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe 
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe 
deb http://mirrors.aliyun.com/ubuntu/ xenial-security main 
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main 
deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe 
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe 
EOF			
			]]>
			</screen>
		</section>
	</section>
	<section id="dpkg">
		<title>dpkg</title>
		<section>
			<title>-i|--install 安装.deb包</title>
			<screen><![CDATA[
$ sudo dpkg -i netkiller-1.0.deb
			]]></screen>
		</section>
		<section>
			<title>-r|--remove 卸载.deb包</title>
			<screen><![CDATA[
$ sudo dpkg -r netkiller
			]]></screen>
		</section>
		<section>
			<title><![CDATA[-L|--listfiles <package> ...     List files `owned' by package(s). 列出包中的文件]]></title>
			<screen><![CDATA[
$ dpkg -L netkiller|more
/.
/opt
/opt/neo
/opt/neo/netkiller-1.0
/opt/neo/netkiller-1.0/linux
/opt/neo/netkiller-1.0/linux/docbook.css
/opt/neo/netkiller-1.0/linux/apas03.html
/opt/neo/netkiller-1.0/linux/shell
			]]></screen>
		</section>
		<section>
			<title><![CDATA[-l|--list [<pattern> ...] 	List packages concisely. 列出.deb包]]></title>
			<screen>
			<![CDATA[
$ sudo dpkg -l netkiller
$ dpkg -l netkiller
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name           Version        Description
+++-==============-==============-============================================
un  netkiller      <none>         (no description available)
			]]>
			</screen>
		</section>

		<section>
			<title>Status</title>
			<para>系统上装了哪些软件包</para>
			<screen><![CDATA[
要查看 Debian 系统上安装的所有软件包的状态, 运行

     dpkg --list

输出每个软件包的一行简单介绍, 2字符的状态标志, 包名, 所安装版本, 和简要描述.

查看以 "foo" 开头的软件包的状态, 执行:

     dpkg --list 'foo*'

要得到某个软件包的更详细信息, 执行:

     dpkg --status packagename
			]]></screen>
			<para>List of installed software packages</para>
			<screen><![CDATA[
$ dpkg-query -W
			]]></screen>
			<para>Description of installed software packages</para>
			<screen><![CDATA[
$ dpkg -l
			]]></screen>
			<para>找出一个文件的归属包</para>
			<screen><![CDATA[
dpkg --search cachemgr
squid3-cgi: /usr/lib/cgi-bin/cachemgr3.cgi
squid3-cgi: /usr/share/man/man8/cachemgr3.cgi.8.gz
squid3-cgi: /etc/squid3/cachemgr.conf
			]]></screen>
		</section>

		<section>
			<title>dpkg-deb - Debian package archive (.deb) manipulation tool</title>
			<section>
				<title>-X, --vextract archive directory
					Extract and display the filenames contained by a
					package
				</title>
				<screen><![CDATA[
$ dpkg -X dmd_2.057-0_amd64.deb dmd_2.057-0_amd64
				]]></screen>
			</section>

			<section>
				<title>-e, --control archive [directory]
					Extracts the control information files from a package archive into the specified directory.
				</title>
				<screen><![CDATA[
$ dpkg -e dmd_2.057-0_amd64.deb

$ find DEBIAN/
DEBIAN/
DEBIAN/conffiles
DEBIAN/md5sum
DEBIAN/control
				]]></screen>
			</section>
			<section id="dpkg.build">
				<title>-b, --build directory [archive|directory]</title>
				<para>在你的目录下创建DEBIAN目录与control文件</para>
				<screen>
				<![CDATA[
mkdir DEBIAN/

cat >> DEBIAN/control <<EOF
Package: netkiller
Version: 1.0-0
Architecture: amd64
Maintainer: Neo Chen <netkiller@msn.com>
Installed-Size: 51196
Depends: libc6-dev, gcc, gcc-multilib, libc6 (>= 2.11), libgcc1 (>= 1:4.1.1), libstdc++6 (>= 4.1.1)
Section: devel
Priority: optional
Description: Netkiller ebook
 .
 Main designer: Neo Chen
 .
 Homepage: http://netkiller.github.com/
 .
EOF
				]]>
				</screen>
				<screen>
				<![CDATA[
$ dpkg -b dlang dlang.deb
dpkg-deb: building package `netkiller' in `dlang.deb'.		

$ dpkg --info dlang.deb
 new debian package, version 2.0.
 size 263266 bytes: control archive= 371 bytes.
     354 bytes,    14 lines      control              
 Package: netkiller
 Version: 1.0-0
 Architecture: amd64
 Maintainer: Neo Chen <netkiller@msn.com>
 Installed-Size: 51196
 Depends: libc6-dev, gcc, gcc-multilib, libc6 (>= 2.11), libgcc1 (>= 1:4.1.1), libstdc++6 (>= 4.1.1)
 Section: devel
 Priority: optional
 Description: Netkiller ebook
  .
  Main designer: Neo Chen
  .
  Homepage: http://netkiller.github.com/
  .

$ dpkg --contents dlang.deb
drwxr-xr-x neo/neo           0 2012-02-06 11:22 ./
-rw-r--r-- neo/neo         144 2012-02-01 16:35 ./hello.lst
-rwxr-xr-x neo/neo         321 2012-01-08 21:25 ./test.d
-rw-r--r-- neo/neo         207 2012-02-01 15:57 ./d4py.d
-rwxr-xr-x neo/neo      919366 2012-02-01 16:28 ./hello
-rw-r--r-- neo/neo        6452 2012-02-01 16:28 ./hello.o
-rwxr--r-- neo/neo          80 2012-01-08 21:28 ./hello.d

				]]>
				</screen>
			</section>
		</section>

		<section id="dpkg-reconfigure">
			<title>dpkg-reconfigure</title>
			<screen><![CDATA[
$ sudo dpkg-reconfigure package
			]]></screen>
			<para>所有未完成的配置步骤，主要是你在安装过程中出现中断后，可以使用下面命令补救。</para>
			<screen><![CDATA[
$ sudo dpkg --configure -a			
			]]></screen>
		</section>
	</section>
	<section id="do-release-upgrade">
		<title>Upgrading</title>

		<para>升级到最新开发版</para>
		<section>
			<title>GUI</title>
			<screen><![CDATA[
update-manager --devel-release
			]]></screen>
		</section>
		<section>
			<title>CLI</title>
			<screen><![CDATA[
$ sudo do-release-upgrade

$ lsb_release -a
			]]></screen>
			<para>升级到最新开发版</para>
			<screen><![CDATA[
vim /etc/update-manager/release-upgrades 文件，把里面的
Prompt=lts
改为
Prompt=normal
			]]></screen>
			<screen><![CDATA[
sudo do-release-upgrade -d
			]]></screen>
		</section>
		<section>
			<title>CDROM</title>
			<screen><![CDATA[
$ sudo mount -t iso9660 -o loop ~/maverick-alternate-i386.iso /cdrom
$ sudo /cdrom/cdromupgrade
			]]></screen>
		</section>
	</section>

	<section id="deb">
		<title>制作.deb安装包</title>
		<section id="checkinstall">
			<title>checkinstall — Track installation of local software, and produce a binary manageable with your package management software.</title>
			<screen><![CDATA[
$ tar xxx.tar.gz
$ cd xxx
$ ./configure
$ make			
			]]></screen>
			<screen><![CDATA[
$ sudo apt-get install checkinstall		
			]]></screen>

		</section>
		<section id="dh_make">
			<title>dh_make - prepare Debian packaging for an original source archive</title>
			<para>http://www.debian.org/doc/manuals/maint-guide/index.zh-cn.html</para>
			<para>http://www.debian.org/doc/manuals/maint-guide/</para>
		</section>
		<section id="control">
			<title>control</title>
			<para>Architecture: any | amd64 | i386 The generated binary package is an architecture dependent one usually in a compiled language.</para>
			<para>Architecture: all The generated binary package is an architecture independent one usually consisting of text, images, or scripts in an interpreted language.</para>
		</section>
	</section>
</section>