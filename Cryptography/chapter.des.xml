<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: chapter.des.xml 476 2012-10-31 09:39:14Z netkiller $ -->
<chapter id="index"><?dbhtml dir="des" ?>
	<title>DES crypt() 专题</title>
	<tip><para>CRYPT_MD5 是Unix like Shadow密码 </para></tip>

	<section id="crypt.c">
		<title>C crypt()</title>
		<para>crypt是个密码加密函数，它是基於Data Encryption Standard(DES)演算法。</para>
		<para>crypt基本上是One way encryption，因此它只适用於密码的使用，不适合於资料加密。</para>
		<para>char *crypt(const char *key, const char *salt);</para>
		<para>key 是使用者的密码。salt是两个字，每个字可从[a-zA-Z0-9./]中选出来，因此同一密码增加了4096种可能性。透过使用key中每个字的低七位元，取得 56-bit关键字，这56-bit关键字被用来加密成一组字，这组字有13个可显示的 ASCII字，包含开头两个salt。 </para>
		<screen lang="c">
<![CDATA[
[root@linux root]# cat crypt.c
/*
Netkiller 2003-06-27 crypt.c
char *crypt(const char *key, const char *salt);
*/
#include <unistd.h>
main(){
    char key[256];
    char salt[64];
    char passwd[256];
    printf("key:");
    scanf("%s",&key);
    printf("salt:");
    scanf("%s",&salt);
    sprintf(passwd,"passwd:%s\n",crypt(key,salt));
    printf(passwd);
}
[root@linux root]# gcc -o crypt -s crypt.c –lcrypt
[root@linux root]# ./crypt
key:chen
salt:salt
passwd:sa0hRW/W3DLvQ
[root@linux root]#
]]>
		</screen>
	</section>
	<section id="crypt.php">
		<title>PHP crypt()</title>
		<para>将字符串用 DES 编码加密。 </para>
		<para>语法: string crypt(string str, string [salt]); </para>
		<para>返回值: 字符串 </para>
		<para>函数种类: 编码处理 </para>
		<para>内容说明</para>
		<para>本函数将字符串用 UNIX 的标准加密 DES 模块加密。这是单向的加密函数，无法解密。欲比对字符串，将已加密的字符串的头二个字符放在 salt 的参数中，再比对加密后的字符串。 </para>
		<para>更详细的资料请参考 UNIX Manual (man) 中的 crypt。 </para>
		<para>在一些较新的 UNIX 版本中，除了 DES 之外还提供了其它的加密模块，如 MD5。甚至有些系统还用 MD5 取代 DES。在 salt 参数还有一些变化，端看传给 salt 参数的字符串长度而定： </para>
		<simplelist><title>salt</title>
			<member> * CRYPT_STD_DES - 标准的 DES 编码，输入 2 字符的 salt。</member>
			<member> * CRYPT_EXT_DES - 延伸的 DES 编码，输入 9 字符的 salt。</member>
			<member>* CRYPT_MD5 - MD5 编码，输入 12 字符加上 $1$ 的 salt。</member>
			<member>* CRYPT_BLOWFISH - 延伸的 DES 编码，输入 16 字符加上 $2$ 的 salt。</member>
		</simplelist>
		<para>此外，若不使用 salt 参数，则程序会自动产生。 </para>
		<screen>
<![CDATA[
# cat crypt.php

<html>

<p>DES 密码</p>

<form method=post action=crypt.php>

<p>password:<input name=passwd type=text size=20></p>

<input type=submit value=submit>

</form>

<?

$enpw=crypt($passwd);

echo "password is: $enpw";

?>



[root@linux root]# wget http://netkiller.hikz.com/linux/download/myphp/site-2.1.0.tar.gz
[root@linux root]#tar zxvf site-2.1.0.tar.gz
[root@linux root]#cp –r site /usr/local/apache/htdocs
[root@linux root]#lynx http://localhost/site
]]>
		</screen>
	</section>
	<section id="crypt.perl">
		<title>perl crypt</title>
		<screen>
perl -e 'print("userPassword: ".crypt("secret","salt")."\n");'
		</screen>
	</section>
	<section id="crypt.mysql">
		<title>mysql crypt</title>
		<screen>
select encrypt('password');



mysql> select encrypt('password');

+---------------------+

| encrypt('password') |

+---------------------+

| WXvvG0CWY7v5I       |

+---------------------+

1 row in set (0.00 sec)



mysql>
		</screen>
	</section>
	<section id="crypt.java">
		<title>Java crypt</title>
		<literallayout>

第一种方法：

Crypt.java



Import netkiller. Security;

Crypt pw = new Crypt();

String passwd = pw.crypt(“passwd”,”salt”);

System.out.println(passwd);

关于JAVA的Crypt包请与我联系



第二种方法：

使用PostgreSQL JDBC中提供的org.postgresql.util.UnixCrypt产生crypt。



Class　postgresql.util.UnixCrypt

java.lang.Object

　　　|

　　　+----postgresql.util.UnixCrypt

　　　公共类　UnixCrypt　扩展　Object

　　　这个类为我们提供了在通过网络流传输口令时的加密的功能

　　　包含静态方法用于加密口令和与　Unix　加密的口令比较.

　　　参阅　John　Dumas　的　Java　Crypt　(加密)页面获取原始代码.

　　　http://www.zeh.com/local/jfd/crypt.html

方法

public　static　final　String　crypt(String　salt, String　original)

　　　　加密给出了明文口令和一个"种子"("salt"）的口令.

参数:

　　　　salt　-　一个两字符字串代表的所用的种子，　用以向加密引擎说明加密的不同方式．如果你要生成一个新的密文那么这个值应该是随机生成的.

　　　　original　-　待加密口令.

返回:

　　　　一个字串,　先是　2　字符的种子,　然后跟着密文口令.



方法：

1.         安装PostgreSQL JDBC，请到http://www.postgresql.org 下载

2.         将JDBC的.jar文件加到JAVA 的CLASSPATH中

3.         新建JAVA文件。

4.         编译javac crypt.java

5.         运行JAVA CLASS文件 java your-package.your-class
java crypt



import org.postgresql.util.UnixCrypt;

import java.io.InputStreamReader;

import java.io.BufferedReader;

import java.io.IOException;



public class crypt {

    public static void main(String[] args) throws IOException {

       String password;

       BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

       System.out.println("Enter the password to encrypt. Your password"+

                        " will be echoed on the screen,");

       System.out.println("please ensure nobody is looking.");

       System.out.print("password :>");

       password=br.readLine();

       System.out.println(UnixCrypt.crypt(password));

    };

};
		</literallayout>

	</section>
	<section id="grub-md5-crypt">
		<title>grub-md5-crypt - Encrypt a password in MD5 format.</title>
		<screen>
# grub-md5-crypt
Password:
Retype password:
$1$ZlJ1u0$tdv/dr8pYuHh.eT47F6b70
		</screen>
	</section>
</chapter>
